2019-03-13 09:57:15,476 INFO  Loading Baseframework Plugin
2019-03-13 09:57:15,481 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-13 09:57:15,495 INFO  Loading the Menu - HandsOn
2019-03-13 09:57:15,609 INFO  Successfully loaded the Menu - HandsOn
2019-03-13 09:58:06,695 INFO  Loading Programming Assignment Plugin
2019-03-13 09:58:06,705 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-13 11:09:23,721 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-13 11:11:15,916 INFO  Setting request parameters for VerifySolution
2019-03-13 11:11:15,916 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 11:11:15,921 INFO  Starting to parse the user solution
2019-03-13 11:11:15,927 INFO  Displaying user solution
2019-03-13 11:11:16,147 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-34\r\n'''\r\nCreated on Mar 13, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Company:\r\n    #Stores hike% based on job level.\r\n    dict_hike={\"A\":5, \"B\":6, \"C\":10 , \"D\":11}\r\n    #Consider incentive provided in all classes to be in Rupees(Rs).\r\n    __c_incentive=5000\r\n    def __init__(self,name):\r\n        self.name=name\r\n    @staticmethod\r\n    def get_c_incentive():\r\n        return Company.__c_incentive\r\nclass Employee:\r\n    def __init__(self, emp_id,e_incentive, job_level,salary, performance_list):\r\n        self.emp_id=emp_id\r\n        self.__e_incentive=e_incentive\r\n        self.__salary=salary\r\n        self.__job_level=job_level\r\n        self.__performance_list=performance_list\r\n    def get_e_incentive(self):\r\n        return self.__e_incentive\r\n    def get_performance_list(self):\r\n        return self.__performance_list\r\n    def get_salary(self):\r\n        return self.__salary\r\n    def get_job_level(self):\r\n        return self.__job_level\r\n    def identify_performance_hike(self):\r\n        return None\r\n    def identify_job_level_hike(self):\r\n        return None\r\n    def identify_incentive(self):\r\n        return None\r\n    def update_salary(self,hike, incentive):\r\n        self.__salary= (self.__salary+ self.__salary*hike/100) + incentive\r\n    def calculate_salary(self):\r\n        jl_hike=self.identify_job_level_hike()\r\n        ex_hike=self.identify_performance_hike()\r\n        if(jl_hike!=None):\r\n            hike=jl_hike\r\n            if(ex_hike!=None):\r\n                hike+=ex_hike\r\n            incentive=self.identify_incentive()\r\n            self.update_salary(hike, incentive)\r\n            return True\r\n        else:\r\n            return False\r\n#Implement the class here\r\n","asgnmtId":"34","SolutionFileName":"Assign34.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 11:11:16,147 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 11:11:16,148 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 11:11:16,148 INFO  Invoking the service to verify the user solution
2019-03-13 11:11:16,148 INFO  Time before invoking service:Wed Mar 13 11:11:16 IST 2019
2019-03-13 11:11:16,149 INFO  Initialising service address for VerifySolution
2019-03-13 11:11:16,150 INFO  Time before invoking service In SUPER:Wed Mar 13 11:11:16 IST 2019
2019-03-13 11:11:17,771 INFO  Time after invoking service In SUPER:Wed Mar 13 11:11:17 IST 2019
2019-03-13 11:11:17,771 INFO  Service responded successfully with required details
2019-03-13 11:11:17,771 INFO  Time after invoking service:Wed Mar 13 11:11:17 IST 2019
2019-03-13 11:11:17,771 INFO  User solution successfully verified
2019-03-13 11:11:17,772 INFO  Processing the response from verify service
2019-03-13 11:11:17,780 INFO  Starting to parse JSON response
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,786 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 11:11:17,790 INFO  Successfully parsed JSON response
2019-03-13 11:11:17,791 INFO  In the process of generating verify response in HTML
2019-03-13 11:11:18,166 INFO  Successfully generated verify response in HTML
2019-03-13 11:11:18,166 INFO  Successfully processed the response from service
2019-03-13 19:55:02,976 INFO  Loading Baseframework Plugin
2019-03-13 19:55:02,981 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-13 19:55:02,982 INFO  Loading the Menu - HandsOn
2019-03-13 19:55:02,987 INFO  Successfully loaded the Menu - HandsOn
2019-03-13 20:02:46,676 INFO  Loading Programming Assignment Plugin
2019-03-13 20:02:47,073 INFO  Setting request parameters for VerifySolution
2019-03-13 20:02:47,073 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:02:47,077 INFO  Starting to parse the user solution
2019-03-13 20:02:47,078 INFO  Displaying user solution
2019-03-13 20:02:47,184 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76 <=gpa<= 5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            \r\n            if(super().get_job_band()==\"D\"):\r\n                incentive  = 0.13\r\n            elif(super().get_job_band()==\"E\"):\r\n                incentive  = 0.16\r\n            elif(super().get_job_band()==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                SME_bonus=6500\r\n            elif(skill == 'AGPT'):\r\n                SME_bonus=8200\r\n            elif(skill == \"AGDEV\"):\r\n                SME_bonus=11500\r\n            else: \r\n                SME_bonus=0\r\n            basic_salary=super().get_basic_salary()\r\n            total_salary = (basic_salary*1.12) + (basic_salary*incentive) + SME_bonus\r\n            return total_salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:02:47,185 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:02:47,186 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:02:47,186 INFO  Invoking the service to verify the user solution
2019-03-13 20:02:47,186 INFO  Time before invoking service:Wed Mar 13 20:02:47 IST 2019
2019-03-13 20:02:47,188 INFO  Initialising service address for VerifySolution
2019-03-13 20:02:47,189 INFO  Time before invoking service In SUPER:Wed Mar 13 20:02:47 IST 2019
2019-03-13 20:02:48,477 INFO  Time after invoking service In SUPER:Wed Mar 13 20:02:48 IST 2019
2019-03-13 20:02:48,478 INFO  Service responded successfully with required details
2019-03-13 20:02:48,478 INFO  Time after invoking service:Wed Mar 13 20:02:48 IST 2019
2019-03-13 20:02:48,479 INFO  User solution successfully verified
2019-03-13 20:02:48,480 INFO  Processing the response from verify service
2019-03-13 20:02:48,484 INFO  Starting to parse JSON response
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,489 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:02:48,492 INFO  Successfully parsed JSON response
2019-03-13 20:02:48,494 INFO  In the process of generating verify response in HTML
2019-03-13 20:02:49,047 INFO  Successfully generated verify response in HTML
2019-03-13 20:02:49,047 INFO  Successfully processed the response from service
2019-03-13 20:03:24,035 INFO  Setting request parameters for VerifySolution
2019-03-13 20:03:24,036 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:03:24,036 INFO  Starting to parse the user solution
2019-03-13 20:03:24,036 INFO  Displaying user solution
2019-03-13 20:03:24,145 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76 <=gpa<= 5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                SME=6500\r\n            elif(skill == 'AGPT'):\r\n                SME=8200\r\n            elif(skill == \"AGDEV\"):\r\n                SME=11500\r\n            else: \r\n                SME=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + SME\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:03:24,145 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:03:24,145 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:03:24,145 INFO  Invoking the service to verify the user solution
2019-03-13 20:03:24,145 INFO  Time before invoking service:Wed Mar 13 20:03:24 IST 2019
2019-03-13 20:03:24,145 INFO  Initialising service address for VerifySolution
2019-03-13 20:03:24,146 INFO  Time before invoking service In SUPER:Wed Mar 13 20:03:24 IST 2019
2019-03-13 20:03:25,375 INFO  Time after invoking service In SUPER:Wed Mar 13 20:03:25 IST 2019
2019-03-13 20:03:25,375 INFO  Service responded successfully with required details
2019-03-13 20:03:25,375 INFO  Time after invoking service:Wed Mar 13 20:03:25 IST 2019
2019-03-13 20:03:25,376 INFO  User solution successfully verified
2019-03-13 20:03:25,376 INFO  Processing the response from verify service
2019-03-13 20:03:25,378 INFO  Starting to parse JSON response
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:25,381 INFO  Successfully parsed JSON response
2019-03-13 20:03:25,381 INFO  In the process of generating verify response in HTML
2019-03-13 20:03:25,465 INFO  Successfully generated verify response in HTML
2019-03-13 20:03:25,465 INFO  Successfully processed the response from service
2019-03-13 20:03:51,274 INFO  Setting request parameters for VerifySolution
2019-03-13 20:03:51,274 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:03:51,274 INFO  Starting to parse the user solution
2019-03-13 20:03:51,275 INFO  Displaying user solution
2019-03-13 20:03:51,355 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76 <=gpa<= 5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                sme=6500\r\n            elif(skill == 'AGPT'):\r\n                sme=8200\r\n            elif(skill == \"AGDEV\"):\r\n                sme=11500\r\n            else: \r\n                sme=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + sme\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:03:51,356 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:03:51,356 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:03:51,356 INFO  Invoking the service to verify the user solution
2019-03-13 20:03:51,356 INFO  Time before invoking service:Wed Mar 13 20:03:51 IST 2019
2019-03-13 20:03:51,356 INFO  Initialising service address for VerifySolution
2019-03-13 20:03:51,356 INFO  Time before invoking service In SUPER:Wed Mar 13 20:03:51 IST 2019
2019-03-13 20:03:52,600 INFO  Time after invoking service In SUPER:Wed Mar 13 20:03:52 IST 2019
2019-03-13 20:03:52,600 INFO  Service responded successfully with required details
2019-03-13 20:03:52,601 INFO  Time after invoking service:Wed Mar 13 20:03:52 IST 2019
2019-03-13 20:03:52,601 INFO  User solution successfully verified
2019-03-13 20:03:52,602 INFO  Processing the response from verify service
2019-03-13 20:03:52,605 INFO  Starting to parse JSON response
2019-03-13 20:03:52,607 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,607 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,607 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:03:52,609 INFO  Successfully parsed JSON response
2019-03-13 20:03:52,609 INFO  In the process of generating verify response in HTML
2019-03-13 20:03:52,753 INFO  Successfully generated verify response in HTML
2019-03-13 20:03:52,753 INFO  Successfully processed the response from service
2019-03-13 20:05:01,324 INFO  Setting request parameters for VerifySolution
2019-03-13 20:05:01,324 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:05:01,324 INFO  Starting to parse the user solution
2019-03-13 20:05:01,325 INFO  Displaying user solution
2019-03-13 20:05:01,393 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76<=gpa<= 5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                sme=6500\r\n            elif(skill == 'AGPT'):\r\n                sme=8200\r\n            elif(skill == \"AGDEV\"):\r\n                sme=11500\r\n            else: \r\n                sme=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + sme\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:05:01,394 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:05:01,394 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:05:01,395 INFO  Invoking the service to verify the user solution
2019-03-13 20:05:01,395 INFO  Time before invoking service:Wed Mar 13 20:05:01 IST 2019
2019-03-13 20:05:01,395 INFO  Initialising service address for VerifySolution
2019-03-13 20:05:01,395 INFO  Time before invoking service In SUPER:Wed Mar 13 20:05:01 IST 2019
2019-03-13 20:05:02,690 INFO  Time after invoking service In SUPER:Wed Mar 13 20:05:02 IST 2019
2019-03-13 20:05:02,690 INFO  Service responded successfully with required details
2019-03-13 20:05:02,691 INFO  Time after invoking service:Wed Mar 13 20:05:02 IST 2019
2019-03-13 20:05:02,691 INFO  User solution successfully verified
2019-03-13 20:05:02,691 INFO  Processing the response from verify service
2019-03-13 20:05:02,695 INFO  Starting to parse JSON response
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,697 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:02,699 INFO  Successfully parsed JSON response
2019-03-13 20:05:02,699 INFO  In the process of generating verify response in HTML
2019-03-13 20:05:02,772 INFO  Successfully generated verify response in HTML
2019-03-13 20:05:02,773 INFO  Successfully processed the response from service
2019-03-13 20:05:12,644 INFO  Setting request parameters for VerifySolution
2019-03-13 20:05:12,644 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:05:12,644 INFO  Starting to parse the user solution
2019-03-13 20:05:12,644 INFO  Displaying user solution
2019-03-13 20:05:12,740 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76<=gpa<= 5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                sme=6500\r\n            elif(skill == 'AGPT'):\r\n                sme=8200\r\n            elif(skill == \"AGDEV\"):\r\n                sme=11500\r\n            else: \r\n                sme=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + sme\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:05:12,741 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:05:12,741 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:05:12,741 INFO  Invoking the service to verify the user solution
2019-03-13 20:05:12,742 INFO  Time before invoking service:Wed Mar 13 20:05:12 IST 2019
2019-03-13 20:05:12,742 INFO  Initialising service address for VerifySolution
2019-03-13 20:05:12,742 INFO  Time before invoking service In SUPER:Wed Mar 13 20:05:12 IST 2019
2019-03-13 20:05:13,912 INFO  Time after invoking service In SUPER:Wed Mar 13 20:05:13 IST 2019
2019-03-13 20:05:13,913 INFO  Service responded successfully with required details
2019-03-13 20:05:13,913 INFO  Time after invoking service:Wed Mar 13 20:05:13 IST 2019
2019-03-13 20:05:13,913 INFO  User solution successfully verified
2019-03-13 20:05:13,913 INFO  Processing the response from verify service
2019-03-13 20:05:13,915 INFO  Starting to parse JSON response
2019-03-13 20:05:13,916 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,916 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,917 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:13,918 INFO  Successfully parsed JSON response
2019-03-13 20:05:13,919 INFO  In the process of generating verify response in HTML
2019-03-13 20:05:14,069 INFO  Successfully generated verify response in HTML
2019-03-13 20:05:14,070 INFO  Successfully processed the response from service
2019-03-13 20:05:17,080 INFO  Initiating to process and prepare Input for the submit service
2019-03-13 20:05:17,083 INFO  Displaying user solution
2019-03-13 20:05:17,092 INFO  Successfully processed and prepared the input for the submit service
2019-03-13 20:05:17,092 INFO  Invoking the service to submit the user solution
2019-03-13 20:05:17,093 INFO  Initialising service address for Submit
2019-03-13 20:05:17,093 INFO  Time before invoking service In SUPER:Wed Mar 13 20:05:17 IST 2019
2019-03-13 20:05:17,202 INFO  Time after invoking service In SUPER:Wed Mar 13 20:05:17 IST 2019
2019-03-13 20:05:17,202 INFO  Service responded successfully with required details
2019-03-13 20:05:17,202 INFO  User solution successfully submitted
2019-03-13 20:05:17,204 INFO  Displaying submission status
2019-03-13 20:05:17,204 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-13 20:05:47,090 INFO  Setting request parameters for VerifySolution
2019-03-13 20:05:47,090 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:05:47,090 INFO  Starting to parse the user solution
2019-03-13 20:05:47,091 INFO  Displaying user solution
2019-03-13 20:05:47,151 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76<=gpa<=5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                sme=6500\r\n            elif(skill == 'AGPT'):\r\n                sme=8200\r\n            elif(skill == \"AGDEV\"):\r\n                sme=11500\r\n            else: \r\n                sme=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + sme\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:05:47,152 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:05:47,153 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:05:47,153 INFO  Invoking the service to verify the user solution
2019-03-13 20:05:47,153 INFO  Time before invoking service:Wed Mar 13 20:05:47 IST 2019
2019-03-13 20:05:47,153 INFO  Initialising service address for VerifySolution
2019-03-13 20:05:47,154 INFO  Time before invoking service In SUPER:Wed Mar 13 20:05:47 IST 2019
2019-03-13 20:05:48,439 INFO  Time after invoking service In SUPER:Wed Mar 13 20:05:48 IST 2019
2019-03-13 20:05:48,440 INFO  Service responded successfully with required details
2019-03-13 20:05:48,440 INFO  Time after invoking service:Wed Mar 13 20:05:48 IST 2019
2019-03-13 20:05:48,440 INFO  User solution successfully verified
2019-03-13 20:05:48,441 INFO  Processing the response from verify service
2019-03-13 20:05:48,446 INFO  Starting to parse JSON response
2019-03-13 20:05:48,447 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,447 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,447 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,447 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,447 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:05:48,449 INFO  Successfully parsed JSON response
2019-03-13 20:05:48,449 INFO  In the process of generating verify response in HTML
2019-03-13 20:05:48,525 INFO  Successfully generated verify response in HTML
2019-03-13 20:05:48,525 INFO  Successfully processed the response from service
2019-03-13 20:06:02,421 INFO  Setting request parameters for VerifySolution
2019-03-13 20:06:02,422 INFO  Initiating to process and prepare Input for the verify service
2019-03-13 20:06:02,422 INFO  Starting to parse the user solution
2019-03-13 20:06:02,422 INFO  Displaying user solution
2019-03-13 20:06:02,502 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-32\r\n'''\r\nCreated on Mar 12, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import abstractmethod,ABCMeta\r\nclass Employee(metaclass = ABCMeta):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification):\r\n        self.__job_band=job_band\r\n        self.__employee_name=employee_name\r\n        self.__basic_salary=basic_salary\r\n        self.__qualification=qualification\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n\r\n    def get_employee_name(self):\r\n        return self.__employee_name\r\n\r\n    def get_basic_salary(self):\r\n        return self.__basic_salary\r\n\r\n    def get_qualification(self):\r\n        return self.__qualification\r\n    @abstractmethod\r\n    def validate_job_band(self):\r\n        pass\r\n\r\n    def validate_basic_salary(self):\r\n        if self.__basic_salary>3000:\r\n            return True\r\n        return False\r\n\r\n    def validate_qualification(self):\r\n        if self.__qualification in [\"Bachelors\", \"Masters\"]:\r\n            return True\r\n        return False\r\n\r\n    @abstractmethod\r\n    def calculate_gross_salary(self):\r\n        pass\r\n    \r\nclass Graduate(Employee):\r\n    def __init__(self,job_band,employee_name,basic_salary,qualification,cgpa):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__cgpa=cgpa\r\n    def get_cgpa(self):\r\n        return self.__cgpa\r\n    def validate_job_band(self):\r\n        if super().get_job_band() in ['A','B','C']:\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_qualification() and\r\n            self.validate_basic_salary()):\r\n            gpa = self.__cgpa\r\n            job_band=super().get_job_band()\r\n            if(4<=gpa<=4.25):\r\n                tpi =1000\r\n            elif(4.26<=gpa<=4.5):\r\n                tpi =1700\r\n            elif(4.51<=gpa<=4.75):\r\n                tpi =3200\r\n            elif(4.76<=gpa<=5):\r\n                tpi =5000\r\n            \r\n            if(job_band ==\"A\"):\r\n                incentive  = 0.04\r\n            elif(job_band ==\"B\"):\r\n                incentive  = 0.06\r\n            elif(job_band ==\"C\"):\r\n                incentive  = 0.10\r\n            basic=super().get_basic_salary()\r\n            salary = (basic * incentive)+(basic*0.12)+tpi+basic\r\n            return salary\r\n        return -1\r\n\r\nclass Lateral(Employee):\r\n    def __init__(self,job_band,employee_name,\r\n                 basic_salary,qualification,skill_set):\r\n        super().__init__(job_band, employee_name, basic_salary, qualification)\r\n        self.__skill_set = skill_set\r\n    def get_skill_set(self):\r\n        return self.__skill_set\r\n    def validate_job_band(self):\r\n        if(super().get_job_band() in ['D','E','F']):\r\n            return True\r\n        return False\r\n    def calculate_gross_salary(self):\r\n        \r\n        if(self.validate_job_band() and \r\n           self.validate_basic_salary() \r\n           and self.validate_qualification()):\r\n            skill= self.__skill_set\r\n            job_band = super().get_job_band()\r\n            if(job_band ==\"D\"):\r\n                incentive  = 0.13\r\n            elif(job_band ==\"E\"):\r\n                incentive  = 0.16\r\n            elif(job_band ==\"F\"):\r\n                incentive  = 0.20\r\n            if(skill == \"AGP\"):\r\n                sme=6500\r\n            elif(skill == 'AGPT'):\r\n                sme=8200\r\n            elif(skill == \"AGDEV\"):\r\n                sme=11500\r\n            else: \r\n                sme=0\r\n            basic_salary=super().get_basic_salary()\r\n            salary = (basic_salary*1.12) + (basic_salary*incentive) + sme\r\n            return salary\r\n        return -1\r\n","asgnmtId":"32","SolutionFileName":"Assign32.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-13 20:06:02,503 INFO  Successfully processed and prepared the input for the verify service
2019-03-13 20:06:02,503 INFO  Successfully set the request parameters for VerifySolution
2019-03-13 20:06:02,503 INFO  Invoking the service to verify the user solution
2019-03-13 20:06:02,504 INFO  Time before invoking service:Wed Mar 13 20:06:02 IST 2019
2019-03-13 20:06:02,504 INFO  Initialising service address for VerifySolution
2019-03-13 20:06:02,504 INFO  Time before invoking service In SUPER:Wed Mar 13 20:06:02 IST 2019
2019-03-13 20:06:03,621 INFO  Time after invoking service In SUPER:Wed Mar 13 20:06:03 IST 2019
2019-03-13 20:06:03,621 INFO  Service responded successfully with required details
2019-03-13 20:06:03,622 INFO  Time after invoking service:Wed Mar 13 20:06:03 IST 2019
2019-03-13 20:06:03,622 INFO  User solution successfully verified
2019-03-13 20:06:03,622 INFO  Processing the response from verify service
2019-03-13 20:06:03,625 INFO  Starting to parse JSON response
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,626 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,627 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,627 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,627 ERROR Keys used to parse test result JSON might be incorrect
2019-03-13 20:06:03,628 INFO  Successfully parsed JSON response
2019-03-13 20:06:03,628 INFO  In the process of generating verify response in HTML
2019-03-13 20:06:03,716 INFO  Successfully generated verify response in HTML
2019-03-13 20:06:03,716 INFO  Successfully processed the response from service
2019-03-13 20:06:07,336 INFO  Initiating to process and prepare Input for the submit service
2019-03-13 20:06:07,337 INFO  Displaying user solution
2019-03-13 20:06:07,346 INFO  Successfully processed and prepared the input for the submit service
2019-03-13 20:06:07,347 INFO  Invoking the service to submit the user solution
2019-03-13 20:06:07,347 INFO  Initialising service address for Submit
2019-03-13 20:06:07,347 INFO  Time before invoking service In SUPER:Wed Mar 13 20:06:07 IST 2019
2019-03-13 20:06:07,444 INFO  Time after invoking service In SUPER:Wed Mar 13 20:06:07 IST 2019
2019-03-13 20:06:07,444 INFO  Service responded successfully with required details
2019-03-13 20:06:07,444 INFO  User solution successfully submitted
2019-03-13 20:06:07,444 INFO  Displaying submission status
2019-03-13 20:06:07,444 INFO  Displayed submission status successfullySuccessfully Submitted!
