2019-03-24 18:02:14,776 INFO  Loading Baseframework Plugin
2019-03-24 18:02:14,803 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-24 18:02:15,081 INFO  Loading the Menu - HandsOn
2019-03-24 18:02:15,149 INFO  Successfully loaded the Menu - HandsOn
2019-03-24 19:26:32,976 INFO  Loading Programming Assignment Plugin
2019-03-24 19:26:32,983 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-24 19:26:46,525 INFO  Setting request parameters for VerifySolution
2019-03-24 19:26:46,525 INFO  Initiating to process and prepare Input for the verify service
2019-03-24 19:26:46,530 INFO  Starting to parse the user solution
2019-03-24 19:26:46,531 INFO  Displaying user solution
2019-03-24 19:26:46,614 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-203\r\n'''\r\nCreated on Mar 24, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Mart:\r\n    item_name_list=[\"Chocolate\",\"Perfume\",\"Bouquet\",\"Apparel\"]\r\n    item_price_list=[200,400,150,300]\r\n    item_quantity_list=[10,20,30,40]\r\n\r\n    def find_price_per_item(self,item_name):\r\n        if item_name in Mart.item_name_list:\r\n            index = Mart.item_name_list.index(item_name)\r\n            return Mart.item_price_list[index]\r\n        return -1\r\n\r\n\r\n\r\nclass OnlineMart(Mart):\r\n    def __init__(self,order):\r\n        self.__online_discount_percentage=None\r\n        self.__order=order\r\n\r\n    def identify_online_discount(self):\r\n        if self.__order.get_payment_mode()=='Prepaid':\r\n            self.__online_discount_percentage=5\r\n        elif self.__order.get_payment_mode()=='COD':\r\n            self.__online_discount_percentage=2\r\n        else:\r\n            self.__online_discount_percentage=-1\r\n\r\n    def get_order(self):\r\n        return self.__order\r\n\r\n    #To trainee\r\n    def find_price_per_item(self,item_name):\r\n        initial_price_per_item=super().find_price_per_item(item_name)\r\n        if(initial_price_per_item==-1):\r\n            price_per_item=-1\r\n        else:\r\n            self.identify_online_discount()\r\n            if(self.__online_discount_percentage==-1):\r\n                price_per_item=-1\r\n            else:\r\n                discount = (self.__online_discount_percentage/100)*initial_price_per_item\r\n                price_per_item=initial_price_per_item-discount\r\n        return price_per_item\r\n        pass #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def check_item_availability(self):\r\n        ns=super().item_name_list\r\n        no=self.get_order().get_item_name()\r\n        qs = super().item_quantity_list\r\n        qo=self.get_order().get_quantity_required()\r\n        for i in range(0,len(ns)):\r\n            if(ns[i]==no):\r\n                if(qs[i]>=qo):\r\n                    qs[i]=qs[i]-qo\r\n        \r\n        return qo               \r\n\r\n         #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def ship_order(self):\r\n        quantity = self.check_item_availability()\r\n        price_per_item = self.find_price_per_item(self.__order.get_item_name())\r\n        if(quantity==-1 or price_per_item==-1):\r\n            order_price = -1\r\n            self.__order.set_tracking_id(\"NA\")\r\n        else:\r\n            self.__order.set_order_price(quantity*price_per_item)\r\n            self.__order.generate_tracking_id()\r\n         #Remove pass and write your code here\r\n\r\nclass Order():\r\n    __counter=1000\r\n    def __init__(self,item_name,quantity_required,payment_mode):\r\n        self.__tracking_id=None\r\n        self.__item_name=item_name\r\n        self.__quantity_required=quantity_required\r\n        self.__payment_mode=payment_mode\r\n        self.__order_price=None\r\n\r\n    def get_tracking_id(self):\r\n        return self.__tracking_id\r\n\r\n    def set_tracking_id(self,tracking_id):\r\n        self.__tracking_id = tracking_id\r\n\r\n    def get_item_name(self):\r\n        return self.__item_name\r\n\r\n    def get_quantity_required(self):\r\n        return self.__quantity_required\r\n\r\n    def get_payment_mode(self):\r\n        return self.__payment_mode\r\n\r\n    def get_order_price(self):\r\n        return self.__order_price\r\n\r\n    def set_order_price(self,order_price):\r\n        self.__order_price=order_price\r\n\r\n    #To trainee\r\n    def generate_tracking_id(self):\r\n        self.__tracking_id=\"TR\"+str(Order.__counter)\r\n        Order.__counter+=1\r\n     #Remove pass and write your code here\r\n\r\n#You may modify the below code for testing\r\norder_obj=Order('Bouquet',20,'Prepaid')\r\nonline_mart_object=OnlineMart(order_obj)\r\nonline_mart_object.ship_order()\r\nprint('Tracking ID :',online_mart_object.get_order().get_tracking_id())\r\nprint('Order Price :',online_mart_object.get_order().get_order_price())\r\n","asgnmtId":"203","SolutionFileName":"mock.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-24 19:26:46,615 INFO  Successfully processed and prepared the input for the verify service
2019-03-24 19:26:46,615 INFO  Successfully set the request parameters for VerifySolution
2019-03-24 19:26:46,615 INFO  Invoking the service to verify the user solution
2019-03-24 19:26:46,616 INFO  Time before invoking service:Sun Mar 24 19:26:46 IST 2019
2019-03-24 19:26:46,616 INFO  Initialising service address for VerifySolution
2019-03-24 19:26:46,617 INFO  Time before invoking service In SUPER:Sun Mar 24 19:26:46 IST 2019
2019-03-24 19:26:47,923 INFO  Time after invoking service In SUPER:Sun Mar 24 19:26:47 IST 2019
2019-03-24 19:26:47,923 INFO  Service responded successfully with required details
2019-03-24 19:26:47,923 INFO  Time after invoking service:Sun Mar 24 19:26:47 IST 2019
2019-03-24 19:26:47,924 INFO  User solution successfully verified
2019-03-24 19:26:47,924 INFO  Processing the response from verify service
2019-03-24 19:26:47,926 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-24 19:26:52,824 INFO  Setting request parameters for VerifySolution
2019-03-24 19:26:52,824 INFO  Initiating to process and prepare Input for the verify service
2019-03-24 19:26:52,824 INFO  Starting to parse the user solution
2019-03-24 19:26:52,825 INFO  Displaying user solution
2019-03-24 19:26:52,851 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-203\r\n'''\r\nCreated on Mar 24, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Mart:\r\n    item_name_list=[\"Chocolate\",\"Perfume\",\"Bouquet\",\"Apparel\"]\r\n    item_price_list=[200,400,150,300]\r\n    item_quantity_list=[10,20,30,40]\r\n\r\n    def find_price_per_item(self,item_name):\r\n        if item_name in Mart.item_name_list:\r\n            index = Mart.item_name_list.index(item_name)\r\n            return Mart.item_price_list[index]\r\n        return -1\r\n\r\n\r\n\r\nclass OnlineMart(Mart):\r\n    def __init__(self,order):\r\n        self.__online_discount_percentage=None\r\n        self.__order=order\r\n\r\n    def identify_online_discount(self):\r\n        if self.__order.get_payment_mode()=='Prepaid':\r\n            self.__online_discount_percentage=5\r\n        elif self.__order.get_payment_mode()=='COD':\r\n            self.__online_discount_percentage=2\r\n        else:\r\n            self.__online_discount_percentage=-1\r\n\r\n    def get_order(self):\r\n        return self.__order\r\n\r\n    #To trainee\r\n    def find_price_per_item(self,item_name):\r\n        initial_price_per_item=super().find_price_per_item(item_name)\r\n        if(initial_price_per_item==-1):\r\n            price_per_item=-1\r\n        else:\r\n            self.identify_online_discount()\r\n            if(self.__online_discount_percentage==-1):\r\n                price_per_item=-1\r\n            else:\r\n                discount = (self.__online_discount_percentage/100)*initial_price_per_item\r\n                price_per_item=initial_price_per_item-discount\r\n        return price_per_item\r\n        pass #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def check_item_availability(self):\r\n        ns=super().item_name_list\r\n        no=self.get_order().get_item_name()\r\n        qs = super().item_quantity_list\r\n        qo=self.get_order().get_quantity_required()\r\n        for i in range(0,len(ns)):\r\n            if(ns[i]==no):\r\n                if(qs[i]>=qo):\r\n                    qs[i]=qs[i]-qo\r\n        \r\n        return qo               \r\n\r\n         #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def ship_order(self):\r\n        quantity = self.check_item_availability()\r\n        price_per_item = self.find_price_per_item(self.__order.get_item_name())\r\n        if(quantity==-1 or price_per_item==-1):\r\n            order_price = -1\r\n            self.__order.set_tracking_id(\"NA\")\r\n        else:\r\n            self.__order.set_order_price(quantity*price_per_item)\r\n            self.__order.generate_tracking_id()\r\n         #Remove pass and write your code here\r\n\r\nclass Order():\r\n    __counter=1000\r\n    def __init__(self,item_name,quantity_required,payment_mode):\r\n        self.__tracking_id=None\r\n        self.__item_name=item_name\r\n        self.__quantity_required=quantity_required\r\n        self.__payment_mode=payment_mode\r\n        self.__order_price=None\r\n\r\n    def get_tracking_id(self):\r\n        return self.__tracking_id\r\n\r\n    def set_tracking_id(self,tracking_id):\r\n        self.__tracking_id = tracking_id\r\n\r\n    def get_item_name(self):\r\n        return self.__item_name\r\n\r\n    def get_quantity_required(self):\r\n        return self.__quantity_required\r\n\r\n    def get_payment_mode(self):\r\n        return self.__payment_mode\r\n\r\n    def get_order_price(self):\r\n        return self.__order_price\r\n\r\n    def set_order_price(self,order_price):\r\n        self.__order_price=order_price\r\n\r\n    #To trainee\r\n    def generate_tracking_id(self):\r\n        self.__tracking_id=\"TR\"+str(Order.__counter)\r\n        Order.__counter+=1\r\n     #Remove pass and write your code here\r\n\r\n#You may modify the below code for testing\r\norder_obj=Order('Bouquet',20,'Prepaid')\r\nonline_mart_object=OnlineMart(order_obj)\r\nonline_mart_object.ship_order()\r\nprint('Tracking ID :',online_mart_object.get_order().get_tracking_id())\r\nprint('Order Price :',online_mart_object.get_order().get_order_price())\r\n","asgnmtId":"203","SolutionFileName":"mock.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-24 19:26:52,852 INFO  Successfully processed and prepared the input for the verify service
2019-03-24 19:26:52,852 INFO  Successfully set the request parameters for VerifySolution
2019-03-24 19:26:52,852 INFO  Invoking the service to verify the user solution
2019-03-24 19:26:52,853 INFO  Time before invoking service:Sun Mar 24 19:26:52 IST 2019
2019-03-24 19:26:52,853 INFO  Initialising service address for VerifySolution
2019-03-24 19:26:52,854 INFO  Time before invoking service In SUPER:Sun Mar 24 19:26:52 IST 2019
2019-03-24 19:26:53,922 INFO  Time after invoking service In SUPER:Sun Mar 24 19:26:53 IST 2019
2019-03-24 19:26:53,922 INFO  Service responded successfully with required details
2019-03-24 19:26:53,922 INFO  Time after invoking service:Sun Mar 24 19:26:53 IST 2019
2019-03-24 19:26:53,922 INFO  User solution successfully verified
2019-03-24 19:26:53,923 INFO  Processing the response from verify service
2019-03-24 19:26:53,923 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-24 19:27:52,236 INFO  Setting request parameters for VerifySolution
2019-03-24 19:27:52,236 INFO  Initiating to process and prepare Input for the verify service
2019-03-24 19:27:52,236 INFO  Starting to parse the user solution
2019-03-24 19:27:52,236 INFO  Displaying user solution
2019-03-24 19:27:52,259 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-203\r\n'''\r\nCreated on Mar 24, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Mart:\r\n    item_name_list=[\"Chocolate\",\"Perfume\",\"Bouquet\",\"Apparel\"]\r\n    item_price_list=[200,400,150,300]\r\n    item_quantity_list=[10,20,30,40]\r\n\r\n    def find_price_per_item(self,item_name):\r\n        if item_name in Mart.item_name_list:\r\n            index = Mart.item_name_list.index(item_name)\r\n            return Mart.item_price_list[index]\r\n        return -1\r\n\r\n\r\n\r\nclass OnlineMart(Mart):\r\n    def __init__(self,order):\r\n        self.__online_discount_percentage=None\r\n        self.__order=order\r\n\r\n    def identify_online_discount(self):\r\n        if self.__order.get_payment_mode()=='Prepaid':\r\n            self.__online_discount_percentage=5\r\n        elif self.__order.get_payment_mode()=='COD':\r\n            self.__online_discount_percentage=2\r\n        else:\r\n            self.__online_discount_percentage=-1\r\n\r\n    def get_order(self):\r\n        return self.__order\r\n\r\n    #To trainee\r\n    def find_price_per_item(self,item_name):\r\n        initial_price_per_item=super().find_price_per_item(item_name)\r\n        if(initial_price_per_item==-1):\r\n            price_per_item=-1\r\n        else:\r\n            self.identify_online_discount()\r\n            if(self.__online_discount_percentage==-1):\r\n                price_per_item=-1\r\n            else:\r\n                discount = (self.__online_discount_percentage/100)*initial_price_per_item\r\n                price_per_item=initial_price_per_item-discount\r\n        return price_per_item\r\n        pass #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def check_item_availability(self):\r\n        ns=super().item_name_list\r\n        no=self.get_order().get_item_name()\r\n        qs = super().item_quantity_list\r\n        qo=self.get_order().get_quantity_required()\r\n        for i in range(0,len(ns)):\r\n            if(ns[i]==no):\r\n                if(qs[i]>=qo):\r\n                    qs[i]=qs[i]-qo\r\n        \r\n        return qo               \r\n\r\n         #Remove pass and write your code here\r\n\r\n    #To trainee\r\n    def ship_order(self):\r\n        quantity = self.check_item_availability()\r\n        price_per_item = self.find_price_per_item(self.__order.get_item_name())\r\n        if(quantity==-1 or price_per_item==-1):\r\n            order_price = -1\r\n            self.__order.set_tracking_id(\"NA\")\r\n        else:\r\n            self.__order.set_order_price(quantity*price_per_item)\r\n            self.__order.generate_tracking_id()\r\n         #Remove pass and write your code here\r\n\r\nclass Order():\r\n    __counter=1000\r\n    def __init__(self,item_name,quantity_required,payment_mode):\r\n        self.__tracking_id=None\r\n        self.__item_name=item_name\r\n        self.__quantity_required=quantity_required\r\n        self.__payment_mode=payment_mode\r\n        self.__order_price=None\r\n\r\n    def get_tracking_id(self):\r\n        return self.__tracking_id\r\n\r\n    def set_tracking_id(self,tracking_id):\r\n        self.__tracking_id = tracking_id\r\n\r\n    def get_item_name(self):\r\n        return self.__item_name\r\n\r\n    def get_quantity_required(self):\r\n        return self.__quantity_required\r\n\r\n    def get_payment_mode(self):\r\n        return self.__payment_mode\r\n\r\n    def get_order_price(self):\r\n        return self.__order_price\r\n\r\n    def set_order_price(self,order_price):\r\n        self.__order_price=order_price\r\n\r\n    #To trainee\r\n    def generate_tracking_id(self):\r\n        self.__tracking_id=\"TR\"+str(Order.__counter)\r\n        Order.__counter+=1\r\n     #Remove pass and write your code here\r\n\r\n#You may modify the below code for testing\r\norder_obj=Order('Bouquet',20,'Prepaid')\r\nonline_mart_object=OnlineMart(order_obj)\r\nonline_mart_object.ship_order()\r\nprint('Tracking ID :',online_mart_object.get_order().get_tracking_id())\r\nprint('Order Price :',online_mart_object.get_order().get_order_price())\r\n","asgnmtId":"203","SolutionFileName":"mock.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-24 19:27:52,259 INFO  Successfully processed and prepared the input for the verify service
2019-03-24 19:27:52,259 INFO  Successfully set the request parameters for VerifySolution
2019-03-24 19:27:52,259 INFO  Invoking the service to verify the user solution
2019-03-24 19:27:52,260 INFO  Time before invoking service:Sun Mar 24 19:27:52 IST 2019
2019-03-24 19:27:52,260 INFO  Initialising service address for VerifySolution
2019-03-24 19:27:52,260 INFO  Time before invoking service In SUPER:Sun Mar 24 19:27:52 IST 2019
2019-03-24 19:27:53,404 INFO  Time after invoking service In SUPER:Sun Mar 24 19:27:53 IST 2019
2019-03-24 19:27:53,404 INFO  Service responded successfully with required details
2019-03-24 19:27:53,404 INFO  Time after invoking service:Sun Mar 24 19:27:53 IST 2019
2019-03-24 19:27:53,404 INFO  User solution successfully verified
2019-03-24 19:27:53,405 INFO  Processing the response from verify service
2019-03-24 19:27:53,405 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
