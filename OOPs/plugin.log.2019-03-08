2019-03-08 09:08:47,666 INFO  Loading Baseframework Plugin
2019-03-08 09:08:47,671 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-08 09:08:47,672 INFO  Loading the Menu - HandsOn
2019-03-08 09:08:47,675 INFO  Successfully loaded the Menu - HandsOn
2019-03-08 12:34:13,503 INFO  Loading Programming Assignment Plugin
2019-03-08 12:34:14,083 INFO  Setting request parameters for VerifySolution
2019-03-08 12:34:14,083 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:34:14,089 INFO  Starting to parse the user solution
2019-03-08 12:34:14,090 INFO  Displaying user solution
2019-03-08 12:34:14,236 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:34:14,240 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:34:14,240 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:34:14,240 INFO  Invoking the service to verify the user solution
2019-03-08 12:34:14,241 INFO  Time before invoking service:Fri Mar 08 12:34:14 IST 2019
2019-03-08 12:34:14,242 INFO  Initialising service address for VerifySolution
2019-03-08 12:34:14,243 INFO  Time before invoking service In SUPER:Fri Mar 08 12:34:14 IST 2019
2019-03-08 12:34:15,355 INFO  Time after invoking service In SUPER:Fri Mar 08 12:34:15 IST 2019
2019-03-08 12:34:15,355 INFO  Service responded successfully with required details
2019-03-08 12:34:15,355 INFO  Time after invoking service:Fri Mar 08 12:34:15 IST 2019
2019-03-08 12:34:15,355 INFO  User solution successfully verified
2019-03-08 12:34:15,356 INFO  Processing the response from verify service
2019-03-08 12:34:15,359 INFO  Starting to parse JSON response
2019-03-08 12:34:15,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:34:15,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:34:15,367 INFO  Successfully parsed JSON response
2019-03-08 12:34:15,367 INFO  In the process of generating verify response in HTML
2019-03-08 12:34:15,739 INFO  Successfully generated verify response in HTML
2019-03-08 12:34:15,740 INFO  Successfully processed the response from service
2019-03-08 12:34:32,561 INFO  Setting request parameters for VerifySolution
2019-03-08 12:34:32,561 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:34:32,561 INFO  Starting to parse the user solution
2019-03-08 12:34:32,562 INFO  Displaying user solution
2019-03-08 12:34:32,598 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:34:32,599 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:34:32,599 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:34:32,599 INFO  Invoking the service to verify the user solution
2019-03-08 12:34:32,600 INFO  Time before invoking service:Fri Mar 08 12:34:32 IST 2019
2019-03-08 12:34:32,600 INFO  Initialising service address for VerifySolution
2019-03-08 12:34:32,601 INFO  Time before invoking service In SUPER:Fri Mar 08 12:34:32 IST 2019
2019-03-08 12:34:33,389 INFO  Time after invoking service In SUPER:Fri Mar 08 12:34:33 IST 2019
2019-03-08 12:34:33,390 INFO  Service responded successfully with required details
2019-03-08 12:34:33,390 INFO  Time after invoking service:Fri Mar 08 12:34:33 IST 2019
2019-03-08 12:34:33,390 INFO  User solution successfully verified
2019-03-08 12:34:33,391 INFO  Processing the response from verify service
2019-03-08 12:34:33,393 INFO  Starting to parse JSON response
2019-03-08 12:34:33,394 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:34:33,394 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:34:33,395 INFO  Successfully parsed JSON response
2019-03-08 12:34:33,395 INFO  In the process of generating verify response in HTML
2019-03-08 12:34:33,475 INFO  Successfully generated verify response in HTML
2019-03-08 12:34:33,476 INFO  Successfully processed the response from service
2019-03-08 12:35:27,698 INFO  Setting request parameters for VerifySolution
2019-03-08 12:35:27,698 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:35:27,698 INFO  Starting to parse the user solution
2019-03-08 12:35:27,699 INFO  Displaying user solution
2019-03-08 12:35:27,731 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:35:27,732 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:35:27,732 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:35:27,732 INFO  Invoking the service to verify the user solution
2019-03-08 12:35:27,733 INFO  Time before invoking service:Fri Mar 08 12:35:27 IST 2019
2019-03-08 12:35:27,733 INFO  Initialising service address for VerifySolution
2019-03-08 12:35:27,733 INFO  Time before invoking service In SUPER:Fri Mar 08 12:35:27 IST 2019
2019-03-08 12:35:28,617 INFO  Time after invoking service In SUPER:Fri Mar 08 12:35:28 IST 2019
2019-03-08 12:35:28,617 INFO  Service responded successfully with required details
2019-03-08 12:35:28,618 INFO  Time after invoking service:Fri Mar 08 12:35:28 IST 2019
2019-03-08 12:35:28,618 INFO  User solution successfully verified
2019-03-08 12:35:28,618 INFO  Processing the response from verify service
2019-03-08 12:35:28,619 INFO  Starting to parse JSON response
2019-03-08 12:35:28,621 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:35:28,621 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:35:28,621 INFO  Successfully parsed JSON response
2019-03-08 12:35:28,622 INFO  In the process of generating verify response in HTML
2019-03-08 12:35:28,697 INFO  Successfully generated verify response in HTML
2019-03-08 12:35:28,697 INFO  Successfully processed the response from service
2019-03-08 12:36:05,093 INFO  Setting request parameters for VerifySolution
2019-03-08 12:36:05,093 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:36:05,093 INFO  Starting to parse the user solution
2019-03-08 12:36:05,094 INFO  Displaying user solution
2019-03-08 12:36:05,125 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:36:05,126 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:36:05,126 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:36:05,126 INFO  Invoking the service to verify the user solution
2019-03-08 12:36:05,127 INFO  Time before invoking service:Fri Mar 08 12:36:05 IST 2019
2019-03-08 12:36:05,127 INFO  Initialising service address for VerifySolution
2019-03-08 12:36:05,127 INFO  Time before invoking service In SUPER:Fri Mar 08 12:36:05 IST 2019
2019-03-08 12:36:06,029 INFO  Time after invoking service In SUPER:Fri Mar 08 12:36:06 IST 2019
2019-03-08 12:36:06,030 INFO  Service responded successfully with required details
2019-03-08 12:36:06,030 INFO  Time after invoking service:Fri Mar 08 12:36:06 IST 2019
2019-03-08 12:36:06,030 INFO  User solution successfully verified
2019-03-08 12:36:06,030 INFO  Processing the response from verify service
2019-03-08 12:36:06,032 INFO  Starting to parse JSON response
2019-03-08 12:36:06,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:36:06,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:36:06,034 INFO  Successfully parsed JSON response
2019-03-08 12:36:06,034 INFO  In the process of generating verify response in HTML
2019-03-08 12:36:06,110 INFO  Successfully generated verify response in HTML
2019-03-08 12:36:06,110 INFO  Successfully processed the response from service
2019-03-08 12:36:55,186 INFO  Setting request parameters for VerifySolution
2019-03-08 12:36:55,187 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:36:55,187 INFO  Starting to parse the user solution
2019-03-08 12:36:55,187 INFO  Displaying user solution
2019-03-08 12:36:55,223 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().def__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:36:55,224 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:36:55,224 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:36:55,224 INFO  Invoking the service to verify the user solution
2019-03-08 12:36:55,224 INFO  Time before invoking service:Fri Mar 08 12:36:55 IST 2019
2019-03-08 12:36:55,224 INFO  Initialising service address for VerifySolution
2019-03-08 12:36:55,225 INFO  Time before invoking service In SUPER:Fri Mar 08 12:36:55 IST 2019
2019-03-08 12:36:56,140 INFO  Time after invoking service In SUPER:Fri Mar 08 12:36:56 IST 2019
2019-03-08 12:36:56,140 INFO  Service responded successfully with required details
2019-03-08 12:36:56,140 INFO  Time after invoking service:Fri Mar 08 12:36:56 IST 2019
2019-03-08 12:36:56,140 INFO  User solution successfully verified
2019-03-08 12:36:56,140 INFO  Processing the response from verify service
2019-03-08 12:36:56,142 INFO  Starting to parse JSON response
2019-03-08 12:36:56,143 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:36:56,143 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:36:56,145 INFO  Successfully parsed JSON response
2019-03-08 12:36:56,145 INFO  In the process of generating verify response in HTML
2019-03-08 12:36:56,218 INFO  Successfully generated verify response in HTML
2019-03-08 12:36:56,218 INFO  Successfully processed the response from service
2019-03-08 12:37:45,502 INFO  Setting request parameters for VerifySolution
2019-03-08 12:37:45,503 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:37:45,503 INFO  Starting to parse the user solution
2019-03-08 12:37:45,503 INFO  Displaying user solution
2019-03-08 12:37:45,538 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:37:45,539 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:37:45,539 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:37:45,539 INFO  Invoking the service to verify the user solution
2019-03-08 12:37:45,539 INFO  Time before invoking service:Fri Mar 08 12:37:45 IST 2019
2019-03-08 12:37:45,539 INFO  Initialising service address for VerifySolution
2019-03-08 12:37:45,540 INFO  Time before invoking service In SUPER:Fri Mar 08 12:37:45 IST 2019
2019-03-08 12:37:46,311 INFO  Time after invoking service In SUPER:Fri Mar 08 12:37:46 IST 2019
2019-03-08 12:37:46,312 INFO  Service responded successfully with required details
2019-03-08 12:37:46,312 INFO  Time after invoking service:Fri Mar 08 12:37:46 IST 2019
2019-03-08 12:37:46,312 INFO  User solution successfully verified
2019-03-08 12:37:46,312 INFO  Processing the response from verify service
2019-03-08 12:37:46,314 INFO  Starting to parse JSON response
2019-03-08 12:37:46,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:37:46,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:37:46,316 INFO  Successfully parsed JSON response
2019-03-08 12:37:46,316 INFO  In the process of generating verify response in HTML
2019-03-08 12:37:46,384 INFO  Successfully generated verify response in HTML
2019-03-08 12:37:46,384 INFO  Successfully processed the response from service
2019-03-08 12:38:20,461 INFO  Setting request parameters for VerifySolution
2019-03-08 12:38:20,461 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:38:20,461 INFO  Starting to parse the user solution
2019-03-08 12:38:20,461 INFO  Displaying user solution
2019-03-08 12:38:20,490 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init_(self,trained_status,experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:38:20,490 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:38:20,490 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:38:20,490 INFO  Invoking the service to verify the user solution
2019-03-08 12:38:20,493 INFO  Time before invoking service:Fri Mar 08 12:38:20 IST 2019
2019-03-08 12:38:20,493 INFO  Initialising service address for VerifySolution
2019-03-08 12:38:20,494 INFO  Time before invoking service In SUPER:Fri Mar 08 12:38:20 IST 2019
2019-03-08 12:38:21,388 INFO  Time after invoking service In SUPER:Fri Mar 08 12:38:21 IST 2019
2019-03-08 12:38:21,389 INFO  Service responded successfully with required details
2019-03-08 12:38:21,389 INFO  Time after invoking service:Fri Mar 08 12:38:21 IST 2019
2019-03-08 12:38:21,390 INFO  User solution successfully verified
2019-03-08 12:38:21,390 INFO  Processing the response from verify service
2019-03-08 12:38:21,392 INFO  Starting to parse JSON response
2019-03-08 12:38:21,394 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:38:21,394 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:38:21,396 INFO  Successfully parsed JSON response
2019-03-08 12:38:21,396 INFO  In the process of generating verify response in HTML
2019-03-08 12:38:21,467 INFO  Successfully generated verify response in HTML
2019-03-08 12:38:21,467 INFO  Successfully processed the response from service
2019-03-08 12:40:22,136 INFO  Setting request parameters for VerifySolution
2019-03-08 12:40:22,136 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:40:22,136 INFO  Starting to parse the user solution
2019-03-08 12:40:22,136 INFO  Displaying user solution
2019-03-08 12:40:22,170 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:40:22,171 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:40:22,171 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:40:22,171 INFO  Invoking the service to verify the user solution
2019-03-08 12:40:22,172 INFO  Time before invoking service:Fri Mar 08 12:40:22 IST 2019
2019-03-08 12:40:22,172 INFO  Initialising service address for VerifySolution
2019-03-08 12:40:22,172 INFO  Time before invoking service In SUPER:Fri Mar 08 12:40:22 IST 2019
2019-03-08 12:40:23,072 INFO  Time after invoking service In SUPER:Fri Mar 08 12:40:23 IST 2019
2019-03-08 12:40:23,073 INFO  Service responded successfully with required details
2019-03-08 12:40:23,073 INFO  Time after invoking service:Fri Mar 08 12:40:23 IST 2019
2019-03-08 12:40:23,073 INFO  User solution successfully verified
2019-03-08 12:40:23,073 INFO  Processing the response from verify service
2019-03-08 12:40:23,078 INFO  Starting to parse JSON response
2019-03-08 12:40:23,079 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:23,079 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:23,080 INFO  Successfully parsed JSON response
2019-03-08 12:40:23,080 INFO  In the process of generating verify response in HTML
2019-03-08 12:40:23,144 INFO  Successfully generated verify response in HTML
2019-03-08 12:40:23,144 INFO  Successfully processed the response from service
2019-03-08 12:40:32,937 INFO  Setting request parameters for VerifySolution
2019-03-08 12:40:32,937 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:40:32,937 INFO  Starting to parse the user solution
2019-03-08 12:40:32,940 INFO  Displaying user solution
2019-03-08 12:40:32,968 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:40:32,968 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:40:32,968 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:40:32,968 INFO  Invoking the service to verify the user solution
2019-03-08 12:40:32,969 INFO  Time before invoking service:Fri Mar 08 12:40:32 IST 2019
2019-03-08 12:40:32,969 INFO  Initialising service address for VerifySolution
2019-03-08 12:40:32,969 INFO  Time before invoking service In SUPER:Fri Mar 08 12:40:32 IST 2019
2019-03-08 12:40:36,765 INFO  Time after invoking service In SUPER:Fri Mar 08 12:40:36 IST 2019
2019-03-08 12:40:36,765 INFO  Service responded successfully with required details
2019-03-08 12:40:36,765 INFO  Time after invoking service:Fri Mar 08 12:40:36 IST 2019
2019-03-08 12:40:36,765 INFO  User solution successfully verified
2019-03-08 12:40:36,765 INFO  Processing the response from verify service
2019-03-08 12:40:36,767 INFO  Starting to parse JSON response
2019-03-08 12:40:36,768 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:36,768 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:36,769 INFO  Successfully parsed JSON response
2019-03-08 12:40:36,770 INFO  In the process of generating verify response in HTML
2019-03-08 12:40:36,830 INFO  Successfully generated verify response in HTML
2019-03-08 12:40:36,830 INFO  Successfully processed the response from service
2019-03-08 12:40:58,367 INFO  Setting request parameters for VerifySolution
2019-03-08 12:40:58,367 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:40:58,367 INFO  Starting to parse the user solution
2019-03-08 12:40:58,367 INFO  Displaying user solution
2019-03-08 12:40:58,394 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and \r\n           self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:40:58,395 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:40:58,395 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:40:58,395 INFO  Invoking the service to verify the user solution
2019-03-08 12:40:58,395 INFO  Time before invoking service:Fri Mar 08 12:40:58 IST 2019
2019-03-08 12:40:58,395 INFO  Initialising service address for VerifySolution
2019-03-08 12:40:58,397 INFO  Time before invoking service In SUPER:Fri Mar 08 12:40:58 IST 2019
2019-03-08 12:40:59,254 INFO  Time after invoking service In SUPER:Fri Mar 08 12:40:59 IST 2019
2019-03-08 12:40:59,254 INFO  Service responded successfully with required details
2019-03-08 12:40:59,255 INFO  Time after invoking service:Fri Mar 08 12:40:59 IST 2019
2019-03-08 12:40:59,255 INFO  User solution successfully verified
2019-03-08 12:40:59,255 INFO  Processing the response from verify service
2019-03-08 12:40:59,259 INFO  Starting to parse JSON response
2019-03-08 12:40:59,260 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:59,260 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:40:59,262 INFO  Successfully parsed JSON response
2019-03-08 12:40:59,263 INFO  In the process of generating verify response in HTML
2019-03-08 12:40:59,320 INFO  Successfully generated verify response in HTML
2019-03-08 12:40:59,320 INFO  Successfully processed the response from service
2019-03-08 12:41:48,425 INFO  Setting request parameters for VerifySolution
2019-03-08 12:41:48,425 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:41:48,425 INFO  Starting to parse the user solution
2019-03-08 12:41:48,425 INFO  Displaying user solution
2019-03-08 12:41:48,453 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        \r\n            return True\r\n        \r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and \r\n           self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:41:48,453 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:41:48,453 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:41:48,453 INFO  Invoking the service to verify the user solution
2019-03-08 12:41:48,454 INFO  Time before invoking service:Fri Mar 08 12:41:48 IST 2019
2019-03-08 12:41:48,454 INFO  Initialising service address for VerifySolution
2019-03-08 12:41:48,454 INFO  Time before invoking service In SUPER:Fri Mar 08 12:41:48 IST 2019
2019-03-08 12:41:49,283 INFO  Time after invoking service In SUPER:Fri Mar 08 12:41:49 IST 2019
2019-03-08 12:41:49,283 INFO  Service responded successfully with required details
2019-03-08 12:41:49,283 INFO  Time after invoking service:Fri Mar 08 12:41:49 IST 2019
2019-03-08 12:41:49,284 INFO  User solution successfully verified
2019-03-08 12:41:49,284 INFO  Processing the response from verify service
2019-03-08 12:41:49,286 INFO  Starting to parse JSON response
2019-03-08 12:41:49,287 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:41:49,287 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:41:49,287 INFO  Successfully parsed JSON response
2019-03-08 12:41:49,287 INFO  In the process of generating verify response in HTML
2019-03-08 12:41:49,347 INFO  Successfully generated verify response in HTML
2019-03-08 12:41:49,348 INFO  Successfully processed the response from service
2019-03-08 12:43:36,481 INFO  Setting request parameters for VerifySolution
2019-03-08 12:43:36,481 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:43:36,481 INFO  Starting to parse the user solution
2019-03-08 12:43:36,481 INFO  Displaying user solution
2019-03-08 12:43:36,506 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and \r\n           self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:43:36,506 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:43:36,507 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:43:36,507 INFO  Invoking the service to verify the user solution
2019-03-08 12:43:36,507 INFO  Time before invoking service:Fri Mar 08 12:43:36 IST 2019
2019-03-08 12:43:36,507 INFO  Initialising service address for VerifySolution
2019-03-08 12:43:36,508 INFO  Time before invoking service In SUPER:Fri Mar 08 12:43:36 IST 2019
2019-03-08 12:43:37,328 INFO  Time after invoking service In SUPER:Fri Mar 08 12:43:37 IST 2019
2019-03-08 12:43:37,329 INFO  Service responded successfully with required details
2019-03-08 12:43:37,329 INFO  Time after invoking service:Fri Mar 08 12:43:37 IST 2019
2019-03-08 12:43:37,329 INFO  User solution successfully verified
2019-03-08 12:43:37,329 INFO  Processing the response from verify service
2019-03-08 12:43:37,331 INFO  Starting to parse JSON response
2019-03-08 12:43:37,332 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:43:37,332 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:43:37,333 INFO  Successfully parsed JSON response
2019-03-08 12:43:37,333 INFO  In the process of generating verify response in HTML
2019-03-08 12:43:37,405 INFO  Successfully generated verify response in HTML
2019-03-08 12:43:37,405 INFO  Successfully processed the response from service
2019-03-08 12:44:29,817 INFO  Setting request parameters for VerifySolution
2019-03-08 12:44:29,817 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:44:29,817 INFO  Starting to parse the user solution
2019-03-08 12:44:29,817 INFO  Displaying user solution
2019-03-08 12:44:29,848 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicles(self):\r\n        if(self.__trained_status and self.__experience):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and \r\n           self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:44:29,848 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:44:29,848 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:44:29,848 INFO  Invoking the service to verify the user solution
2019-03-08 12:44:29,848 INFO  Time before invoking service:Fri Mar 08 12:44:29 IST 2019
2019-03-08 12:44:29,848 INFO  Initialising service address for VerifySolution
2019-03-08 12:44:29,849 INFO  Time before invoking service In SUPER:Fri Mar 08 12:44:29 IST 2019
2019-03-08 12:44:30,717 INFO  Time after invoking service In SUPER:Fri Mar 08 12:44:30 IST 2019
2019-03-08 12:44:30,717 INFO  Service responded successfully with required details
2019-03-08 12:44:30,717 INFO  Time after invoking service:Fri Mar 08 12:44:30 IST 2019
2019-03-08 12:44:30,717 INFO  User solution successfully verified
2019-03-08 12:44:30,718 INFO  Processing the response from verify service
2019-03-08 12:44:30,718 INFO  Starting to parse JSON response
2019-03-08 12:44:30,718 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:44:30,719 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:44:30,720 INFO  Successfully parsed JSON response
2019-03-08 12:44:30,720 INFO  In the process of generating verify response in HTML
2019-03-08 12:44:30,791 INFO  Successfully generated verify response in HTML
2019-03-08 12:44:30,791 INFO  Successfully processed the response from service
2019-03-08 12:44:56,487 INFO  Setting request parameters for VerifySolution
2019-03-08 12:44:56,487 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 12:44:56,487 INFO  Starting to parse the user solution
2019-03-08 12:44:56,488 INFO  Displaying user solution
2019-03-08 12:44:56,525 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-12\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Rider:\r\n    def __init__(self,trained_status,experience):\r\n        self.__trained_status = trained_status\r\n        self.__experience = experience\r\n    def rides_vehicle(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\nclass CycleRider(Rider):\r\n    def rides_blindfolded(self):\r\n        if(self.__trained_status==True and self.__experience>0):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nclass BikeRider(Rider):\r\n    def __init__(self,trained_status,experience,race_license):\r\n        super().__init__(trained_status, experience)\r\n        self.__race_license = race_license\r\n    \r\n    def rides_in_dome(self):\r\n        if(self.__trained_status==True and self.__experience>0 and \r\n           self.__race_license==True):\r\n            return True\r\n        else:\r\n            return False\r\n\r\n        \r\n","asgnmtId":"12","SolutionFileName":"Excer12.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-08 12:44:56,526 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 12:44:56,526 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 12:44:56,526 INFO  Invoking the service to verify the user solution
2019-03-08 12:44:56,527 INFO  Time before invoking service:Fri Mar 08 12:44:56 IST 2019
2019-03-08 12:44:56,527 INFO  Initialising service address for VerifySolution
2019-03-08 12:44:56,527 INFO  Time before invoking service In SUPER:Fri Mar 08 12:44:56 IST 2019
2019-03-08 12:44:57,448 INFO  Time after invoking service In SUPER:Fri Mar 08 12:44:57 IST 2019
2019-03-08 12:44:57,449 INFO  Service responded successfully with required details
2019-03-08 12:44:57,449 INFO  Time after invoking service:Fri Mar 08 12:44:57 IST 2019
2019-03-08 12:44:57,449 INFO  User solution successfully verified
2019-03-08 12:44:57,450 INFO  Processing the response from verify service
2019-03-08 12:44:57,453 INFO  Starting to parse JSON response
2019-03-08 12:44:57,455 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:44:57,455 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 12:44:57,456 INFO  Successfully parsed JSON response
2019-03-08 12:44:57,456 INFO  In the process of generating verify response in HTML
2019-03-08 12:44:57,532 INFO  Successfully generated verify response in HTML
2019-03-08 12:44:57,532 INFO  Successfully processed the response from service
2019-03-08 12:45:02,464 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 12:45:02,469 INFO  Displaying user solution
2019-03-08 12:45:02,478 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 12:45:02,478 INFO  Invoking the service to submit the user solution
2019-03-08 12:45:02,478 INFO  Initialising service address for Submit
2019-03-08 12:45:02,478 INFO  Time before invoking service In SUPER:Fri Mar 08 12:45:02 IST 2019
2019-03-08 12:45:02,737 INFO  Time after invoking service In SUPER:Fri Mar 08 12:45:02 IST 2019
2019-03-08 12:45:02,737 INFO  Service responded successfully with required details
2019-03-08 12:45:02,737 INFO  User solution successfully submitted
2019-03-08 12:45:02,738 INFO  Displaying submission status
2019-03-08 12:45:02,739 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 12:45:05,016 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 12:45:05,017 INFO  Displaying user solution
2019-03-08 12:45:05,027 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 12:45:05,028 INFO  Invoking the service to submit the user solution
2019-03-08 12:45:05,028 INFO  Initialising service address for Submit
2019-03-08 12:45:05,028 INFO  Time before invoking service In SUPER:Fri Mar 08 12:45:05 IST 2019
2019-03-08 12:45:05,103 INFO  Time after invoking service In SUPER:Fri Mar 08 12:45:05 IST 2019
2019-03-08 12:45:05,103 INFO  Service responded successfully with required details
2019-03-08 12:45:05,103 INFO  User solution successfully submitted
2019-03-08 12:45:05,104 INFO  Displaying submission status
2019-03-08 12:45:05,104 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 16:20:48,383 INFO  Setting request parameters for VerifySolution
2019-03-08 16:20:48,383 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:20:48,383 INFO  Starting to parse the user solution
2019-03-08 16:20:48,385 INFO  Displaying user solution
2019-03-08 16:20:48,525 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        \r\n        \r\n    def set_price(self,price):\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price)\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price()\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price)\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:20:48,526 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:20:48,526 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:20:48,526 INFO  Invoking the service to verify the user solution
2019-03-08 16:20:48,529 INFO  Time before invoking service:Fri Mar 08 16:20:48 IST 2019
2019-03-08 16:20:48,529 INFO  Initialising service address for VerifySolution
2019-03-08 16:20:48,529 INFO  Time before invoking service In SUPER:Fri Mar 08 16:20:48 IST 2019
2019-03-08 16:20:49,520 INFO  Time after invoking service In SUPER:Fri Mar 08 16:20:49 IST 2019
2019-03-08 16:20:49,520 INFO  Service responded successfully with required details
2019-03-08 16:20:49,521 INFO  Time after invoking service:Fri Mar 08 16:20:49 IST 2019
2019-03-08 16:20:49,521 INFO  User solution successfully verified
2019-03-08 16:20:49,521 INFO  Processing the response from verify service
2019-03-08 16:20:49,527 INFO  Starting to parse JSON response
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:20:49,530 INFO  Successfully parsed JSON response
2019-03-08 16:20:49,531 INFO  In the process of generating verify response in HTML
2019-03-08 16:20:49,616 INFO  Successfully generated verify response in HTML
2019-03-08 16:20:49,616 INFO  Successfully processed the response from service
2019-03-08 16:42:25,402 INFO  Setting request parameters for VerifySolution
2019-03-08 16:42:25,403 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:42:25,403 INFO  Starting to parse the user solution
2019-03-08 16:42:25,403 INFO  Displaying user solution
2019-03-08 16:42:25,492 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price,\"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self\r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:42:25,493 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:42:25,494 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:42:25,494 INFO  Invoking the service to verify the user solution
2019-03-08 16:42:25,494 INFO  Time before invoking service:Fri Mar 08 16:42:25 IST 2019
2019-03-08 16:42:25,494 INFO  Initialising service address for VerifySolution
2019-03-08 16:42:25,495 INFO  Time before invoking service In SUPER:Fri Mar 08 16:42:25 IST 2019
2019-03-08 16:42:26,476 INFO  Time after invoking service In SUPER:Fri Mar 08 16:42:26 IST 2019
2019-03-08 16:42:26,477 INFO  Service responded successfully with required details
2019-03-08 16:42:26,477 INFO  Time after invoking service:Fri Mar 08 16:42:26 IST 2019
2019-03-08 16:42:26,477 INFO  User solution successfully verified
2019-03-08 16:42:26,478 INFO  Processing the response from verify service
2019-03-08 16:42:26,484 INFO  Starting to parse JSON response
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,488 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:42:26,489 INFO  Successfully parsed JSON response
2019-03-08 16:42:26,489 INFO  In the process of generating verify response in HTML
2019-03-08 16:42:26,607 INFO  Successfully generated verify response in HTML
2019-03-08 16:42:26,607 INFO  Successfully processed the response from service
2019-03-08 16:46:57,498 INFO  Setting request parameters for VerifySolution
2019-03-08 16:46:57,498 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:46:57,498 INFO  Starting to parse the user solution
2019-03-08 16:46:57,499 INFO  Displaying user solution
2019-03-08 16:46:57,565 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price,\"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        self.__price = 1.1*self.get_price()\r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:46:57,566 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:46:57,566 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:46:57,566 INFO  Invoking the service to verify the user solution
2019-03-08 16:46:57,567 INFO  Time before invoking service:Fri Mar 08 16:46:57 IST 2019
2019-03-08 16:46:57,567 INFO  Initialising service address for VerifySolution
2019-03-08 16:46:57,568 INFO  Time before invoking service In SUPER:Fri Mar 08 16:46:57 IST 2019
2019-03-08 16:46:58,598 INFO  Time after invoking service In SUPER:Fri Mar 08 16:46:58 IST 2019
2019-03-08 16:46:58,598 INFO  Service responded successfully with required details
2019-03-08 16:46:58,599 INFO  Time after invoking service:Fri Mar 08 16:46:58 IST 2019
2019-03-08 16:46:58,599 INFO  User solution successfully verified
2019-03-08 16:46:58,599 INFO  Processing the response from verify service
2019-03-08 16:46:58,606 INFO  Starting to parse JSON response
2019-03-08 16:46:58,609 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,609 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,610 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:46:58,611 INFO  Successfully parsed JSON response
2019-03-08 16:46:58,611 INFO  In the process of generating verify response in HTML
2019-03-08 16:46:58,714 INFO  Successfully generated verify response in HTML
2019-03-08 16:46:58,714 INFO  Successfully processed the response from service
2019-03-08 16:48:43,480 INFO  Setting request parameters for VerifySolution
2019-03-08 16:48:43,481 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:48:43,481 INFO  Starting to parse the user solution
2019-03-08 16:48:43,482 INFO  Displaying user solution
2019-03-08 16:48:43,520 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        self.__price = 1.1*self.get_price()\r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:48:43,520 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:48:43,520 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:48:43,520 INFO  Invoking the service to verify the user solution
2019-03-08 16:48:43,521 INFO  Time before invoking service:Fri Mar 08 16:48:43 IST 2019
2019-03-08 16:48:43,521 INFO  Initialising service address for VerifySolution
2019-03-08 16:48:43,521 INFO  Time before invoking service In SUPER:Fri Mar 08 16:48:43 IST 2019
2019-03-08 16:48:44,464 INFO  Time after invoking service In SUPER:Fri Mar 08 16:48:44 IST 2019
2019-03-08 16:48:44,465 INFO  Service responded successfully with required details
2019-03-08 16:48:44,465 INFO  Time after invoking service:Fri Mar 08 16:48:44 IST 2019
2019-03-08 16:48:44,465 INFO  User solution successfully verified
2019-03-08 16:48:44,466 INFO  Processing the response from verify service
2019-03-08 16:48:44,468 INFO  Starting to parse JSON response
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,469 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,470 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,470 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:48:44,471 INFO  Successfully parsed JSON response
2019-03-08 16:48:44,471 INFO  In the process of generating verify response in HTML
2019-03-08 16:48:44,554 INFO  Successfully generated verify response in HTML
2019-03-08 16:48:44,554 INFO  Successfully processed the response from service
2019-03-08 16:52:10,181 INFO  Setting request parameters for VerifySolution
2019-03-08 16:52:10,181 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:52:10,181 INFO  Starting to parse the user solution
2019-03-08 16:52:10,182 INFO  Displaying user solution
2019-03-08 16:52:10,222 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        self.__price = 1.1*self.__price\r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:52:10,223 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:52:10,224 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:52:10,224 INFO  Invoking the service to verify the user solution
2019-03-08 16:52:10,224 INFO  Time before invoking service:Fri Mar 08 16:52:10 IST 2019
2019-03-08 16:52:10,224 INFO  Initialising service address for VerifySolution
2019-03-08 16:52:10,224 INFO  Time before invoking service In SUPER:Fri Mar 08 16:52:10 IST 2019
2019-03-08 16:52:11,258 INFO  Time after invoking service In SUPER:Fri Mar 08 16:52:11 IST 2019
2019-03-08 16:52:11,259 INFO  Service responded successfully with required details
2019-03-08 16:52:11,259 INFO  Time after invoking service:Fri Mar 08 16:52:11 IST 2019
2019-03-08 16:52:11,259 INFO  User solution successfully verified
2019-03-08 16:52:11,259 INFO  Processing the response from verify service
2019-03-08 16:52:11,261 INFO  Starting to parse JSON response
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:11,264 INFO  Successfully parsed JSON response
2019-03-08 16:52:11,265 INFO  In the process of generating verify response in HTML
2019-03-08 16:52:11,345 INFO  Successfully generated verify response in HTML
2019-03-08 16:52:11,345 INFO  Successfully processed the response from service
2019-03-08 16:52:43,620 INFO  Setting request parameters for VerifySolution
2019-03-08 16:52:43,620 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:52:43,620 INFO  Starting to parse the user solution
2019-03-08 16:52:43,621 INFO  Displaying user solution
2019-03-08 16:52:43,658 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*self.__price\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:52:43,658 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:52:43,659 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:52:43,659 INFO  Invoking the service to verify the user solution
2019-03-08 16:52:43,659 INFO  Time before invoking service:Fri Mar 08 16:52:43 IST 2019
2019-03-08 16:52:43,659 INFO  Initialising service address for VerifySolution
2019-03-08 16:52:43,660 INFO  Time before invoking service In SUPER:Fri Mar 08 16:52:43 IST 2019
2019-03-08 16:52:44,599 INFO  Time after invoking service In SUPER:Fri Mar 08 16:52:44 IST 2019
2019-03-08 16:52:44,600 INFO  Service responded successfully with required details
2019-03-08 16:52:44,600 INFO  Time after invoking service:Fri Mar 08 16:52:44 IST 2019
2019-03-08 16:52:44,600 INFO  User solution successfully verified
2019-03-08 16:52:44,600 INFO  Processing the response from verify service
2019-03-08 16:52:44,606 INFO  Starting to parse JSON response
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,608 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:52:44,610 INFO  Successfully parsed JSON response
2019-03-08 16:52:44,610 INFO  In the process of generating verify response in HTML
2019-03-08 16:52:44,681 INFO  Successfully generated verify response in HTML
2019-03-08 16:52:44,681 INFO  Successfully processed the response from service
2019-03-08 16:54:38,855 INFO  Setting request parameters for VerifySolution
2019-03-08 16:54:38,855 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:54:38,855 INFO  Starting to parse the user solution
2019-03-08 16:54:38,855 INFO  Displaying user solution
2019-03-08 16:54:38,891 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:54:38,891 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:54:38,892 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:54:38,892 INFO  Invoking the service to verify the user solution
2019-03-08 16:54:38,892 INFO  Time before invoking service:Fri Mar 08 16:54:38 IST 2019
2019-03-08 16:54:38,892 INFO  Initialising service address for VerifySolution
2019-03-08 16:54:38,893 INFO  Time before invoking service In SUPER:Fri Mar 08 16:54:38 IST 2019
2019-03-08 16:54:39,907 INFO  Time after invoking service In SUPER:Fri Mar 08 16:54:39 IST 2019
2019-03-08 16:54:39,908 INFO  Service responded successfully with required details
2019-03-08 16:54:39,908 INFO  Time after invoking service:Fri Mar 08 16:54:39 IST 2019
2019-03-08 16:54:39,908 INFO  User solution successfully verified
2019-03-08 16:54:39,909 INFO  Processing the response from verify service
2019-03-08 16:54:39,911 INFO  Starting to parse JSON response
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:54:39,913 INFO  Successfully parsed JSON response
2019-03-08 16:54:39,914 INFO  In the process of generating verify response in HTML
2019-03-08 16:54:39,987 INFO  Successfully generated verify response in HTML
2019-03-08 16:54:39,988 INFO  Successfully processed the response from service
2019-03-08 16:59:36,678 INFO  Setting request parameters for VerifySolution
2019-03-08 16:59:36,678 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 16:59:36,678 INFO  Starting to parse the user solution
2019-03-08 16:59:36,679 INFO  Displaying user solution
2019-03-08 16:59:36,739 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            super().__init__(price)\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        if(self.get_item_type==\"Silk\"):\r\n            super().__init__(price)\r\n            self.__points=None\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 16:59:36,741 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 16:59:36,741 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 16:59:36,741 INFO  Invoking the service to verify the user solution
2019-03-08 16:59:36,742 INFO  Time before invoking service:Fri Mar 08 16:59:36 IST 2019
2019-03-08 16:59:36,742 INFO  Initialising service address for VerifySolution
2019-03-08 16:59:36,743 INFO  Time before invoking service In SUPER:Fri Mar 08 16:59:36 IST 2019
2019-03-08 16:59:37,784 INFO  Time after invoking service In SUPER:Fri Mar 08 16:59:37 IST 2019
2019-03-08 16:59:37,784 INFO  Service responded successfully with required details
2019-03-08 16:59:37,785 INFO  Time after invoking service:Fri Mar 08 16:59:37 IST 2019
2019-03-08 16:59:37,785 INFO  User solution successfully verified
2019-03-08 16:59:37,785 INFO  Processing the response from verify service
2019-03-08 16:59:37,793 INFO  Starting to parse JSON response
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,796 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,796 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 16:59:37,797 INFO  Successfully parsed JSON response
2019-03-08 16:59:37,798 INFO  In the process of generating verify response in HTML
2019-03-08 16:59:37,874 INFO  Successfully generated verify response in HTML
2019-03-08 16:59:37,875 INFO  Successfully processed the response from service
2019-03-08 17:00:02,284 INFO  Setting request parameters for VerifySolution
2019-03-08 17:00:02,284 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:00:02,284 INFO  Starting to parse the user solution
2019-03-08 17:00:02,285 INFO  Displaying user solution
2019-03-08 17:00:02,328 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            super().__init__(price)\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        if(self.get_item_type==\"Silk\"):\r\n            super().__init__(price)\r\n            \r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:00:02,329 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:00:02,329 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:00:02,329 INFO  Invoking the service to verify the user solution
2019-03-08 17:00:02,330 INFO  Time before invoking service:Fri Mar 08 17:00:02 IST 2019
2019-03-08 17:00:02,330 INFO  Initialising service address for VerifySolution
2019-03-08 17:00:02,331 INFO  Time before invoking service In SUPER:Fri Mar 08 17:00:02 IST 2019
2019-03-08 17:00:03,350 INFO  Time after invoking service In SUPER:Fri Mar 08 17:00:03 IST 2019
2019-03-08 17:00:03,351 INFO  Service responded successfully with required details
2019-03-08 17:00:03,351 INFO  Time after invoking service:Fri Mar 08 17:00:03 IST 2019
2019-03-08 17:00:03,351 INFO  User solution successfully verified
2019-03-08 17:00:03,352 INFO  Processing the response from verify service
2019-03-08 17:00:03,354 INFO  Starting to parse JSON response
2019-03-08 17:00:03,355 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,356 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:03,357 INFO  Successfully parsed JSON response
2019-03-08 17:00:03,358 INFO  In the process of generating verify response in HTML
2019-03-08 17:00:03,438 INFO  Successfully generated verify response in HTML
2019-03-08 17:00:03,439 INFO  Successfully processed the response from service
2019-03-08 17:00:39,866 INFO  Setting request parameters for VerifySolution
2019-03-08 17:00:39,866 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:00:39,866 INFO  Starting to parse the user solution
2019-03-08 17:00:39,867 INFO  Displaying user solution
2019-03-08 17:00:39,909 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.__price>10000):\r\n            self.__points = 10\r\n        elif(self.__price<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:00:39,909 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:00:39,909 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:00:39,909 INFO  Invoking the service to verify the user solution
2019-03-08 17:00:39,910 INFO  Time before invoking service:Fri Mar 08 17:00:39 IST 2019
2019-03-08 17:00:39,910 INFO  Initialising service address for VerifySolution
2019-03-08 17:00:39,910 INFO  Time before invoking service In SUPER:Fri Mar 08 17:00:39 IST 2019
2019-03-08 17:00:40,887 INFO  Time after invoking service In SUPER:Fri Mar 08 17:00:40 IST 2019
2019-03-08 17:00:40,887 INFO  Service responded successfully with required details
2019-03-08 17:00:40,888 INFO  Time after invoking service:Fri Mar 08 17:00:40 IST 2019
2019-03-08 17:00:40,888 INFO  User solution successfully verified
2019-03-08 17:00:40,888 INFO  Processing the response from verify service
2019-03-08 17:00:40,890 INFO  Starting to parse JSON response
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,892 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,892 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,892 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:00:40,893 INFO  Successfully parsed JSON response
2019-03-08 17:00:40,893 INFO  In the process of generating verify response in HTML
2019-03-08 17:00:40,964 INFO  Successfully generated verify response in HTML
2019-03-08 17:00:40,964 INFO  Successfully processed the response from service
2019-03-08 17:01:46,352 INFO  Setting request parameters for VerifySolution
2019-03-08 17:01:46,353 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:01:46,353 INFO  Starting to parse the user solution
2019-03-08 17:01:46,353 INFO  Displaying user solution
2019-03-08 17:01:46,391 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price, \"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:01:46,392 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:01:46,392 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:01:46,392 INFO  Invoking the service to verify the user solution
2019-03-08 17:01:46,393 INFO  Time before invoking service:Fri Mar 08 17:01:46 IST 2019
2019-03-08 17:01:46,393 INFO  Initialising service address for VerifySolution
2019-03-08 17:01:46,395 INFO  Time before invoking service In SUPER:Fri Mar 08 17:01:46 IST 2019
2019-03-08 17:01:47,366 INFO  Time after invoking service In SUPER:Fri Mar 08 17:01:47 IST 2019
2019-03-08 17:01:47,366 INFO  Service responded successfully with required details
2019-03-08 17:01:47,367 INFO  Time after invoking service:Fri Mar 08 17:01:47 IST 2019
2019-03-08 17:01:47,367 INFO  User solution successfully verified
2019-03-08 17:01:47,367 INFO  Processing the response from verify service
2019-03-08 17:01:47,369 INFO  Starting to parse JSON response
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,371 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:01:47,373 INFO  Successfully parsed JSON response
2019-03-08 17:01:47,373 INFO  In the process of generating verify response in HTML
2019-03-08 17:01:47,454 INFO  Successfully generated verify response in HTML
2019-03-08 17:01:47,454 INFO  Successfully processed the response from service
2019-03-08 17:02:19,623 INFO  Setting request parameters for VerifySolution
2019-03-08 17:02:19,623 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:02:19,623 INFO  Starting to parse the user solution
2019-03-08 17:02:19,624 INFO  Displaying user solution
2019-03-08 17:02:19,674 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        super().__init__(price,\"Silk\")\r\n        self.__points=None\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:02:19,674 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:02:19,675 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:02:19,675 INFO  Invoking the service to verify the user solution
2019-03-08 17:02:19,675 INFO  Time before invoking service:Fri Mar 08 17:02:19 IST 2019
2019-03-08 17:02:19,675 INFO  Initialising service address for VerifySolution
2019-03-08 17:02:19,676 INFO  Time before invoking service In SUPER:Fri Mar 08 17:02:19 IST 2019
2019-03-08 17:02:20,849 INFO  Time after invoking service In SUPER:Fri Mar 08 17:02:20 IST 2019
2019-03-08 17:02:20,849 INFO  Service responded successfully with required details
2019-03-08 17:02:20,849 INFO  Time after invoking service:Fri Mar 08 17:02:20 IST 2019
2019-03-08 17:02:20,849 INFO  User solution successfully verified
2019-03-08 17:02:20,850 INFO  Processing the response from verify service
2019-03-08 17:02:20,854 INFO  Starting to parse JSON response
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,856 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,857 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,857 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:02:20,861 INFO  Successfully parsed JSON response
2019-03-08 17:02:20,861 INFO  In the process of generating verify response in HTML
2019-03-08 17:02:20,978 INFO  Successfully generated verify response in HTML
2019-03-08 17:02:20,979 INFO  Successfully processed the response from service
2019-03-08 17:03:41,620 INFO  Setting request parameters for VerifySolution
2019-03-08 17:03:41,621 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:03:41,621 INFO  Starting to parse the user solution
2019-03-08 17:03:41,622 INFO  Displaying user solution
2019-03-08 17:03:41,682 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:03:41,683 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:03:41,683 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:03:41,683 INFO  Invoking the service to verify the user solution
2019-03-08 17:03:41,684 INFO  Time before invoking service:Fri Mar 08 17:03:41 IST 2019
2019-03-08 17:03:41,684 INFO  Initialising service address for VerifySolution
2019-03-08 17:03:41,684 INFO  Time before invoking service In SUPER:Fri Mar 08 17:03:41 IST 2019
2019-03-08 17:03:42,775 INFO  Time after invoking service In SUPER:Fri Mar 08 17:03:42 IST 2019
2019-03-08 17:03:42,775 INFO  Service responded successfully with required details
2019-03-08 17:03:42,776 INFO  Time after invoking service:Fri Mar 08 17:03:42 IST 2019
2019-03-08 17:03:42,776 INFO  User solution successfully verified
2019-03-08 17:03:42,776 INFO  Processing the response from verify service
2019-03-08 17:03:42,782 INFO  Starting to parse JSON response
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:03:42,786 INFO  Successfully parsed JSON response
2019-03-08 17:03:42,786 INFO  In the process of generating verify response in HTML
2019-03-08 17:03:42,879 INFO  Successfully generated verify response in HTML
2019-03-08 17:03:42,879 INFO  Successfully processed the response from service
2019-03-08 17:05:04,203 INFO  Setting request parameters for VerifySolution
2019-03-08 17:05:04,203 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:05:04,203 INFO  Starting to parse the user solution
2019-03-08 17:05:04,204 INFO  Displaying user solution
2019-03-08 17:05:04,245 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:05:04,245 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:05:04,245 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:05:04,245 INFO  Invoking the service to verify the user solution
2019-03-08 17:05:04,246 INFO  Time before invoking service:Fri Mar 08 17:05:04 IST 2019
2019-03-08 17:05:04,246 INFO  Initialising service address for VerifySolution
2019-03-08 17:05:04,246 INFO  Time before invoking service In SUPER:Fri Mar 08 17:05:04 IST 2019
2019-03-08 17:05:05,254 INFO  Time after invoking service In SUPER:Fri Mar 08 17:05:05 IST 2019
2019-03-08 17:05:05,254 INFO  Service responded successfully with required details
2019-03-08 17:05:05,255 INFO  Time after invoking service:Fri Mar 08 17:05:05 IST 2019
2019-03-08 17:05:05,255 INFO  User solution successfully verified
2019-03-08 17:05:05,255 INFO  Processing the response from verify service
2019-03-08 17:05:05,258 INFO  Starting to parse JSON response
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,259 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:05:05,261 INFO  Successfully parsed JSON response
2019-03-08 17:05:05,261 INFO  In the process of generating verify response in HTML
2019-03-08 17:05:05,361 INFO  Successfully generated verify response in HTML
2019-03-08 17:05:05,362 INFO  Successfully processed the response from service
2019-03-08 17:06:29,725 INFO  Setting request parameters for VerifySolution
2019-03-08 17:06:29,726 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:06:29,726 INFO  Starting to parse the user solution
2019-03-08 17:06:29,726 INFO  Displaying user solution
2019-03-08 17:06:29,775 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        Apparel.counter+=1\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:06:29,776 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:06:29,776 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:06:29,776 INFO  Invoking the service to verify the user solution
2019-03-08 17:06:29,777 INFO  Time before invoking service:Fri Mar 08 17:06:29 IST 2019
2019-03-08 17:06:29,777 INFO  Initialising service address for VerifySolution
2019-03-08 17:06:29,777 INFO  Time before invoking service In SUPER:Fri Mar 08 17:06:29 IST 2019
2019-03-08 17:06:30,840 INFO  Time after invoking service In SUPER:Fri Mar 08 17:06:30 IST 2019
2019-03-08 17:06:30,840 INFO  Service responded successfully with required details
2019-03-08 17:06:30,840 INFO  Time after invoking service:Fri Mar 08 17:06:30 IST 2019
2019-03-08 17:06:30,840 INFO  User solution successfully verified
2019-03-08 17:06:30,841 INFO  Processing the response from verify service
2019-03-08 17:06:30,843 INFO  Starting to parse JSON response
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,843 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,844 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,844 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:06:30,845 INFO  Successfully parsed JSON response
2019-03-08 17:06:30,845 INFO  In the process of generating verify response in HTML
2019-03-08 17:06:30,943 INFO  Successfully generated verify response in HTML
2019-03-08 17:06:30,943 INFO  Successfully processed the response from service
2019-03-08 17:09:34,143 INFO  Setting request parameters for VerifySolution
2019-03-08 17:09:34,143 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:09:34,143 INFO  Starting to parse the user solution
2019-03-08 17:09:34,143 INFO  Displaying user solution
2019-03-08 17:09:34,198 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:09:34,198 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:09:34,199 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:09:34,199 INFO  Invoking the service to verify the user solution
2019-03-08 17:09:34,199 INFO  Time before invoking service:Fri Mar 08 17:09:34 IST 2019
2019-03-08 17:09:34,200 INFO  Initialising service address for VerifySolution
2019-03-08 17:09:34,200 INFO  Time before invoking service In SUPER:Fri Mar 08 17:09:34 IST 2019
2019-03-08 17:09:35,238 INFO  Time after invoking service In SUPER:Fri Mar 08 17:09:35 IST 2019
2019-03-08 17:09:35,239 INFO  Service responded successfully with required details
2019-03-08 17:09:35,239 INFO  Time after invoking service:Fri Mar 08 17:09:35 IST 2019
2019-03-08 17:09:35,239 INFO  User solution successfully verified
2019-03-08 17:09:35,240 INFO  Processing the response from verify service
2019-03-08 17:09:35,248 INFO  Starting to parse JSON response
2019-03-08 17:09:35,250 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,250 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,250 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,251 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:09:35,252 INFO  Successfully parsed JSON response
2019-03-08 17:09:35,252 INFO  In the process of generating verify response in HTML
2019-03-08 17:09:35,346 INFO  Successfully generated verify response in HTML
2019-03-08 17:09:35,347 INFO  Successfully processed the response from service
2019-03-08 17:10:39,556 INFO  Setting request parameters for VerifySolution
2019-03-08 17:10:39,556 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:10:39,556 INFO  Starting to parse the user solution
2019-03-08 17:10:39,564 INFO  Displaying user solution
2019-03-08 17:10:39,607 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:10:39,607 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:10:39,607 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:10:39,607 INFO  Invoking the service to verify the user solution
2019-03-08 17:10:39,608 INFO  Time before invoking service:Fri Mar 08 17:10:39 IST 2019
2019-03-08 17:10:39,608 INFO  Initialising service address for VerifySolution
2019-03-08 17:10:39,609 INFO  Time before invoking service In SUPER:Fri Mar 08 17:10:39 IST 2019
2019-03-08 17:10:40,663 INFO  Time after invoking service In SUPER:Fri Mar 08 17:10:40 IST 2019
2019-03-08 17:10:40,663 INFO  Service responded successfully with required details
2019-03-08 17:10:40,663 INFO  Time after invoking service:Fri Mar 08 17:10:40 IST 2019
2019-03-08 17:10:40,664 INFO  User solution successfully verified
2019-03-08 17:10:40,664 INFO  Processing the response from verify service
2019-03-08 17:10:40,671 INFO  Starting to parse JSON response
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,675 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,676 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,676 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:10:40,678 INFO  Successfully parsed JSON response
2019-03-08 17:10:40,679 INFO  In the process of generating verify response in HTML
2019-03-08 17:10:40,778 INFO  Successfully generated verify response in HTML
2019-03-08 17:10:40,778 INFO  Successfully processed the response from service
2019-03-08 17:12:00,488 INFO  Setting request parameters for VerifySolution
2019-03-08 17:12:00,488 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:12:00,488 INFO  Starting to parse the user solution
2019-03-08 17:12:00,489 INFO  Displaying user solution
2019-03-08 17:12:00,525 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:12:00,526 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:12:00,526 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:12:00,526 INFO  Invoking the service to verify the user solution
2019-03-08 17:12:00,526 INFO  Time before invoking service:Fri Mar 08 17:12:00 IST 2019
2019-03-08 17:12:00,527 INFO  Initialising service address for VerifySolution
2019-03-08 17:12:00,528 INFO  Time before invoking service In SUPER:Fri Mar 08 17:12:00 IST 2019
2019-03-08 17:12:01,666 INFO  Time after invoking service In SUPER:Fri Mar 08 17:12:01 IST 2019
2019-03-08 17:12:01,666 INFO  Service responded successfully with required details
2019-03-08 17:12:01,666 INFO  Time after invoking service:Fri Mar 08 17:12:01 IST 2019
2019-03-08 17:12:01,666 INFO  User solution successfully verified
2019-03-08 17:12:01,667 INFO  Processing the response from verify service
2019-03-08 17:12:01,669 INFO  Starting to parse JSON response
2019-03-08 17:12:01,670 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:12:01,672 INFO  Successfully parsed JSON response
2019-03-08 17:12:01,672 INFO  In the process of generating verify response in HTML
2019-03-08 17:12:01,750 INFO  Successfully generated verify response in HTML
2019-03-08 17:12:01,750 INFO  Successfully processed the response from service
2019-03-08 17:13:07,778 INFO  Setting request parameters for VerifySolution
2019-03-08 17:13:07,779 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:13:07,779 INFO  Starting to parse the user solution
2019-03-08 17:13:07,779 INFO  Displaying user solution
2019-03-08 17:13:07,826 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type().lower()==\"cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id().lower()==\"silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:13:07,827 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:13:07,827 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:13:07,827 INFO  Invoking the service to verify the user solution
2019-03-08 17:13:07,828 INFO  Time before invoking service:Fri Mar 08 17:13:07 IST 2019
2019-03-08 17:13:07,828 INFO  Initialising service address for VerifySolution
2019-03-08 17:13:07,829 INFO  Time before invoking service In SUPER:Fri Mar 08 17:13:07 IST 2019
2019-03-08 17:13:08,999 INFO  Time after invoking service In SUPER:Fri Mar 08 17:13:08 IST 2019
2019-03-08 17:13:08,999 INFO  Service responded successfully with required details
2019-03-08 17:13:08,999 INFO  Time after invoking service:Fri Mar 08 17:13:08 IST 2019
2019-03-08 17:13:08,999 INFO  User solution successfully verified
2019-03-08 17:13:09,000 INFO  Processing the response from verify service
2019-03-08 17:13:09,002 INFO  Starting to parse JSON response
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,003 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:09,005 INFO  Successfully parsed JSON response
2019-03-08 17:13:09,005 INFO  In the process of generating verify response in HTML
2019-03-08 17:13:09,130 INFO  Successfully generated verify response in HTML
2019-03-08 17:13:09,131 INFO  Successfully processed the response from service
2019-03-08 17:13:27,165 INFO  Setting request parameters for VerifySolution
2019-03-08 17:13:27,165 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:13:27,165 INFO  Starting to parse the user solution
2019-03-08 17:13:27,166 INFO  Displaying user solution
2019-03-08 17:13:27,211 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:13:27,211 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:13:27,211 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:13:27,211 INFO  Invoking the service to verify the user solution
2019-03-08 17:13:27,212 INFO  Time before invoking service:Fri Mar 08 17:13:27 IST 2019
2019-03-08 17:13:27,212 INFO  Initialising service address for VerifySolution
2019-03-08 17:13:27,213 INFO  Time before invoking service In SUPER:Fri Mar 08 17:13:27 IST 2019
2019-03-08 17:13:28,278 INFO  Time after invoking service In SUPER:Fri Mar 08 17:13:28 IST 2019
2019-03-08 17:13:28,279 INFO  Service responded successfully with required details
2019-03-08 17:13:28,279 INFO  Time after invoking service:Fri Mar 08 17:13:28 IST 2019
2019-03-08 17:13:28,279 INFO  User solution successfully verified
2019-03-08 17:13:28,280 INFO  Processing the response from verify service
2019-03-08 17:13:28,282 INFO  Starting to parse JSON response
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,284 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:13:28,286 INFO  Successfully parsed JSON response
2019-03-08 17:13:28,286 INFO  In the process of generating verify response in HTML
2019-03-08 17:13:28,359 INFO  Successfully generated verify response in HTML
2019-03-08 17:13:28,360 INFO  Successfully processed the response from service
2019-03-08 17:14:46,679 INFO  Setting request parameters for VerifySolution
2019-03-08 17:14:46,679 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:14:46,679 INFO  Starting to parse the user solution
2019-03-08 17:14:46,680 INFO  Displaying user solution
2019-03-08 17:14:46,719 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price)\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:14:46,720 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:14:46,720 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:14:46,720 INFO  Invoking the service to verify the user solution
2019-03-08 17:14:46,721 INFO  Time before invoking service:Fri Mar 08 17:14:46 IST 2019
2019-03-08 17:14:46,721 INFO  Initialising service address for VerifySolution
2019-03-08 17:14:46,721 INFO  Time before invoking service In SUPER:Fri Mar 08 17:14:46 IST 2019
2019-03-08 17:14:47,746 INFO  Time after invoking service In SUPER:Fri Mar 08 17:14:47 IST 2019
2019-03-08 17:14:47,747 INFO  Service responded successfully with required details
2019-03-08 17:14:47,747 INFO  Time after invoking service:Fri Mar 08 17:14:47 IST 2019
2019-03-08 17:14:47,747 INFO  User solution successfully verified
2019-03-08 17:14:47,747 INFO  Processing the response from verify service
2019-03-08 17:14:47,752 INFO  Starting to parse JSON response
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:47,756 INFO  Successfully parsed JSON response
2019-03-08 17:14:47,756 INFO  In the process of generating verify response in HTML
2019-03-08 17:14:47,836 INFO  Successfully generated verify response in HTML
2019-03-08 17:14:47,836 INFO  Successfully processed the response from service
2019-03-08 17:14:55,797 INFO  Setting request parameters for VerifySolution
2019-03-08 17:14:55,797 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:14:55,797 INFO  Starting to parse the user solution
2019-03-08 17:14:55,797 INFO  Displaying user solution
2019-03-08 17:14:55,834 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price)\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:14:55,835 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:14:55,835 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:14:55,835 INFO  Invoking the service to verify the user solution
2019-03-08 17:14:55,835 INFO  Time before invoking service:Fri Mar 08 17:14:55 IST 2019
2019-03-08 17:14:55,835 INFO  Initialising service address for VerifySolution
2019-03-08 17:14:55,836 INFO  Time before invoking service In SUPER:Fri Mar 08 17:14:55 IST 2019
2019-03-08 17:14:56,910 INFO  Time after invoking service In SUPER:Fri Mar 08 17:14:56 IST 2019
2019-03-08 17:14:56,911 INFO  Service responded successfully with required details
2019-03-08 17:14:56,911 INFO  Time after invoking service:Fri Mar 08 17:14:56 IST 2019
2019-03-08 17:14:56,911 INFO  User solution successfully verified
2019-03-08 17:14:56,911 INFO  Processing the response from verify service
2019-03-08 17:14:56,913 INFO  Starting to parse JSON response
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,915 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:14:56,916 INFO  Successfully parsed JSON response
2019-03-08 17:14:56,917 INFO  In the process of generating verify response in HTML
2019-03-08 17:14:56,999 INFO  Successfully generated verify response in HTML
2019-03-08 17:14:57,000 INFO  Successfully processed the response from service
2019-03-08 17:15:47,081 INFO  Setting request parameters for VerifySolution
2019-03-08 17:15:47,081 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:15:47,081 INFO  Starting to parse the user solution
2019-03-08 17:15:47,081 INFO  Displaying user solution
2019-03-08 17:15:47,117 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            Apparel.counter+=1\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:15:47,118 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:15:47,118 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:15:47,118 INFO  Invoking the service to verify the user solution
2019-03-08 17:15:47,118 INFO  Time before invoking service:Fri Mar 08 17:15:47 IST 2019
2019-03-08 17:15:47,118 INFO  Initialising service address for VerifySolution
2019-03-08 17:15:47,119 INFO  Time before invoking service In SUPER:Fri Mar 08 17:15:47 IST 2019
2019-03-08 17:15:48,062 INFO  Time after invoking service In SUPER:Fri Mar 08 17:15:48 IST 2019
2019-03-08 17:15:48,063 INFO  Service responded successfully with required details
2019-03-08 17:15:48,063 INFO  Time after invoking service:Fri Mar 08 17:15:48 IST 2019
2019-03-08 17:15:48,063 INFO  User solution successfully verified
2019-03-08 17:15:48,063 INFO  Processing the response from verify service
2019-03-08 17:15:48,065 INFO  Starting to parse JSON response
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,067 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:15:48,068 INFO  Successfully parsed JSON response
2019-03-08 17:15:48,068 INFO  In the process of generating verify response in HTML
2019-03-08 17:15:48,144 INFO  Successfully generated verify response in HTML
2019-03-08 17:15:48,144 INFO  Successfully processed the response from service
2019-03-08 17:18:19,540 INFO  Setting request parameters for VerifySolution
2019-03-08 17:18:19,540 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:18:19,540 INFO  Starting to parse the user solution
2019-03-08 17:18:19,541 INFO  Displaying user solution
2019-03-08 17:18:19,587 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        Apparel.counter+=1\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:18:19,587 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:18:19,587 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:18:19,587 INFO  Invoking the service to verify the user solution
2019-03-08 17:18:19,587 INFO  Time before invoking service:Fri Mar 08 17:18:19 IST 2019
2019-03-08 17:18:19,587 INFO  Initialising service address for VerifySolution
2019-03-08 17:18:19,587 INFO  Time before invoking service In SUPER:Fri Mar 08 17:18:19 IST 2019
2019-03-08 17:18:20,510 INFO  Time after invoking service In SUPER:Fri Mar 08 17:18:20 IST 2019
2019-03-08 17:18:20,510 INFO  Service responded successfully with required details
2019-03-08 17:18:20,510 INFO  Time after invoking service:Fri Mar 08 17:18:20 IST 2019
2019-03-08 17:18:20,510 INFO  User solution successfully verified
2019-03-08 17:18:20,511 INFO  Processing the response from verify service
2019-03-08 17:18:20,513 INFO  Starting to parse JSON response
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:18:20,517 INFO  Successfully parsed JSON response
2019-03-08 17:18:20,517 INFO  In the process of generating verify response in HTML
2019-03-08 17:18:20,612 INFO  Successfully generated verify response in HTML
2019-03-08 17:18:20,612 INFO  Successfully processed the response from service
2019-03-08 17:20:36,830 INFO  Setting request parameters for VerifySolution
2019-03-08 17:20:36,830 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:20:36,830 INFO  Starting to parse the user solution
2019-03-08 17:20:36,831 INFO  Displaying user solution
2019-03-08 17:20:36,870 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:20:36,871 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:20:36,871 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:20:36,871 INFO  Invoking the service to verify the user solution
2019-03-08 17:20:36,872 INFO  Time before invoking service:Fri Mar 08 17:20:36 IST 2019
2019-03-08 17:20:36,872 INFO  Initialising service address for VerifySolution
2019-03-08 17:20:36,872 INFO  Time before invoking service In SUPER:Fri Mar 08 17:20:36 IST 2019
2019-03-08 17:20:37,868 INFO  Time after invoking service In SUPER:Fri Mar 08 17:20:37 IST 2019
2019-03-08 17:20:37,868 INFO  Service responded successfully with required details
2019-03-08 17:20:37,868 INFO  Time after invoking service:Fri Mar 08 17:20:37 IST 2019
2019-03-08 17:20:37,869 INFO  User solution successfully verified
2019-03-08 17:20:37,869 INFO  Processing the response from verify service
2019-03-08 17:20:37,875 INFO  Starting to parse JSON response
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,877 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,878 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,878 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:37,879 INFO  Successfully parsed JSON response
2019-03-08 17:20:37,879 INFO  In the process of generating verify response in HTML
2019-03-08 17:20:37,959 INFO  Successfully generated verify response in HTML
2019-03-08 17:20:37,959 INFO  Successfully processed the response from service
2019-03-08 17:20:43,267 INFO  Setting request parameters for VerifySolution
2019-03-08 17:20:43,267 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:20:43,268 INFO  Starting to parse the user solution
2019-03-08 17:20:43,268 INFO  Displaying user solution
2019-03-08 17:20:43,304 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:20:43,305 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:20:43,305 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:20:43,305 INFO  Invoking the service to verify the user solution
2019-03-08 17:20:43,306 INFO  Time before invoking service:Fri Mar 08 17:20:43 IST 2019
2019-03-08 17:20:43,307 INFO  Initialising service address for VerifySolution
2019-03-08 17:20:43,308 INFO  Time before invoking service In SUPER:Fri Mar 08 17:20:43 IST 2019
2019-03-08 17:20:44,273 INFO  Time after invoking service In SUPER:Fri Mar 08 17:20:44 IST 2019
2019-03-08 17:20:44,273 INFO  Service responded successfully with required details
2019-03-08 17:20:44,274 INFO  Time after invoking service:Fri Mar 08 17:20:44 IST 2019
2019-03-08 17:20:44,274 INFO  User solution successfully verified
2019-03-08 17:20:44,275 INFO  Processing the response from verify service
2019-03-08 17:20:44,277 INFO  Starting to parse JSON response
2019-03-08 17:20:44,277 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,277 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,278 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:20:44,279 INFO  Successfully parsed JSON response
2019-03-08 17:20:44,280 INFO  In the process of generating verify response in HTML
2019-03-08 17:20:44,358 INFO  Successfully generated verify response in HTML
2019-03-08 17:20:44,358 INFO  Successfully processed the response from service
2019-03-08 17:24:25,400 INFO  Setting request parameters for VerifySolution
2019-03-08 17:24:25,400 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:24:25,400 INFO  Starting to parse the user solution
2019-03-08 17:24:25,401 INFO  Displaying user solution
2019-03-08 17:24:25,440 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:24:25,441 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:24:25,441 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:24:25,441 INFO  Invoking the service to verify the user solution
2019-03-08 17:24:25,442 INFO  Time before invoking service:Fri Mar 08 17:24:25 IST 2019
2019-03-08 17:24:25,442 INFO  Initialising service address for VerifySolution
2019-03-08 17:24:25,442 INFO  Time before invoking service In SUPER:Fri Mar 08 17:24:25 IST 2019
2019-03-08 17:24:26,391 INFO  Time after invoking service In SUPER:Fri Mar 08 17:24:26 IST 2019
2019-03-08 17:24:26,392 INFO  Service responded successfully with required details
2019-03-08 17:24:26,392 INFO  Time after invoking service:Fri Mar 08 17:24:26 IST 2019
2019-03-08 17:24:26,392 INFO  User solution successfully verified
2019-03-08 17:24:26,393 INFO  Processing the response from verify service
2019-03-08 17:24:26,394 INFO  Starting to parse JSON response
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:24:26,396 INFO  Successfully parsed JSON response
2019-03-08 17:24:26,396 INFO  In the process of generating verify response in HTML
2019-03-08 17:24:26,475 INFO  Successfully generated verify response in HTML
2019-03-08 17:24:26,475 INFO  Successfully processed the response from service
2019-03-08 17:24:59,488 INFO  Setting request parameters for VerifySolution
2019-03-08 17:24:59,488 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:24:59,488 INFO  Starting to parse the user solution
2019-03-08 17:24:59,489 INFO  Displaying user solution
2019-03-08 17:24:59,527 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:24:59,527 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:24:59,527 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:24:59,527 INFO  Invoking the service to verify the user solution
2019-03-08 17:24:59,527 INFO  Time before invoking service:Fri Mar 08 17:24:59 IST 2019
2019-03-08 17:24:59,527 INFO  Initialising service address for VerifySolution
2019-03-08 17:24:59,528 INFO  Time before invoking service In SUPER:Fri Mar 08 17:24:59 IST 2019
2019-03-08 17:25:00,429 INFO  Time after invoking service In SUPER:Fri Mar 08 17:25:00 IST 2019
2019-03-08 17:25:00,429 INFO  Service responded successfully with required details
2019-03-08 17:25:00,429 INFO  Time after invoking service:Fri Mar 08 17:25:00 IST 2019
2019-03-08 17:25:00,430 INFO  User solution successfully verified
2019-03-08 17:25:00,430 INFO  Processing the response from verify service
2019-03-08 17:25:00,432 INFO  Starting to parse JSON response
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:25:00,435 INFO  Successfully parsed JSON response
2019-03-08 17:25:00,435 INFO  In the process of generating verify response in HTML
2019-03-08 17:25:00,508 INFO  Successfully generated verify response in HTML
2019-03-08 17:25:00,509 INFO  Successfully processed the response from service
2019-03-08 17:26:19,328 INFO  Setting request parameters for VerifySolution
2019-03-08 17:26:19,328 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:26:19,328 INFO  Starting to parse the user solution
2019-03-08 17:26:19,329 INFO  Displaying user solution
2019-03-08 17:26:19,367 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        self.__item_id = \"S\"+str(Apparel.counter)\r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:26:19,367 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:26:19,367 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:26:19,367 INFO  Invoking the service to verify the user solution
2019-03-08 17:26:19,367 INFO  Time before invoking service:Fri Mar 08 17:26:19 IST 2019
2019-03-08 17:26:19,367 INFO  Initialising service address for VerifySolution
2019-03-08 17:26:19,368 INFO  Time before invoking service In SUPER:Fri Mar 08 17:26:19 IST 2019
2019-03-08 17:26:20,378 INFO  Time after invoking service In SUPER:Fri Mar 08 17:26:20 IST 2019
2019-03-08 17:26:20,379 INFO  Service responded successfully with required details
2019-03-08 17:26:20,379 INFO  Time after invoking service:Fri Mar 08 17:26:20 IST 2019
2019-03-08 17:26:20,379 INFO  User solution successfully verified
2019-03-08 17:26:20,380 INFO  Processing the response from verify service
2019-03-08 17:26:20,382 INFO  Starting to parse JSON response
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,383 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:20,384 INFO  Successfully parsed JSON response
2019-03-08 17:26:20,384 INFO  In the process of generating verify response in HTML
2019-03-08 17:26:20,451 INFO  Successfully generated verify response in HTML
2019-03-08 17:26:20,451 INFO  Successfully processed the response from service
2019-03-08 17:26:52,305 INFO  Setting request parameters for VerifySolution
2019-03-08 17:26:52,305 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:26:52,306 INFO  Starting to parse the user solution
2019-03-08 17:26:52,306 INFO  Displaying user solution
2019-03-08 17:26:52,347 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        self.__item_id= None\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            \r\n            \r\n        elif(self.get_item_id()==\"Silk\"):\r\n            \r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        self.__item_id = \"C\"+str(Apparel.counter)\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:26:52,347 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:26:52,347 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:26:52,347 INFO  Invoking the service to verify the user solution
2019-03-08 17:26:52,347 INFO  Time before invoking service:Fri Mar 08 17:26:52 IST 2019
2019-03-08 17:26:52,347 INFO  Initialising service address for VerifySolution
2019-03-08 17:26:52,348 INFO  Time before invoking service In SUPER:Fri Mar 08 17:26:52 IST 2019
2019-03-08 17:26:53,489 INFO  Time after invoking service In SUPER:Fri Mar 08 17:26:53 IST 2019
2019-03-08 17:26:53,489 INFO  Service responded successfully with required details
2019-03-08 17:26:53,490 INFO  Time after invoking service:Fri Mar 08 17:26:53 IST 2019
2019-03-08 17:26:53,490 INFO  User solution successfully verified
2019-03-08 17:26:53,491 INFO  Processing the response from verify service
2019-03-08 17:26:53,493 INFO  Starting to parse JSON response
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,495 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:26:53,497 INFO  Successfully parsed JSON response
2019-03-08 17:26:53,497 INFO  In the process of generating verify response in HTML
2019-03-08 17:26:53,572 INFO  Successfully generated verify response in HTML
2019-03-08 17:26:53,572 INFO  Successfully processed the response from service
2019-03-08 17:30:08,721 INFO  Setting request parameters for VerifySolution
2019-03-08 17:30:08,721 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:30:08,721 INFO  Starting to parse the user solution
2019-03-08 17:30:08,722 INFO  Displaying user solution
2019-03-08 17:30:08,763 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            \r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            \r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:30:08,766 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:30:08,766 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:30:08,766 INFO  Invoking the service to verify the user solution
2019-03-08 17:30:08,767 INFO  Time before invoking service:Fri Mar 08 17:30:08 IST 2019
2019-03-08 17:30:08,767 INFO  Initialising service address for VerifySolution
2019-03-08 17:30:08,767 INFO  Time before invoking service In SUPER:Fri Mar 08 17:30:08 IST 2019
2019-03-08 17:30:09,763 INFO  Time after invoking service In SUPER:Fri Mar 08 17:30:09 IST 2019
2019-03-08 17:30:09,763 INFO  Service responded successfully with required details
2019-03-08 17:30:09,764 INFO  Time after invoking service:Fri Mar 08 17:30:09 IST 2019
2019-03-08 17:30:09,764 INFO  User solution successfully verified
2019-03-08 17:30:09,764 INFO  Processing the response from verify service
2019-03-08 17:30:09,770 INFO  Starting to parse JSON response
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,772 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:09,773 INFO  Successfully parsed JSON response
2019-03-08 17:30:09,773 INFO  In the process of generating verify response in HTML
2019-03-08 17:30:09,851 INFO  Successfully generated verify response in HTML
2019-03-08 17:30:09,853 INFO  Successfully processed the response from service
2019-03-08 17:30:41,025 INFO  Setting request parameters for VerifySolution
2019-03-08 17:30:41,025 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:30:41,025 INFO  Starting to parse the user solution
2019-03-08 17:30:41,026 INFO  Displaying user solution
2019-03-08 17:30:41,057 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:30:41,058 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:30:41,058 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:30:41,058 INFO  Invoking the service to verify the user solution
2019-03-08 17:30:41,059 INFO  Time before invoking service:Fri Mar 08 17:30:41 IST 2019
2019-03-08 17:30:41,059 INFO  Initialising service address for VerifySolution
2019-03-08 17:30:41,059 INFO  Time before invoking service In SUPER:Fri Mar 08 17:30:41 IST 2019
2019-03-08 17:30:42,174 INFO  Time after invoking service In SUPER:Fri Mar 08 17:30:42 IST 2019
2019-03-08 17:30:42,174 INFO  Service responded successfully with required details
2019-03-08 17:30:42,174 INFO  Time after invoking service:Fri Mar 08 17:30:42 IST 2019
2019-03-08 17:30:42,174 INFO  User solution successfully verified
2019-03-08 17:30:42,175 INFO  Processing the response from verify service
2019-03-08 17:30:42,178 INFO  Starting to parse JSON response
2019-03-08 17:30:42,181 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,182 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:30:42,183 INFO  Successfully parsed JSON response
2019-03-08 17:30:42,183 INFO  In the process of generating verify response in HTML
2019-03-08 17:30:42,252 INFO  Successfully generated verify response in HTML
2019-03-08 17:30:42,253 INFO  Successfully processed the response from service
2019-03-08 17:31:06,640 INFO  Setting request parameters for VerifySolution
2019-03-08 17:31:06,640 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:31:06,640 INFO  Starting to parse the user solution
2019-03-08 17:31:06,641 INFO  Displaying user solution
2019-03-08 17:31:06,676 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_id()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:31:06,676 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:31:06,676 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:31:06,676 INFO  Invoking the service to verify the user solution
2019-03-08 17:31:06,676 INFO  Time before invoking service:Fri Mar 08 17:31:06 IST 2019
2019-03-08 17:31:06,677 INFO  Initialising service address for VerifySolution
2019-03-08 17:31:06,677 INFO  Time before invoking service In SUPER:Fri Mar 08 17:31:06 IST 2019
2019-03-08 17:31:07,524 INFO  Time after invoking service In SUPER:Fri Mar 08 17:31:07 IST 2019
2019-03-08 17:31:07,524 INFO  Service responded successfully with required details
2019-03-08 17:31:07,525 INFO  Time after invoking service:Fri Mar 08 17:31:07 IST 2019
2019-03-08 17:31:07,525 INFO  User solution successfully verified
2019-03-08 17:31:07,525 INFO  Processing the response from verify service
2019-03-08 17:31:07,527 INFO  Starting to parse JSON response
2019-03-08 17:31:07,527 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:07,529 INFO  Successfully parsed JSON response
2019-03-08 17:31:07,529 INFO  In the process of generating verify response in HTML
2019-03-08 17:31:07,593 INFO  Successfully generated verify response in HTML
2019-03-08 17:31:07,593 INFO  Successfully processed the response from service
2019-03-08 17:31:37,060 INFO  Setting request parameters for VerifySolution
2019-03-08 17:31:37,061 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:31:37,061 INFO  Starting to parse the user solution
2019-03-08 17:31:37,061 INFO  Displaying user solution
2019-03-08 17:31:37,096 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        \r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:31:37,096 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:31:37,096 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:31:37,096 INFO  Invoking the service to verify the user solution
2019-03-08 17:31:37,097 INFO  Time before invoking service:Fri Mar 08 17:31:37 IST 2019
2019-03-08 17:31:37,097 INFO  Initialising service address for VerifySolution
2019-03-08 17:31:37,098 INFO  Time before invoking service In SUPER:Fri Mar 08 17:31:37 IST 2019
2019-03-08 17:31:38,113 INFO  Time after invoking service In SUPER:Fri Mar 08 17:31:38 IST 2019
2019-03-08 17:31:38,113 INFO  Service responded successfully with required details
2019-03-08 17:31:38,113 INFO  Time after invoking service:Fri Mar 08 17:31:38 IST 2019
2019-03-08 17:31:38,113 INFO  User solution successfully verified
2019-03-08 17:31:38,114 INFO  Processing the response from verify service
2019-03-08 17:31:38,115 INFO  Starting to parse JSON response
2019-03-08 17:31:38,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:31:38,118 INFO  Successfully parsed JSON response
2019-03-08 17:31:38,118 INFO  In the process of generating verify response in HTML
2019-03-08 17:31:38,220 INFO  Successfully generated verify response in HTML
2019-03-08 17:31:38,220 INFO  Successfully processed the response from service
2019-03-08 17:34:26,287 INFO  Setting request parameters for VerifySolution
2019-03-08 17:34:26,287 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:34:26,287 INFO  Starting to parse the user solution
2019-03-08 17:34:26,288 INFO  Displaying user solution
2019-03-08 17:34:26,327 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price= 1.05*(self.__price - self.__discount)\r\n        self.set_price(self.__price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        self.__price = 1.1*(self.__price)\r\n        self.set_price(self.__price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:34:26,327 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:34:26,327 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:34:26,327 INFO  Invoking the service to verify the user solution
2019-03-08 17:34:26,328 INFO  Time before invoking service:Fri Mar 08 17:34:26 IST 2019
2019-03-08 17:34:26,328 INFO  Initialising service address for VerifySolution
2019-03-08 17:34:26,328 INFO  Time before invoking service In SUPER:Fri Mar 08 17:34:26 IST 2019
2019-03-08 17:34:27,332 INFO  Time after invoking service In SUPER:Fri Mar 08 17:34:27 IST 2019
2019-03-08 17:34:27,332 INFO  Service responded successfully with required details
2019-03-08 17:34:27,333 INFO  Time after invoking service:Fri Mar 08 17:34:27 IST 2019
2019-03-08 17:34:27,333 INFO  User solution successfully verified
2019-03-08 17:34:27,333 INFO  Processing the response from verify service
2019-03-08 17:34:27,336 INFO  Starting to parse JSON response
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,338 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:34:27,339 INFO  Successfully parsed JSON response
2019-03-08 17:34:27,339 INFO  In the process of generating verify response in HTML
2019-03-08 17:34:27,413 INFO  Successfully generated verify response in HTML
2019-03-08 17:34:27,413 INFO  Successfully processed the response from service
2019-03-08 17:36:18,558 INFO  Setting request parameters for VerifySolution
2019-03-08 17:36:18,558 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:36:18,558 INFO  Starting to parse the user solution
2019-03-08 17:36:18,558 INFO  Displaying user solution
2019-03-08 17:36:18,598 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price= 1.05*(self.get_price() - self.get_discount())\r\n        self.set_price(price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price = 1.1*(self.get_price())\r\n        self.set_price(price)\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:36:18,599 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:36:18,599 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:36:18,599 INFO  Invoking the service to verify the user solution
2019-03-08 17:36:18,599 INFO  Time before invoking service:Fri Mar 08 17:36:18 IST 2019
2019-03-08 17:36:18,599 INFO  Initialising service address for VerifySolution
2019-03-08 17:36:18,600 INFO  Time before invoking service In SUPER:Fri Mar 08 17:36:18 IST 2019
2019-03-08 17:36:19,483 INFO  Time after invoking service In SUPER:Fri Mar 08 17:36:19 IST 2019
2019-03-08 17:36:19,484 INFO  Service responded successfully with required details
2019-03-08 17:36:19,484 INFO  Time after invoking service:Fri Mar 08 17:36:19 IST 2019
2019-03-08 17:36:19,484 INFO  User solution successfully verified
2019-03-08 17:36:19,484 INFO  Processing the response from verify service
2019-03-08 17:36:19,489 INFO  Starting to parse JSON response
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:36:19,492 INFO  Successfully parsed JSON response
2019-03-08 17:36:19,492 INFO  In the process of generating verify response in HTML
2019-03-08 17:36:19,564 INFO  Successfully generated verify response in HTML
2019-03-08 17:36:19,565 INFO  Successfully processed the response from service
2019-03-08 17:37:01,333 INFO  Setting request parameters for VerifySolution
2019-03-08 17:37:01,334 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:37:01,334 INFO  Starting to parse the user solution
2019-03-08 17:37:01,334 INFO  Displaying user solution
2019-03-08 17:37:01,373 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price= 1.05*(self.get_price() - self.get_discount())\r\n        self.set_price(price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        price = 1.1*(self.get_price())\r\n        self.set_price(price)\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:37:01,373 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:37:01,374 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:37:01,374 INFO  Invoking the service to verify the user solution
2019-03-08 17:37:01,374 INFO  Time before invoking service:Fri Mar 08 17:37:01 IST 2019
2019-03-08 17:37:01,374 INFO  Initialising service address for VerifySolution
2019-03-08 17:37:01,375 INFO  Time before invoking service In SUPER:Fri Mar 08 17:37:01 IST 2019
2019-03-08 17:37:05,359 INFO  Time after invoking service In SUPER:Fri Mar 08 17:37:05 IST 2019
2019-03-08 17:37:05,359 INFO  Service responded successfully with required details
2019-03-08 17:37:05,360 INFO  Time after invoking service:Fri Mar 08 17:37:05 IST 2019
2019-03-08 17:37:05,360 INFO  User solution successfully verified
2019-03-08 17:37:05,360 INFO  Processing the response from verify service
2019-03-08 17:37:05,362 INFO  Starting to parse JSON response
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,363 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:37:05,364 INFO  Successfully parsed JSON response
2019-03-08 17:37:05,365 INFO  In the process of generating verify response in HTML
2019-03-08 17:37:05,444 INFO  Successfully generated verify response in HTML
2019-03-08 17:37:05,445 INFO  Successfully processed the response from service
2019-03-08 17:38:28,884 INFO  Setting request parameters for VerifySolution
2019-03-08 17:38:28,885 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:38:28,885 INFO  Starting to parse the user solution
2019-03-08 17:38:28,888 INFO  Displaying user solution
2019-03-08 17:38:28,922 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price= 1.05*(self.get_price() - (self.get_discount()/100)*self.get_price())\r\n        self.set_price(price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        price = 1.1*(self.get_price())\r\n        self.set_price(price)\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:38:28,924 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:38:28,924 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:38:28,924 INFO  Invoking the service to verify the user solution
2019-03-08 17:38:28,925 INFO  Time before invoking service:Fri Mar 08 17:38:28 IST 2019
2019-03-08 17:38:28,925 INFO  Initialising service address for VerifySolution
2019-03-08 17:38:28,926 INFO  Time before invoking service In SUPER:Fri Mar 08 17:38:28 IST 2019
2019-03-08 17:38:29,850 INFO  Time after invoking service In SUPER:Fri Mar 08 17:38:29 IST 2019
2019-03-08 17:38:29,850 INFO  Service responded successfully with required details
2019-03-08 17:38:29,850 INFO  Time after invoking service:Fri Mar 08 17:38:29 IST 2019
2019-03-08 17:38:29,850 INFO  User solution successfully verified
2019-03-08 17:38:29,851 INFO  Processing the response from verify service
2019-03-08 17:38:29,852 INFO  Starting to parse JSON response
2019-03-08 17:38:29,853 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,853 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,853 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,853 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,853 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:29,856 INFO  Successfully parsed JSON response
2019-03-08 17:38:29,857 INFO  In the process of generating verify response in HTML
2019-03-08 17:38:29,940 INFO  Successfully generated verify response in HTML
2019-03-08 17:38:29,940 INFO  Successfully processed the response from service
2019-03-08 17:38:49,664 INFO  Setting request parameters for VerifySolution
2019-03-08 17:38:49,665 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:38:49,665 INFO  Starting to parse the user solution
2019-03-08 17:38:49,665 INFO  Displaying user solution
2019-03-08 17:38:49,699 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price= 1.05*(self.get_price()-(self.get_discount()/100)*self.get_price())\r\n        self.set_price(price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        price = 1.1*(self.get_price())\r\n        self.set_price(price)\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:38:49,700 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:38:49,700 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:38:49,700 INFO  Invoking the service to verify the user solution
2019-03-08 17:38:49,700 INFO  Time before invoking service:Fri Mar 08 17:38:49 IST 2019
2019-03-08 17:38:49,700 INFO  Initialising service address for VerifySolution
2019-03-08 17:38:49,701 INFO  Time before invoking service In SUPER:Fri Mar 08 17:38:49 IST 2019
2019-03-08 17:38:50,704 INFO  Time after invoking service In SUPER:Fri Mar 08 17:38:50 IST 2019
2019-03-08 17:38:50,705 INFO  Service responded successfully with required details
2019-03-08 17:38:50,705 INFO  Time after invoking service:Fri Mar 08 17:38:50 IST 2019
2019-03-08 17:38:50,706 INFO  User solution successfully verified
2019-03-08 17:38:50,706 INFO  Processing the response from verify service
2019-03-08 17:38:50,709 INFO  Starting to parse JSON response
2019-03-08 17:38:50,710 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,711 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:38:50,713 INFO  Successfully parsed JSON response
2019-03-08 17:38:50,713 INFO  In the process of generating verify response in HTML
2019-03-08 17:38:50,784 INFO  Successfully generated verify response in HTML
2019-03-08 17:38:50,784 INFO  Successfully processed the response from service
2019-03-08 17:39:11,719 INFO  Setting request parameters for VerifySolution
2019-03-08 17:39:11,719 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 17:39:11,719 INFO  Starting to parse the user solution
2019-03-08 17:39:11,721 INFO  Displaying user solution
2019-03-08 17:39:11,753 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-24\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass Apparel:\r\n    counter=100\r\n    def __init__(self,price,item_type):\r\n        Apparel.counter+=1\r\n        self.__item_id= Apparel.counter\r\n        self.__price=price\r\n        self.__item_type=item_type\r\n        if(self.get_item_type()==\"Cotton\"):\r\n            self.__item_id = \"C\"+str(Apparel.counter)\r\n        elif(self.get_item_type()==\"Silk\"):\r\n            self.__item_id = \"S\"+str(Apparel.counter)\r\n            \r\n            \r\n\r\n    def get_item_id(self):\r\n        return self.__item_id\r\n\r\n\r\n    def get_price(self):\r\n        return self.__price\r\n\r\n\r\n    def get_item_type(self):\r\n        return self.__item_type\r\n\r\n    def calculate_price(self):\r\n        self.__price = 1.05*self.get_price() \r\n        \r\n    def set_price(self,price):\r\n        self.__price= price\r\n\r\nclass Cotton(Apparel):\r\n    def __init__(self,price,discount):\r\n        self.__discount= discount\r\n        super().__init__(price,\"Cotton\")\r\n        \r\n        \r\n\r\n    def get_discount(self):\r\n        return self.__discount\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        price=1.05*(self.get_price()-(self.get_discount()/100)*self.get_price())\r\n        self.set_price(price)\r\n        \r\nclass Silk(Apparel):\r\n    def __init__(self,price):\r\n        self.__points=None\r\n        super().__init__(price, \"Silk\")\r\n        Apparel.counter+=1\r\n        \r\n\r\n    def get_points(self):\r\n        return self.__points\r\n\r\n    def calculate_price(self):\r\n        super().calculate_price()\r\n        if(self.get_price()>10000):\r\n            self.__points = 10\r\n        elif(self.get_price()<=10000):\r\n            self.__points = 3\r\n        price = 1.1*(self.get_price())\r\n        self.set_price(price)\r\n        \r\n            \r\n    \r\n        \r\n        \r\n","asgnmtId":"24","SolutionFileName":"Assign24.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 17:39:11,753 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 17:39:11,753 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 17:39:11,753 INFO  Invoking the service to verify the user solution
2019-03-08 17:39:11,754 INFO  Time before invoking service:Fri Mar 08 17:39:11 IST 2019
2019-03-08 17:39:11,754 INFO  Initialising service address for VerifySolution
2019-03-08 17:39:11,754 INFO  Time before invoking service In SUPER:Fri Mar 08 17:39:11 IST 2019
2019-03-08 17:39:12,750 INFO  Time after invoking service In SUPER:Fri Mar 08 17:39:12 IST 2019
2019-03-08 17:39:12,750 INFO  Service responded successfully with required details
2019-03-08 17:39:12,751 INFO  Time after invoking service:Fri Mar 08 17:39:12 IST 2019
2019-03-08 17:39:12,751 INFO  User solution successfully verified
2019-03-08 17:39:12,751 INFO  Processing the response from verify service
2019-03-08 17:39:12,753 INFO  Starting to parse JSON response
2019-03-08 17:39:12,754 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,755 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 17:39:12,757 INFO  Successfully parsed JSON response
2019-03-08 17:39:12,757 INFO  In the process of generating verify response in HTML
2019-03-08 17:39:12,832 INFO  Successfully generated verify response in HTML
2019-03-08 17:39:12,832 INFO  Successfully processed the response from service
2019-03-08 17:39:21,469 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 17:39:21,470 INFO  Displaying user solution
2019-03-08 17:39:21,481 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 17:39:21,481 INFO  Invoking the service to submit the user solution
2019-03-08 17:39:21,481 INFO  Initialising service address for Submit
2019-03-08 17:39:21,481 INFO  Time before invoking service In SUPER:Fri Mar 08 17:39:21 IST 2019
2019-03-08 17:39:21,753 INFO  Time after invoking service In SUPER:Fri Mar 08 17:39:21 IST 2019
2019-03-08 17:39:21,753 INFO  Service responded successfully with required details
2019-03-08 17:39:21,753 INFO  User solution successfully submitted
2019-03-08 17:39:21,753 INFO  Displaying submission status
2019-03-08 17:39:21,753 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 17:39:25,005 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 17:39:25,005 INFO  Displaying user solution
2019-03-08 17:39:25,013 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 17:39:25,014 INFO  Invoking the service to submit the user solution
2019-03-08 17:39:25,014 INFO  Initialising service address for Submit
2019-03-08 17:39:25,014 INFO  Time before invoking service In SUPER:Fri Mar 08 17:39:25 IST 2019
2019-03-08 17:39:25,103 INFO  Time after invoking service In SUPER:Fri Mar 08 17:39:25 IST 2019
2019-03-08 17:39:25,104 INFO  Service responded successfully with required details
2019-03-08 17:39:25,104 INFO  User solution successfully submitted
2019-03-08 17:39:25,104 INFO  Displaying submission status
2019-03-08 17:39:25,104 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 18:06:29,380 INFO  Setting request parameters for VerifySolution
2019-03-08 18:06:29,380 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:06:29,380 INFO  Starting to parse the user solution
2019-03-08 18:06:29,380 INFO  Displaying user solution
2019-03-08 18:06:29,451 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass fruitInfo:\r\n    __fruit_name_list=None\r\n    __fruit_price_list=None\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return fruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return fruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        pass\r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n    \r\n    \r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:06:29,451 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:06:29,451 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:06:29,451 INFO  Invoking the service to verify the user solution
2019-03-08 18:06:29,452 INFO  Time before invoking service:Fri Mar 08 18:06:29 IST 2019
2019-03-08 18:06:29,452 INFO  Initialising service address for VerifySolution
2019-03-08 18:06:29,452 INFO  Time before invoking service In SUPER:Fri Mar 08 18:06:29 IST 2019
2019-03-08 18:06:30,517 INFO  Time after invoking service In SUPER:Fri Mar 08 18:06:30 IST 2019
2019-03-08 18:06:30,518 INFO  Service responded successfully with required details
2019-03-08 18:06:30,518 INFO  Time after invoking service:Fri Mar 08 18:06:30 IST 2019
2019-03-08 18:06:30,518 INFO  User solution successfully verified
2019-03-08 18:06:30,518 INFO  Processing the response from verify service
2019-03-08 18:06:30,525 INFO  Starting to parse JSON response
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,528 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:06:30,530 INFO  Successfully parsed JSON response
2019-03-08 18:06:30,530 INFO  In the process of generating verify response in HTML
2019-03-08 18:06:30,606 INFO  Successfully generated verify response in HTML
2019-03-08 18:06:30,606 INFO  Successfully processed the response from service
2019-03-08 18:07:39,999 INFO  Setting request parameters for VerifySolution
2019-03-08 18:07:39,999 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:07:39,999 INFO  Starting to parse the user solution
2019-03-08 18:07:40,000 INFO  Displaying user solution
2019-03-08 18:07:40,045 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass fruitInfo:\r\n    __fruit_name_list=None\r\n    __fruit_price_list=None\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return fruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return fruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        pass\r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        pass\r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:07:40,046 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:07:40,046 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:07:40,046 INFO  Invoking the service to verify the user solution
2019-03-08 18:07:40,046 INFO  Time before invoking service:Fri Mar 08 18:07:40 IST 2019
2019-03-08 18:07:40,046 INFO  Initialising service address for VerifySolution
2019-03-08 18:07:40,047 INFO  Time before invoking service In SUPER:Fri Mar 08 18:07:40 IST 2019
2019-03-08 18:07:41,165 INFO  Time after invoking service In SUPER:Fri Mar 08 18:07:41 IST 2019
2019-03-08 18:07:41,165 INFO  Service responded successfully with required details
2019-03-08 18:07:41,165 INFO  Time after invoking service:Fri Mar 08 18:07:41 IST 2019
2019-03-08 18:07:41,165 INFO  User solution successfully verified
2019-03-08 18:07:41,166 INFO  Processing the response from verify service
2019-03-08 18:07:41,169 INFO  Starting to parse JSON response
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:07:41,171 INFO  Successfully parsed JSON response
2019-03-08 18:07:41,172 INFO  In the process of generating verify response in HTML
2019-03-08 18:07:41,247 INFO  Successfully generated verify response in HTML
2019-03-08 18:07:41,247 INFO  Successfully processed the response from service
2019-03-08 18:08:00,722 INFO  Setting request parameters for VerifySolution
2019-03-08 18:08:00,722 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:08:00,722 INFO  Starting to parse the user solution
2019-03-08 18:08:00,725 INFO  Displaying user solution
2019-03-08 18:08:00,764 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass fruitInfo:\r\n    __fruit_name_list=None\r\n    __fruit_price_list=None\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return fruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return fruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        pass\r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        pass\r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:08:00,764 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:08:00,764 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:08:00,764 INFO  Invoking the service to verify the user solution
2019-03-08 18:08:00,765 INFO  Time before invoking service:Fri Mar 08 18:08:00 IST 2019
2019-03-08 18:08:00,765 INFO  Initialising service address for VerifySolution
2019-03-08 18:08:00,765 INFO  Time before invoking service In SUPER:Fri Mar 08 18:08:00 IST 2019
2019-03-08 18:08:01,917 INFO  Time after invoking service In SUPER:Fri Mar 08 18:08:01 IST 2019
2019-03-08 18:08:01,918 INFO  Service responded successfully with required details
2019-03-08 18:08:01,918 INFO  Time after invoking service:Fri Mar 08 18:08:01 IST 2019
2019-03-08 18:08:01,918 INFO  User solution successfully verified
2019-03-08 18:08:01,919 INFO  Processing the response from verify service
2019-03-08 18:08:01,921 INFO  Starting to parse JSON response
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:01,924 INFO  Successfully parsed JSON response
2019-03-08 18:08:01,924 INFO  In the process of generating verify response in HTML
2019-03-08 18:08:01,992 INFO  Successfully generated verify response in HTML
2019-03-08 18:08:01,992 INFO  Successfully processed the response from service
2019-03-08 18:08:28,410 INFO  Setting request parameters for VerifySolution
2019-03-08 18:08:28,410 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:08:28,410 INFO  Starting to parse the user solution
2019-03-08 18:08:28,413 INFO  Displaying user solution
2019-03-08 18:08:28,450 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass fruitInfo:\r\n    __fruit_name_list=None\r\n    __fruit_price_list=None\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return fruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return fruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        pass\r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        pass\r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:08:28,451 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:08:28,451 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:08:28,451 INFO  Invoking the service to verify the user solution
2019-03-08 18:08:28,451 INFO  Time before invoking service:Fri Mar 08 18:08:28 IST 2019
2019-03-08 18:08:28,451 INFO  Initialising service address for VerifySolution
2019-03-08 18:08:28,452 INFO  Time before invoking service In SUPER:Fri Mar 08 18:08:28 IST 2019
2019-03-08 18:08:29,665 INFO  Time after invoking service In SUPER:Fri Mar 08 18:08:29 IST 2019
2019-03-08 18:08:29,665 INFO  Service responded successfully with required details
2019-03-08 18:08:29,666 INFO  Time after invoking service:Fri Mar 08 18:08:29 IST 2019
2019-03-08 18:08:29,666 INFO  User solution successfully verified
2019-03-08 18:08:29,666 INFO  Processing the response from verify service
2019-03-08 18:08:29,668 INFO  Starting to parse JSON response
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,669 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:08:29,670 INFO  Successfully parsed JSON response
2019-03-08 18:08:29,670 INFO  In the process of generating verify response in HTML
2019-03-08 18:08:29,736 INFO  Successfully generated verify response in HTML
2019-03-08 18:08:29,737 INFO  Successfully processed the response from service
2019-03-08 18:14:49,494 INFO  Setting request parameters for VerifySolution
2019-03-08 18:14:49,494 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:14:49,494 INFO  Starting to parse the user solution
2019-03-08 18:14:49,497 INFO  Displaying user solution
2019-03-08 18:14:49,536 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass fruitInfo:\r\n    __fruit_name_list=None\r\n    __fruit_price_list=None\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return fruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return fruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        pass\r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        pass\r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:14:49,536 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:14:49,536 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:14:49,536 INFO  Invoking the service to verify the user solution
2019-03-08 18:14:49,537 INFO  Time before invoking service:Fri Mar 08 18:14:49 IST 2019
2019-03-08 18:14:49,537 INFO  Initialising service address for VerifySolution
2019-03-08 18:14:49,537 INFO  Time before invoking service In SUPER:Fri Mar 08 18:14:49 IST 2019
2019-03-08 18:14:50,675 INFO  Time after invoking service In SUPER:Fri Mar 08 18:14:50 IST 2019
2019-03-08 18:14:50,676 INFO  Service responded successfully with required details
2019-03-08 18:14:50,676 INFO  Time after invoking service:Fri Mar 08 18:14:50 IST 2019
2019-03-08 18:14:50,676 INFO  User solution successfully verified
2019-03-08 18:14:50,677 INFO  Processing the response from verify service
2019-03-08 18:14:50,680 INFO  Starting to parse JSON response
2019-03-08 18:14:50,682 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,683 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:14:50,685 INFO  Successfully parsed JSON response
2019-03-08 18:14:50,685 INFO  In the process of generating verify response in HTML
2019-03-08 18:14:50,755 INFO  Successfully generated verify response in HTML
2019-03-08 18:14:50,755 INFO  Successfully processed the response from service
2019-03-08 18:38:33,735 INFO  Setting request parameters for VerifySolution
2019-03-08 18:38:33,735 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:38:33,735 INFO  Starting to parse the user solution
2019-03-08 18:38:33,735 INFO  Displaying user solution
2019-03-08 18:38:33,819 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)):\r\n            \r\n            \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:38:33,819 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:38:33,819 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:38:33,819 INFO  Invoking the service to verify the user solution
2019-03-08 18:38:33,820 INFO  Time before invoking service:Fri Mar 08 18:38:33 IST 2019
2019-03-08 18:38:33,820 INFO  Initialising service address for VerifySolution
2019-03-08 18:38:33,821 INFO  Time before invoking service In SUPER:Fri Mar 08 18:38:33 IST 2019
2019-03-08 18:38:34,897 INFO  Time after invoking service In SUPER:Fri Mar 08 18:38:34 IST 2019
2019-03-08 18:38:34,898 INFO  Service responded successfully with required details
2019-03-08 18:38:34,898 INFO  Time after invoking service:Fri Mar 08 18:38:34 IST 2019
2019-03-08 18:38:34,899 INFO  User solution successfully verified
2019-03-08 18:38:34,899 INFO  Processing the response from verify service
2019-03-08 18:38:34,906 INFO  Starting to parse JSON response
2019-03-08 18:38:34,907 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,908 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:34,909 INFO  Successfully parsed JSON response
2019-03-08 18:38:34,909 INFO  In the process of generating verify response in HTML
2019-03-08 18:38:34,999 INFO  Successfully generated verify response in HTML
2019-03-08 18:38:34,999 INFO  Successfully processed the response from service
2019-03-08 18:38:52,735 INFO  Setting request parameters for VerifySolution
2019-03-08 18:38:52,736 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:38:52,736 INFO  Starting to parse the user solution
2019-03-08 18:38:52,737 INFO  Displaying user solution
2019-03-08 18:38:52,779 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)):\r\n            \r\n            \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:38:52,779 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:38:52,780 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:38:52,780 INFO  Invoking the service to verify the user solution
2019-03-08 18:38:52,780 INFO  Time before invoking service:Fri Mar 08 18:38:52 IST 2019
2019-03-08 18:38:52,780 INFO  Initialising service address for VerifySolution
2019-03-08 18:38:52,781 INFO  Time before invoking service In SUPER:Fri Mar 08 18:38:52 IST 2019
2019-03-08 18:38:54,721 INFO  Time after invoking service In SUPER:Fri Mar 08 18:38:54 IST 2019
2019-03-08 18:38:54,721 INFO  Service responded successfully with required details
2019-03-08 18:38:54,721 INFO  Time after invoking service:Fri Mar 08 18:38:54 IST 2019
2019-03-08 18:38:54,721 INFO  User solution successfully verified
2019-03-08 18:38:54,722 INFO  Processing the response from verify service
2019-03-08 18:38:54,725 INFO  Starting to parse JSON response
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,727 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:38:54,728 INFO  Successfully parsed JSON response
2019-03-08 18:38:54,729 INFO  In the process of generating verify response in HTML
2019-03-08 18:38:54,797 INFO  Successfully generated verify response in HTML
2019-03-08 18:38:54,798 INFO  Successfully processed the response from service
2019-03-08 18:57:27,838 INFO  Setting request parameters for VerifySolution
2019-03-08 18:57:27,838 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:57:27,838 INFO  Starting to parse the user solution
2019-03-08 18:57:27,839 INFO  Displaying user solution
2019-03-08 18:57:27,910 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:57:27,911 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:57:27,911 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:57:27,911 INFO  Invoking the service to verify the user solution
2019-03-08 18:57:27,911 INFO  Time before invoking service:Fri Mar 08 18:57:27 IST 2019
2019-03-08 18:57:27,911 INFO  Initialising service address for VerifySolution
2019-03-08 18:57:27,911 INFO  Time before invoking service In SUPER:Fri Mar 08 18:57:27 IST 2019
2019-03-08 18:57:29,055 INFO  Time after invoking service In SUPER:Fri Mar 08 18:57:29 IST 2019
2019-03-08 18:57:29,055 INFO  Service responded successfully with required details
2019-03-08 18:57:29,055 INFO  Time after invoking service:Fri Mar 08 18:57:29 IST 2019
2019-03-08 18:57:29,055 INFO  User solution successfully verified
2019-03-08 18:57:29,056 INFO  Processing the response from verify service
2019-03-08 18:57:29,062 INFO  Starting to parse JSON response
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,064 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:57:29,065 INFO  Successfully parsed JSON response
2019-03-08 18:57:29,065 INFO  In the process of generating verify response in HTML
2019-03-08 18:57:29,146 INFO  Successfully generated verify response in HTML
2019-03-08 18:57:29,147 INFO  Successfully processed the response from service
2019-03-08 18:58:10,395 INFO  Setting request parameters for VerifySolution
2019-03-08 18:58:10,396 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:58:10,396 INFO  Starting to parse the user solution
2019-03-08 18:58:10,396 INFO  Displaying user solution
2019-03-08 18:58:10,452 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:58:10,452 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:58:10,452 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:58:10,452 INFO  Invoking the service to verify the user solution
2019-03-08 18:58:10,453 INFO  Time before invoking service:Fri Mar 08 18:58:10 IST 2019
2019-03-08 18:58:10,453 INFO  Initialising service address for VerifySolution
2019-03-08 18:58:10,453 INFO  Time before invoking service In SUPER:Fri Mar 08 18:58:10 IST 2019
2019-03-08 18:58:11,548 INFO  Time after invoking service In SUPER:Fri Mar 08 18:58:11 IST 2019
2019-03-08 18:58:11,548 INFO  Service responded successfully with required details
2019-03-08 18:58:11,549 INFO  Time after invoking service:Fri Mar 08 18:58:11 IST 2019
2019-03-08 18:58:11,549 INFO  User solution successfully verified
2019-03-08 18:58:11,549 INFO  Processing the response from verify service
2019-03-08 18:58:11,553 INFO  Starting to parse JSON response
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,555 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:58:11,556 INFO  Successfully parsed JSON response
2019-03-08 18:58:11,556 INFO  In the process of generating verify response in HTML
2019-03-08 18:58:11,635 INFO  Successfully generated verify response in HTML
2019-03-08 18:58:11,635 INFO  Successfully processed the response from service
2019-03-08 18:59:24,764 INFO  Setting request parameters for VerifySolution
2019-03-08 18:59:24,764 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:59:24,764 INFO  Starting to parse the user solution
2019-03-08 18:59:24,766 INFO  Displaying user solution
2019-03-08 18:59:24,804 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:59:24,805 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:59:24,805 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:59:24,805 INFO  Invoking the service to verify the user solution
2019-03-08 18:59:24,805 INFO  Time before invoking service:Fri Mar 08 18:59:24 IST 2019
2019-03-08 18:59:24,805 INFO  Initialising service address for VerifySolution
2019-03-08 18:59:24,806 INFO  Time before invoking service In SUPER:Fri Mar 08 18:59:24 IST 2019
2019-03-08 18:59:25,917 INFO  Time after invoking service In SUPER:Fri Mar 08 18:59:25 IST 2019
2019-03-08 18:59:25,918 INFO  Service responded successfully with required details
2019-03-08 18:59:25,918 INFO  Time after invoking service:Fri Mar 08 18:59:25 IST 2019
2019-03-08 18:59:25,918 INFO  User solution successfully verified
2019-03-08 18:59:25,918 INFO  Processing the response from verify service
2019-03-08 18:59:25,920 INFO  Starting to parse JSON response
2019-03-08 18:59:25,921 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,921 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,921 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,922 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:25,923 INFO  Successfully parsed JSON response
2019-03-08 18:59:25,923 INFO  In the process of generating verify response in HTML
2019-03-08 18:59:25,997 INFO  Successfully generated verify response in HTML
2019-03-08 18:59:25,997 INFO  Successfully processed the response from service
2019-03-08 18:59:35,564 INFO  Setting request parameters for VerifySolution
2019-03-08 18:59:35,564 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 18:59:35,564 INFO  Starting to parse the user solution
2019-03-08 18:59:35,565 INFO  Displaying user solution
2019-03-08 18:59:35,604 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.__cust_type==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 18:59:35,605 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 18:59:35,605 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 18:59:35,605 INFO  Invoking the service to verify the user solution
2019-03-08 18:59:35,605 INFO  Time before invoking service:Fri Mar 08 18:59:35 IST 2019
2019-03-08 18:59:35,605 INFO  Initialising service address for VerifySolution
2019-03-08 18:59:35,606 INFO  Time before invoking service In SUPER:Fri Mar 08 18:59:35 IST 2019
2019-03-08 18:59:36,793 INFO  Time after invoking service In SUPER:Fri Mar 08 18:59:36 IST 2019
2019-03-08 18:59:36,794 INFO  Service responded successfully with required details
2019-03-08 18:59:36,794 INFO  Time after invoking service:Fri Mar 08 18:59:36 IST 2019
2019-03-08 18:59:36,794 INFO  User solution successfully verified
2019-03-08 18:59:36,794 INFO  Processing the response from verify service
2019-03-08 18:59:36,796 INFO  Starting to parse JSON response
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 18:59:36,799 INFO  Successfully parsed JSON response
2019-03-08 18:59:36,799 INFO  In the process of generating verify response in HTML
2019-03-08 18:59:36,923 INFO  Successfully generated verify response in HTML
2019-03-08 18:59:36,923 INFO  Successfully processed the response from service
2019-03-08 19:00:21,906 INFO  Setting request parameters for VerifySolution
2019-03-08 19:00:21,906 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:00:21,906 INFO  Starting to parse the user solution
2019-03-08 19:00:21,907 INFO  Displaying user solution
2019-03-08 19:00:21,948 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type(self)==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:00:21,949 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:00:21,949 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:00:21,949 INFO  Invoking the service to verify the user solution
2019-03-08 19:00:21,949 INFO  Time before invoking service:Fri Mar 08 19:00:21 IST 2019
2019-03-08 19:00:21,949 INFO  Initialising service address for VerifySolution
2019-03-08 19:00:21,950 INFO  Time before invoking service In SUPER:Fri Mar 08 19:00:21 IST 2019
2019-03-08 19:00:23,148 INFO  Time after invoking service In SUPER:Fri Mar 08 19:00:23 IST 2019
2019-03-08 19:00:23,148 INFO  Service responded successfully with required details
2019-03-08 19:00:23,149 INFO  Time after invoking service:Fri Mar 08 19:00:23 IST 2019
2019-03-08 19:00:23,149 INFO  User solution successfully verified
2019-03-08 19:00:23,149 INFO  Processing the response from verify service
2019-03-08 19:00:23,152 INFO  Starting to parse JSON response
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,154 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:23,156 INFO  Successfully parsed JSON response
2019-03-08 19:00:23,156 INFO  In the process of generating verify response in HTML
2019-03-08 19:00:23,229 INFO  Successfully generated verify response in HTML
2019-03-08 19:00:23,229 INFO  Successfully processed the response from service
2019-03-08 19:00:41,019 INFO  Setting request parameters for VerifySolution
2019-03-08 19:00:41,019 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:00:41,019 INFO  Starting to parse the user solution
2019-03-08 19:00:41,020 INFO  Displaying user solution
2019-03-08 19:00:41,061 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type(self)==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:00:41,061 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:00:41,062 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:00:41,062 INFO  Invoking the service to verify the user solution
2019-03-08 19:00:41,062 INFO  Time before invoking service:Fri Mar 08 19:00:41 IST 2019
2019-03-08 19:00:41,063 INFO  Initialising service address for VerifySolution
2019-03-08 19:00:41,063 INFO  Time before invoking service In SUPER:Fri Mar 08 19:00:41 IST 2019
2019-03-08 19:00:42,224 INFO  Time after invoking service In SUPER:Fri Mar 08 19:00:42 IST 2019
2019-03-08 19:00:42,225 INFO  Service responded successfully with required details
2019-03-08 19:00:42,225 INFO  Time after invoking service:Fri Mar 08 19:00:42 IST 2019
2019-03-08 19:00:42,225 INFO  User solution successfully verified
2019-03-08 19:00:42,225 INFO  Processing the response from verify service
2019-03-08 19:00:42,227 INFO  Starting to parse JSON response
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:00:42,230 INFO  Successfully parsed JSON response
2019-03-08 19:00:42,230 INFO  In the process of generating verify response in HTML
2019-03-08 19:00:42,297 INFO  Successfully generated verify response in HTML
2019-03-08 19:00:42,297 INFO  Successfully processed the response from service
2019-03-08 19:01:27,079 INFO  Setting request parameters for VerifySolution
2019-03-08 19:01:27,079 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:01:27,079 INFO  Starting to parse the user solution
2019-03-08 19:01:27,079 INFO  Displaying user solution
2019-03-08 19:01:27,125 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:01:27,126 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:01:27,126 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:01:27,126 INFO  Invoking the service to verify the user solution
2019-03-08 19:01:27,126 INFO  Time before invoking service:Fri Mar 08 19:01:27 IST 2019
2019-03-08 19:01:27,126 INFO  Initialising service address for VerifySolution
2019-03-08 19:01:27,127 INFO  Time before invoking service In SUPER:Fri Mar 08 19:01:27 IST 2019
2019-03-08 19:01:28,316 INFO  Time after invoking service In SUPER:Fri Mar 08 19:01:28 IST 2019
2019-03-08 19:01:28,316 INFO  Service responded successfully with required details
2019-03-08 19:01:28,316 INFO  Time after invoking service:Fri Mar 08 19:01:28 IST 2019
2019-03-08 19:01:28,317 INFO  User solution successfully verified
2019-03-08 19:01:28,317 INFO  Processing the response from verify service
2019-03-08 19:01:28,319 INFO  Starting to parse JSON response
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,320 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:01:28,321 INFO  Successfully parsed JSON response
2019-03-08 19:01:28,321 INFO  In the process of generating verify response in HTML
2019-03-08 19:01:28,389 INFO  Successfully generated verify response in HTML
2019-03-08 19:01:28,389 INFO  Successfully processed the response from service
2019-03-08 19:02:33,917 INFO  Setting request parameters for VerifySolution
2019-03-08 19:02:33,917 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:02:33,917 INFO  Starting to parse the user solution
2019-03-08 19:02:33,918 INFO  Displaying user solution
2019-03-08 19:02:33,961 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:02:33,963 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:02:33,963 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:02:33,963 INFO  Invoking the service to verify the user solution
2019-03-08 19:02:33,963 INFO  Time before invoking service:Fri Mar 08 19:02:33 IST 2019
2019-03-08 19:02:33,964 INFO  Initialising service address for VerifySolution
2019-03-08 19:02:33,964 INFO  Time before invoking service In SUPER:Fri Mar 08 19:02:33 IST 2019
2019-03-08 19:02:35,174 INFO  Time after invoking service In SUPER:Fri Mar 08 19:02:35 IST 2019
2019-03-08 19:02:35,175 INFO  Service responded successfully with required details
2019-03-08 19:02:35,175 INFO  Time after invoking service:Fri Mar 08 19:02:35 IST 2019
2019-03-08 19:02:35,175 INFO  User solution successfully verified
2019-03-08 19:02:35,176 INFO  Processing the response from verify service
2019-03-08 19:02:35,183 INFO  Starting to parse JSON response
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,185 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:35,186 INFO  Successfully parsed JSON response
2019-03-08 19:02:35,186 INFO  In the process of generating verify response in HTML
2019-03-08 19:02:35,309 INFO  Successfully generated verify response in HTML
2019-03-08 19:02:35,309 INFO  Successfully processed the response from service
2019-03-08 19:02:49,258 INFO  Setting request parameters for VerifySolution
2019-03-08 19:02:49,258 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:02:49,258 INFO  Starting to parse the user solution
2019-03-08 19:02:49,259 INFO  Displaying user solution
2019-03-08 19:02:49,306 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:02:49,306 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:02:49,307 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:02:49,307 INFO  Invoking the service to verify the user solution
2019-03-08 19:02:49,307 INFO  Time before invoking service:Fri Mar 08 19:02:49 IST 2019
2019-03-08 19:02:49,307 INFO  Initialising service address for VerifySolution
2019-03-08 19:02:49,308 INFO  Time before invoking service In SUPER:Fri Mar 08 19:02:49 IST 2019
2019-03-08 19:02:50,531 INFO  Time after invoking service In SUPER:Fri Mar 08 19:02:50 IST 2019
2019-03-08 19:02:50,532 INFO  Service responded successfully with required details
2019-03-08 19:02:50,532 INFO  Time after invoking service:Fri Mar 08 19:02:50 IST 2019
2019-03-08 19:02:50,533 INFO  User solution successfully verified
2019-03-08 19:02:50,533 INFO  Processing the response from verify service
2019-03-08 19:02:50,535 INFO  Starting to parse JSON response
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,538 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,538 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,538 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,538 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:02:50,540 INFO  Successfully parsed JSON response
2019-03-08 19:02:50,540 INFO  In the process of generating verify response in HTML
2019-03-08 19:02:50,633 INFO  Successfully generated verify response in HTML
2019-03-08 19:02:50,634 INFO  Successfully processed the response from service
2019-03-08 19:04:02,067 INFO  Setting request parameters for VerifySolution
2019-03-08 19:04:02,067 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:04:02,067 INFO  Starting to parse the user solution
2019-03-08 19:04:02,067 INFO  Displaying user solution
2019-03-08 19:04:02,114 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.__cust_type==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.__cust_type==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.__cust_type==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:04:02,115 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:04:02,115 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:04:02,115 INFO  Invoking the service to verify the user solution
2019-03-08 19:04:02,116 INFO  Time before invoking service:Fri Mar 08 19:04:02 IST 2019
2019-03-08 19:04:02,116 INFO  Initialising service address for VerifySolution
2019-03-08 19:04:02,116 INFO  Time before invoking service In SUPER:Fri Mar 08 19:04:02 IST 2019
2019-03-08 19:04:03,337 INFO  Time after invoking service In SUPER:Fri Mar 08 19:04:03 IST 2019
2019-03-08 19:04:03,337 INFO  Service responded successfully with required details
2019-03-08 19:04:03,337 INFO  Time after invoking service:Fri Mar 08 19:04:03 IST 2019
2019-03-08 19:04:03,337 INFO  User solution successfully verified
2019-03-08 19:04:03,338 INFO  Processing the response from verify service
2019-03-08 19:04:03,342 INFO  Starting to parse JSON response
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,344 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:04:03,345 INFO  Successfully parsed JSON response
2019-03-08 19:04:03,345 INFO  In the process of generating verify response in HTML
2019-03-08 19:04:03,422 INFO  Successfully generated verify response in HTML
2019-03-08 19:04:03,423 INFO  Successfully processed the response from service
2019-03-08 19:07:23,957 INFO  Setting request parameters for VerifySolution
2019-03-08 19:07:23,957 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:07:23,957 INFO  Starting to parse the user solution
2019-03-08 19:07:23,958 INFO  Displaying user solution
2019-03-08 19:07:24,003 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:07:24,004 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:07:24,004 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:07:24,004 INFO  Invoking the service to verify the user solution
2019-03-08 19:07:24,005 INFO  Time before invoking service:Fri Mar 08 19:07:24 IST 2019
2019-03-08 19:07:24,005 INFO  Initialising service address for VerifySolution
2019-03-08 19:07:24,005 INFO  Time before invoking service In SUPER:Fri Mar 08 19:07:24 IST 2019
2019-03-08 19:07:25,234 INFO  Time after invoking service In SUPER:Fri Mar 08 19:07:25 IST 2019
2019-03-08 19:07:25,234 INFO  Service responded successfully with required details
2019-03-08 19:07:25,234 INFO  Time after invoking service:Fri Mar 08 19:07:25 IST 2019
2019-03-08 19:07:25,234 INFO  User solution successfully verified
2019-03-08 19:07:25,235 INFO  Processing the response from verify service
2019-03-08 19:07:25,242 INFO  Starting to parse JSON response
2019-03-08 19:07:25,243 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,243 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,243 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,243 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,243 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,244 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,244 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,244 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,244 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,244 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:07:25,245 INFO  Successfully parsed JSON response
2019-03-08 19:07:25,245 INFO  In the process of generating verify response in HTML
2019-03-08 19:07:25,317 INFO  Successfully generated verify response in HTML
2019-03-08 19:07:25,317 INFO  Successfully processed the response from service
2019-03-08 19:09:25,733 INFO  Setting request parameters for VerifySolution
2019-03-08 19:09:25,734 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:09:25,734 INFO  Starting to parse the user solution
2019-03-08 19:09:25,734 INFO  Displaying user solution
2019-03-08 19:09:25,778 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(Customer.self.get_customer().get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(Customer.self.get_customer().get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(Customer.self.get_customer().get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            self.__purchase_id =\"P\"+str(Purchase.__counter)\r\n            Purchase.__counter+=1\r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:09:25,778 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:09:25,778 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:09:25,778 INFO  Invoking the service to verify the user solution
2019-03-08 19:09:25,779 INFO  Time before invoking service:Fri Mar 08 19:09:25 IST 2019
2019-03-08 19:09:25,779 INFO  Initialising service address for VerifySolution
2019-03-08 19:09:25,779 INFO  Time before invoking service In SUPER:Fri Mar 08 19:09:25 IST 2019
2019-03-08 19:09:26,917 INFO  Time after invoking service In SUPER:Fri Mar 08 19:09:26 IST 2019
2019-03-08 19:09:26,917 INFO  Service responded successfully with required details
2019-03-08 19:09:26,917 INFO  Time after invoking service:Fri Mar 08 19:09:26 IST 2019
2019-03-08 19:09:26,918 INFO  User solution successfully verified
2019-03-08 19:09:26,918 INFO  Processing the response from verify service
2019-03-08 19:09:26,922 INFO  Starting to parse JSON response
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,923 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:09:26,925 INFO  Successfully parsed JSON response
2019-03-08 19:09:26,925 INFO  In the process of generating verify response in HTML
2019-03-08 19:09:26,995 INFO  Successfully generated verify response in HTML
2019-03-08 19:09:26,995 INFO  Successfully processed the response from service
2019-03-08 19:12:30,817 INFO  Setting request parameters for VerifySolution
2019-03-08 19:12:30,818 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:12:30,818 INFO  Starting to parse the user solution
2019-03-08 19:12:30,818 INFO  Displaying user solution
2019-03-08 19:12:30,860 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg==200 and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==60 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:12:30,861 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:12:30,861 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:12:30,861 INFO  Invoking the service to verify the user solution
2019-03-08 19:12:30,862 INFO  Time before invoking service:Fri Mar 08 19:12:30 IST 2019
2019-03-08 19:12:30,862 INFO  Initialising service address for VerifySolution
2019-03-08 19:12:30,862 INFO  Time before invoking service In SUPER:Fri Mar 08 19:12:30 IST 2019
2019-03-08 19:12:32,044 INFO  Time after invoking service In SUPER:Fri Mar 08 19:12:32 IST 2019
2019-03-08 19:12:32,044 INFO  Service responded successfully with required details
2019-03-08 19:12:32,045 INFO  Time after invoking service:Fri Mar 08 19:12:32 IST 2019
2019-03-08 19:12:32,045 INFO  User solution successfully verified
2019-03-08 19:12:32,045 INFO  Processing the response from verify service
2019-03-08 19:12:32,053 INFO  Starting to parse JSON response
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,055 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:12:32,057 INFO  Successfully parsed JSON response
2019-03-08 19:12:32,057 INFO  In the process of generating verify response in HTML
2019-03-08 19:12:32,131 INFO  Successfully generated verify response in HTML
2019-03-08 19:12:32,131 INFO  Successfully processed the response from service
2019-03-08 19:15:07,976 INFO  Setting request parameters for VerifySolution
2019-03-08 19:15:07,976 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:15:07,976 INFO  Starting to parse the user solution
2019-03-08 19:15:07,977 INFO  Displaying user solution
2019-03-08 19:15:08,025 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:15:08,026 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:15:08,026 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:15:08,026 INFO  Invoking the service to verify the user solution
2019-03-08 19:15:08,026 INFO  Time before invoking service:Fri Mar 08 19:15:08 IST 2019
2019-03-08 19:15:08,027 INFO  Initialising service address for VerifySolution
2019-03-08 19:15:08,027 INFO  Time before invoking service In SUPER:Fri Mar 08 19:15:08 IST 2019
2019-03-08 19:15:09,258 INFO  Time after invoking service In SUPER:Fri Mar 08 19:15:09 IST 2019
2019-03-08 19:15:09,258 INFO  Service responded successfully with required details
2019-03-08 19:15:09,259 INFO  Time after invoking service:Fri Mar 08 19:15:09 IST 2019
2019-03-08 19:15:09,259 INFO  User solution successfully verified
2019-03-08 19:15:09,259 INFO  Processing the response from verify service
2019-03-08 19:15:09,261 INFO  Starting to parse JSON response
2019-03-08 19:15:09,262 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,263 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:15:09,265 INFO  Successfully parsed JSON response
2019-03-08 19:15:09,265 INFO  In the process of generating verify response in HTML
2019-03-08 19:15:09,331 INFO  Successfully generated verify response in HTML
2019-03-08 19:15:09,331 INFO  Successfully processed the response from service
2019-03-08 19:16:56,951 INFO  Setting request parameters for VerifySolution
2019-03-08 19:16:56,951 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:16:56,951 INFO  Starting to parse the user solution
2019-03-08 19:16:56,952 INFO  Displaying user solution
2019-03-08 19:16:56,993 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:16:56,993 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:16:56,993 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:16:56,993 INFO  Invoking the service to verify the user solution
2019-03-08 19:16:56,993 INFO  Time before invoking service:Fri Mar 08 19:16:56 IST 2019
2019-03-08 19:16:56,993 INFO  Initialising service address for VerifySolution
2019-03-08 19:16:56,994 INFO  Time before invoking service In SUPER:Fri Mar 08 19:16:56 IST 2019
2019-03-08 19:16:58,235 INFO  Time after invoking service In SUPER:Fri Mar 08 19:16:58 IST 2019
2019-03-08 19:16:58,235 INFO  Service responded successfully with required details
2019-03-08 19:16:58,235 INFO  Time after invoking service:Fri Mar 08 19:16:58 IST 2019
2019-03-08 19:16:58,235 INFO  User solution successfully verified
2019-03-08 19:16:58,236 INFO  Processing the response from verify service
2019-03-08 19:16:58,238 INFO  Starting to parse JSON response
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,240 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:16:58,241 INFO  Successfully parsed JSON response
2019-03-08 19:16:58,241 INFO  In the process of generating verify response in HTML
2019-03-08 19:16:58,311 INFO  Successfully generated verify response in HTML
2019-03-08 19:16:58,311 INFO  Successfully processed the response from service
2019-03-08 19:17:23,023 INFO  Setting request parameters for VerifySolution
2019-03-08 19:17:23,023 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:17:23,023 INFO  Starting to parse the user solution
2019-03-08 19:17:23,024 INFO  Displaying user solution
2019-03-08 19:17:23,065 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:17:23,066 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:17:23,066 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:17:23,066 INFO  Invoking the service to verify the user solution
2019-03-08 19:17:23,067 INFO  Time before invoking service:Fri Mar 08 19:17:23 IST 2019
2019-03-08 19:17:23,067 INFO  Initialising service address for VerifySolution
2019-03-08 19:17:23,067 INFO  Time before invoking service In SUPER:Fri Mar 08 19:17:23 IST 2019
2019-03-08 19:17:24,254 INFO  Time after invoking service In SUPER:Fri Mar 08 19:17:24 IST 2019
2019-03-08 19:17:24,255 INFO  Service responded successfully with required details
2019-03-08 19:17:24,255 INFO  Time after invoking service:Fri Mar 08 19:17:24 IST 2019
2019-03-08 19:17:24,255 INFO  User solution successfully verified
2019-03-08 19:17:24,256 INFO  Processing the response from verify service
2019-03-08 19:17:24,265 INFO  Starting to parse JSON response
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:17:24,269 INFO  Successfully parsed JSON response
2019-03-08 19:17:24,269 INFO  In the process of generating verify response in HTML
2019-03-08 19:17:24,354 INFO  Successfully generated verify response in HTML
2019-03-08 19:17:24,354 INFO  Successfully processed the response from service
2019-03-08 19:18:07,744 INFO  Setting request parameters for VerifySolution
2019-03-08 19:18:07,744 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:18:07,744 INFO  Starting to parse the user solution
2019-03-08 19:18:07,745 INFO  Displaying user solution
2019-03-08 19:18:07,786 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        for i in range(0,len(FruitInfo.__fruit_name_list)):\r\n            if(FruitInfo.__fruit_name_list[i]==fruit_name):\r\n                return FruitInfo.get_fruit_price_list()[i]\r\n            else:\r\n                return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:18:07,787 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:18:07,787 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:18:07,787 INFO  Invoking the service to verify the user solution
2019-03-08 19:18:07,787 INFO  Time before invoking service:Fri Mar 08 19:18:07 IST 2019
2019-03-08 19:18:07,787 INFO  Initialising service address for VerifySolution
2019-03-08 19:18:07,788 INFO  Time before invoking service In SUPER:Fri Mar 08 19:18:07 IST 2019
2019-03-08 19:18:09,041 INFO  Time after invoking service In SUPER:Fri Mar 08 19:18:09 IST 2019
2019-03-08 19:18:09,041 INFO  Service responded successfully with required details
2019-03-08 19:18:09,041 INFO  Time after invoking service:Fri Mar 08 19:18:09 IST 2019
2019-03-08 19:18:09,041 INFO  User solution successfully verified
2019-03-08 19:18:09,041 INFO  Processing the response from verify service
2019-03-08 19:18:09,043 INFO  Starting to parse JSON response
2019-03-08 19:18:09,044 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,044 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,044 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,044 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,045 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,045 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,045 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,045 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,045 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:09,046 INFO  Successfully parsed JSON response
2019-03-08 19:18:09,047 INFO  In the process of generating verify response in HTML
2019-03-08 19:18:09,114 INFO  Successfully generated verify response in HTML
2019-03-08 19:18:09,114 INFO  Successfully processed the response from service
2019-03-08 19:18:52,704 INFO  Setting request parameters for VerifySolution
2019-03-08 19:18:52,704 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:18:52,704 INFO  Starting to parse the user solution
2019-03-08 19:18:52,704 INFO  Displaying user solution
2019-03-08 19:18:52,742 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        if fruit_name in FruitInfo.__fruit_name_list:\r\n            indx=FruitInfo.__fruit_name_list.index(fruit_name)\r\n            return FruitInfo.__fruit_price_list[indx]\r\n        else:\r\n            return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:18:52,743 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:18:52,743 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:18:52,743 INFO  Invoking the service to verify the user solution
2019-03-08 19:18:52,743 INFO  Time before invoking service:Fri Mar 08 19:18:52 IST 2019
2019-03-08 19:18:52,743 INFO  Initialising service address for VerifySolution
2019-03-08 19:18:52,744 INFO  Time before invoking service In SUPER:Fri Mar 08 19:18:52 IST 2019
2019-03-08 19:18:53,894 INFO  Time after invoking service In SUPER:Fri Mar 08 19:18:53 IST 2019
2019-03-08 19:18:53,895 INFO  Service responded successfully with required details
2019-03-08 19:18:53,895 INFO  Time after invoking service:Fri Mar 08 19:18:53 IST 2019
2019-03-08 19:18:53,895 INFO  User solution successfully verified
2019-03-08 19:18:53,896 INFO  Processing the response from verify service
2019-03-08 19:18:53,898 INFO  Starting to parse JSON response
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,899 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:18:53,900 INFO  Successfully parsed JSON response
2019-03-08 19:18:53,901 INFO  In the process of generating verify response in HTML
2019-03-08 19:18:53,973 INFO  Successfully generated verify response in HTML
2019-03-08 19:18:53,973 INFO  Successfully processed the response from service
2019-03-08 19:19:23,081 INFO  Setting request parameters for VerifySolution
2019-03-08 19:19:23,081 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:19:23,081 INFO  Starting to parse the user solution
2019-03-08 19:19:23,082 INFO  Displaying user solution
2019-03-08 19:19:23,132 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        if fruit_name in FruitInfo.__fruit_name_list:\r\n            indx=FruitInfo.__fruit_name_list.index(fruit_name)\r\n            return FruitInfo.__fruit_price_list[indx]\r\n        else:\r\n            return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) \r\n               and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:19:23,132 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:19:23,132 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:19:23,132 INFO  Invoking the service to verify the user solution
2019-03-08 19:19:23,133 INFO  Time before invoking service:Fri Mar 08 19:19:23 IST 2019
2019-03-08 19:19:23,133 INFO  Initialising service address for VerifySolution
2019-03-08 19:19:23,133 INFO  Time before invoking service In SUPER:Fri Mar 08 19:19:23 IST 2019
2019-03-08 19:19:24,336 INFO  Time after invoking service In SUPER:Fri Mar 08 19:19:24 IST 2019
2019-03-08 19:19:24,336 INFO  Service responded successfully with required details
2019-03-08 19:19:24,336 INFO  Time after invoking service:Fri Mar 08 19:19:24 IST 2019
2019-03-08 19:19:24,336 INFO  User solution successfully verified
2019-03-08 19:19:24,337 INFO  Processing the response from verify service
2019-03-08 19:19:24,339 INFO  Starting to parse JSON response
2019-03-08 19:19:24,340 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,341 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:24,342 INFO  Successfully parsed JSON response
2019-03-08 19:19:24,342 INFO  In the process of generating verify response in HTML
2019-03-08 19:19:24,410 INFO  Successfully generated verify response in HTML
2019-03-08 19:19:24,410 INFO  Successfully processed the response from service
2019-03-08 19:19:37,885 INFO  Setting request parameters for VerifySolution
2019-03-08 19:19:37,885 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:19:37,885 INFO  Starting to parse the user solution
2019-03-08 19:19:37,886 INFO  Displaying user solution
2019-03-08 19:19:37,925 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        if fruit_name in FruitInfo.__fruit_name_list:\r\n            indx=FruitInfo.__fruit_name_list.index(fruit_name)\r\n            return FruitInfo.__fruit_price_list[indx]\r\n        else:\r\n            return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) \r\n               and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\r\n                   \"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:19:37,926 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:19:37,926 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:19:37,926 INFO  Invoking the service to verify the user solution
2019-03-08 19:19:37,927 INFO  Time before invoking service:Fri Mar 08 19:19:37 IST 2019
2019-03-08 19:19:37,927 INFO  Initialising service address for VerifySolution
2019-03-08 19:19:37,927 INFO  Time before invoking service In SUPER:Fri Mar 08 19:19:37 IST 2019
2019-03-08 19:19:39,092 INFO  Time after invoking service In SUPER:Fri Mar 08 19:19:39 IST 2019
2019-03-08 19:19:39,092 INFO  Service responded successfully with required details
2019-03-08 19:19:39,092 INFO  Time after invoking service:Fri Mar 08 19:19:39 IST 2019
2019-03-08 19:19:39,092 INFO  User solution successfully verified
2019-03-08 19:19:39,092 INFO  Processing the response from verify service
2019-03-08 19:19:39,094 INFO  Starting to parse JSON response
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,095 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:19:39,098 INFO  Successfully parsed JSON response
2019-03-08 19:19:39,099 INFO  In the process of generating verify response in HTML
2019-03-08 19:19:39,167 INFO  Successfully generated verify response in HTML
2019-03-08 19:19:39,167 INFO  Successfully processed the response from service
2019-03-08 19:20:01,716 INFO  Setting request parameters for VerifySolution
2019-03-08 19:20:01,716 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:20:01,716 INFO  Starting to parse the user solution
2019-03-08 19:20:01,720 INFO  Displaying user solution
2019-03-08 19:20:01,757 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-25\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nclass FruitInfo:\r\n    __fruit_name_list=[\"Apple\",\"Guava\",\"Orange\",\"Grape\",\"Sweet Lime\"]\r\n    __fruit_price_list=[200,80,70,110,60]\r\n    \r\n    @staticmethod\r\n    def get_fruit_name_list():\r\n        return FruitInfo.__fruit_name_list\r\n\r\n    @staticmethod\r\n    def get_fruit_price_list():\r\n        return FruitInfo.__fruit_price_list\r\n    @staticmethod\r\n    def get_fruit_price(fruit_name):\r\n        if fruit_name in FruitInfo.__fruit_name_list:\r\n            indx=FruitInfo.__fruit_name_list.index(fruit_name)\r\n            return FruitInfo.__fruit_price_list[indx]\r\n        else:\r\n            return -1\r\n                \r\n        \r\n        \r\n        \r\n        \r\nclass Purchase:\r\n    __counter=101\r\n    def __init__(self,customer,fruit_name,quantity):\r\n        self.__purchase_id=None\r\n        self.__customer = customer\r\n        self.__fruit_name = fruit_name\r\n        self.__quantity = quantity\r\n        self.__purchase_id ='P'+str(Purchase.__counter)\r\n        Purchase.__counter+=1\r\n    def get_purchase_id(self):\r\n        return self.__purchase_id\r\n\r\n\r\n    def get_customer(self):\r\n        return self.__customer\r\n\r\n\r\n    def get_quantity(self):\r\n        return self.__quantity\r\n\r\n    def calculate_price(self):\r\n        if(FruitInfo.get_fruit_price(self.__fruit_name)!=-1):\r\n            price_per_kg = FruitInfo.get_fruit_price(self.__fruit_name)\r\n            price = price_per_kg*self.get_quantity()\r\n            if(price_per_kg  == max(FruitInfo.get_fruit_price_list()) \r\n               and self.get_quantity()>1):\r\n                price = 0.98*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            elif(price_per_kg==min(FruitInfo.get_fruit_price_list()) \r\n                 and self.get_quantity()>=5):\r\n                price = 0.95*price\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            else:\r\n                if(self.__customer.get_cust_type()==\"wholesale\"):\r\n                    price = 0.9*price\r\n            \r\n            return price        \r\n        else:\r\n            return -1\r\n                    \r\n    \r\n    \r\n    \r\nclass Customer:\r\n    def __init__(self,customer_name,cust_type):\r\n        self.__customer_name=customer_name\r\n        self.__cust_type=cust_type\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n\r\n    def get_cust_type(self):\r\n        return self.__cust_type\r\n","asgnmtId":"25","SolutionFileName":"Assign25.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:20:01,758 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:20:01,758 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:20:01,758 INFO  Invoking the service to verify the user solution
2019-03-08 19:20:01,759 INFO  Time before invoking service:Fri Mar 08 19:20:01 IST 2019
2019-03-08 19:20:01,759 INFO  Initialising service address for VerifySolution
2019-03-08 19:20:01,760 INFO  Time before invoking service In SUPER:Fri Mar 08 19:20:01 IST 2019
2019-03-08 19:20:02,885 INFO  Time after invoking service In SUPER:Fri Mar 08 19:20:02 IST 2019
2019-03-08 19:20:02,885 INFO  Service responded successfully with required details
2019-03-08 19:20:02,885 INFO  Time after invoking service:Fri Mar 08 19:20:02 IST 2019
2019-03-08 19:20:02,886 INFO  User solution successfully verified
2019-03-08 19:20:02,886 INFO  Processing the response from verify service
2019-03-08 19:20:02,888 INFO  Starting to parse JSON response
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:20:02,891 INFO  Successfully parsed JSON response
2019-03-08 19:20:02,891 INFO  In the process of generating verify response in HTML
2019-03-08 19:20:02,965 INFO  Successfully generated verify response in HTML
2019-03-08 19:20:02,965 INFO  Successfully processed the response from service
2019-03-08 19:20:07,926 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 19:20:07,927 INFO  Displaying user solution
2019-03-08 19:20:07,934 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 19:20:07,934 INFO  Invoking the service to submit the user solution
2019-03-08 19:20:07,934 INFO  Initialising service address for Submit
2019-03-08 19:20:07,935 INFO  Time before invoking service In SUPER:Fri Mar 08 19:20:07 IST 2019
2019-03-08 19:20:08,156 INFO  Time after invoking service In SUPER:Fri Mar 08 19:20:08 IST 2019
2019-03-08 19:20:08,156 INFO  Service responded successfully with required details
2019-03-08 19:20:08,156 INFO  User solution successfully submitted
2019-03-08 19:20:08,157 INFO  Displaying submission status
2019-03-08 19:20:08,157 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 19:29:33,274 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-08 19:34:35,431 INFO  Setting request parameters for VerifySolution
2019-03-08 19:34:35,431 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 19:34:35,431 INFO  Starting to parse the user solution
2019-03-08 19:34:35,432 INFO  Displaying user solution
2019-03-08 19:34:35,491 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input)\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        pass\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n        pass\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        pass\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        pass\r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    pass\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 19:34:35,492 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 19:34:35,492 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 19:34:35,492 INFO  Invoking the service to verify the user solution
2019-03-08 19:34:35,493 INFO  Time before invoking service:Fri Mar 08 19:34:35 IST 2019
2019-03-08 19:34:35,493 INFO  Initialising service address for VerifySolution
2019-03-08 19:34:35,493 INFO  Time before invoking service In SUPER:Fri Mar 08 19:34:35 IST 2019
2019-03-08 19:34:36,783 INFO  Time after invoking service In SUPER:Fri Mar 08 19:34:36 IST 2019
2019-03-08 19:34:36,783 INFO  Service responded successfully with required details
2019-03-08 19:34:36,783 INFO  Time after invoking service:Fri Mar 08 19:34:36 IST 2019
2019-03-08 19:34:36,783 INFO  User solution successfully verified
2019-03-08 19:34:36,784 INFO  Processing the response from verify service
2019-03-08 19:34:36,791 INFO  Starting to parse JSON response
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,795 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 19:34:36,796 INFO  Successfully parsed JSON response
2019-03-08 19:34:36,796 INFO  In the process of generating verify response in HTML
2019-03-08 19:34:36,882 INFO  Successfully generated verify response in HTML
2019-03-08 19:34:36,882 INFO  Successfully processed the response from service
2019-03-08 20:00:18,106 INFO  Setting request parameters for VerifySolution
2019-03-08 20:00:18,106 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:00:18,106 INFO  Starting to parse the user solution
2019-03-08 20:00:18,106 INFO  Displaying user solution
2019-03-08 20:00:18,200 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return True\r\n            else:\r\n                return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for i in list_of_games:\r\n            for key,value in ThemePark.dict_of_games.items():\r\n                if(i==key):\r\n                  ThemePark.get_amount(i)\r\n        \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    pass\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:00:18,200 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:00:18,200 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:00:18,200 INFO  Invoking the service to verify the user solution
2019-03-08 20:00:18,200 INFO  Time before invoking service:Fri Mar 08 20:00:18 IST 2019
2019-03-08 20:00:18,200 INFO  Initialising service address for VerifySolution
2019-03-08 20:00:18,200 INFO  Time before invoking service In SUPER:Fri Mar 08 20:00:18 IST 2019
2019-03-08 20:00:19,560 INFO  Time after invoking service In SUPER:Fri Mar 08 20:00:19 IST 2019
2019-03-08 20:00:19,560 INFO  Service responded successfully with required details
2019-03-08 20:00:19,560 INFO  Time after invoking service:Fri Mar 08 20:00:19 IST 2019
2019-03-08 20:00:19,560 INFO  User solution successfully verified
2019-03-08 20:00:19,560 INFO  Processing the response from verify service
2019-03-08 20:00:19,576 INFO  Starting to parse JSON response
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:00:19,576 INFO  Successfully parsed JSON response
2019-03-08 20:00:19,576 INFO  In the process of generating verify response in HTML
2019-03-08 20:00:19,654 INFO  Successfully generated verify response in HTML
2019-03-08 20:00:19,654 INFO  Successfully processed the response from service
2019-03-08 20:01:14,810 INFO  Setting request parameters for VerifySolution
2019-03-08 20:01:14,810 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:01:14,810 INFO  Starting to parse the user solution
2019-03-08 20:01:14,826 INFO  Displaying user solution
2019-03-08 20:01:14,873 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return True\r\n            else:\r\n                return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for i in list_of_games:\r\n            for key,value in ThemePark.dict_of_games.items():\r\n                if(i==key):\r\n                  ThemePark.get_amount(i)\r\n        \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    pass\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:01:14,873 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:01:14,873 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:01:14,873 INFO  Invoking the service to verify the user solution
2019-03-08 20:01:14,873 INFO  Time before invoking service:Fri Mar 08 20:01:14 IST 2019
2019-03-08 20:01:14,873 INFO  Initialising service address for VerifySolution
2019-03-08 20:01:14,873 INFO  Time before invoking service In SUPER:Fri Mar 08 20:01:14 IST 2019
2019-03-08 20:01:16,077 INFO  Time after invoking service In SUPER:Fri Mar 08 20:01:16 IST 2019
2019-03-08 20:01:16,077 INFO  Service responded successfully with required details
2019-03-08 20:01:16,077 INFO  Time after invoking service:Fri Mar 08 20:01:16 IST 2019
2019-03-08 20:01:16,077 INFO  User solution successfully verified
2019-03-08 20:01:16,077 INFO  Processing the response from verify service
2019-03-08 20:01:16,077 INFO  Starting to parse JSON response
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:01:16,077 INFO  Successfully parsed JSON response
2019-03-08 20:01:16,077 INFO  In the process of generating verify response in HTML
2019-03-08 20:01:16,155 INFO  Successfully generated verify response in HTML
2019-03-08 20:01:16,155 INFO  Successfully processed the response from service
2019-03-08 20:02:35,423 INFO  Setting request parameters for VerifySolution
2019-03-08 20:02:35,423 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:02:35,423 INFO  Starting to parse the user solution
2019-03-08 20:02:35,423 INFO  Displaying user solution
2019-03-08 20:02:35,469 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return True\r\n            else:\r\n                return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    pass\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:02:35,469 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:02:35,469 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:02:35,469 INFO  Invoking the service to verify the user solution
2019-03-08 20:02:35,469 INFO  Time before invoking service:Fri Mar 08 20:02:35 IST 2019
2019-03-08 20:02:35,469 INFO  Initialising service address for VerifySolution
2019-03-08 20:02:35,469 INFO  Time before invoking service In SUPER:Fri Mar 08 20:02:35 IST 2019
2019-03-08 20:02:36,859 INFO  Time after invoking service In SUPER:Fri Mar 08 20:02:36 IST 2019
2019-03-08 20:02:36,859 INFO  Service responded successfully with required details
2019-03-08 20:02:36,859 INFO  Time after invoking service:Fri Mar 08 20:02:36 IST 2019
2019-03-08 20:02:36,859 INFO  User solution successfully verified
2019-03-08 20:02:36,859 INFO  Processing the response from verify service
2019-03-08 20:02:36,859 INFO  Starting to parse JSON response
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:02:36,859 INFO  Successfully parsed JSON response
2019-03-08 20:02:36,859 INFO  In the process of generating verify response in HTML
2019-03-08 20:02:36,938 INFO  Successfully generated verify response in HTML
2019-03-08 20:02:36,938 INFO  Successfully processed the response from service
2019-03-08 20:03:37,532 INFO  Setting request parameters for VerifySolution
2019-03-08 20:03:37,548 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:03:37,548 INFO  Starting to parse the user solution
2019-03-08 20:03:37,548 INFO  Displaying user solution
2019-03-08 20:03:37,579 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return True\r\n            else:\r\n                return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:03:37,594 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:03:37,594 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:03:37,594 INFO  Invoking the service to verify the user solution
2019-03-08 20:03:37,594 INFO  Time before invoking service:Fri Mar 08 20:03:37 IST 2019
2019-03-08 20:03:37,594 INFO  Initialising service address for VerifySolution
2019-03-08 20:03:37,594 INFO  Time before invoking service In SUPER:Fri Mar 08 20:03:37 IST 2019
2019-03-08 20:03:38,923 INFO  Time after invoking service In SUPER:Fri Mar 08 20:03:38 IST 2019
2019-03-08 20:03:38,923 INFO  Service responded successfully with required details
2019-03-08 20:03:38,923 INFO  Time after invoking service:Fri Mar 08 20:03:38 IST 2019
2019-03-08 20:03:38,923 INFO  User solution successfully verified
2019-03-08 20:03:38,923 INFO  Processing the response from verify service
2019-03-08 20:03:38,938 INFO  Starting to parse JSON response
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:03:38,938 INFO  Successfully parsed JSON response
2019-03-08 20:03:38,938 INFO  In the process of generating verify response in HTML
2019-03-08 20:03:39,001 INFO  Successfully generated verify response in HTML
2019-03-08 20:03:39,001 INFO  Successfully processed the response from service
2019-03-08 20:04:33,923 INFO  Setting request parameters for VerifySolution
2019-03-08 20:04:33,923 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:04:33,923 INFO  Starting to parse the user solution
2019-03-08 20:04:33,923 INFO  Displaying user solution
2019-03-08 20:04:33,970 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:04:33,970 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:04:33,970 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:04:33,970 INFO  Invoking the service to verify the user solution
2019-03-08 20:04:33,970 INFO  Time before invoking service:Fri Mar 08 20:04:33 IST 2019
2019-03-08 20:04:33,970 INFO  Initialising service address for VerifySolution
2019-03-08 20:04:33,970 INFO  Time before invoking service In SUPER:Fri Mar 08 20:04:33 IST 2019
2019-03-08 20:04:35,314 INFO  Time after invoking service In SUPER:Fri Mar 08 20:04:35 IST 2019
2019-03-08 20:04:35,314 INFO  Service responded successfully with required details
2019-03-08 20:04:35,314 INFO  Time after invoking service:Fri Mar 08 20:04:35 IST 2019
2019-03-08 20:04:35,314 INFO  User solution successfully verified
2019-03-08 20:04:35,314 INFO  Processing the response from verify service
2019-03-08 20:04:35,314 INFO  Starting to parse JSON response
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:04:35,329 INFO  Successfully parsed JSON response
2019-03-08 20:04:35,329 INFO  In the process of generating verify response in HTML
2019-03-08 20:04:35,395 INFO  Successfully generated verify response in HTML
2019-03-08 20:04:35,395 INFO  Successfully processed the response from service
2019-03-08 20:05:38,863 INFO  Setting request parameters for VerifySolution
2019-03-08 20:05:38,863 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:05:38,863 INFO  Starting to parse the user solution
2019-03-08 20:05:38,863 INFO  Displaying user solution
2019-03-08 20:05:38,911 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total ticket amount and assign it to attribute, ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:05:38,911 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:05:38,911 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:05:38,911 INFO  Invoking the service to verify the user solution
2019-03-08 20:05:38,927 INFO  Time before invoking service:Fri Mar 08 20:05:38 IST 2019
2019-03-08 20:05:38,927 INFO  Initialising service address for VerifySolution
2019-03-08 20:05:38,927 INFO  Time before invoking service In SUPER:Fri Mar 08 20:05:38 IST 2019
2019-03-08 20:05:40,267 INFO  Time after invoking service In SUPER:Fri Mar 08 20:05:40 IST 2019
2019-03-08 20:05:40,267 INFO  Service responded successfully with required details
2019-03-08 20:05:40,267 INFO  Time after invoking service:Fri Mar 08 20:05:40 IST 2019
2019-03-08 20:05:40,267 INFO  User solution successfully verified
2019-03-08 20:05:40,267 INFO  Processing the response from verify service
2019-03-08 20:05:40,267 INFO  Starting to parse JSON response
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:05:40,267 INFO  Successfully parsed JSON response
2019-03-08 20:05:40,267 INFO  In the process of generating verify response in HTML
2019-03-08 20:05:40,345 INFO  Successfully generated verify response in HTML
2019-03-08 20:05:40,345 INFO  Successfully processed the response from service
2019-03-08 20:06:09,910 INFO  Setting request parameters for VerifySolution
2019-03-08 20:06:09,910 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:06:09,910 INFO  Starting to parse the user solution
2019-03-08 20:06:09,910 INFO  Displaying user solution
2019-03-08 20:06:09,957 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total \r\n        ticket amount and assign it to attribute, \r\n        ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:06:09,957 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:06:09,957 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:06:09,957 INFO  Invoking the service to verify the user solution
2019-03-08 20:06:09,957 INFO  Time before invoking service:Fri Mar 08 20:06:09 IST 2019
2019-03-08 20:06:09,957 INFO  Initialising service address for VerifySolution
2019-03-08 20:06:09,957 INFO  Time before invoking service In SUPER:Fri Mar 08 20:06:09 IST 2019
2019-03-08 20:06:14,300 INFO  Time after invoking service In SUPER:Fri Mar 08 20:06:14 IST 2019
2019-03-08 20:06:14,300 INFO  Service responded successfully with required details
2019-03-08 20:06:14,300 INFO  Time after invoking service:Fri Mar 08 20:06:14 IST 2019
2019-03-08 20:06:14,300 INFO  User solution successfully verified
2019-03-08 20:06:14,300 INFO  Processing the response from verify service
2019-03-08 20:06:14,315 INFO  Starting to parse JSON response
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:06:14,315 INFO  Successfully parsed JSON response
2019-03-08 20:06:14,315 INFO  In the process of generating verify response in HTML
2019-03-08 20:06:14,393 INFO  Successfully generated verify response in HTML
2019-03-08 20:06:14,393 INFO  Successfully processed the response from service
2019-03-08 20:09:27,068 INFO  Setting request parameters for VerifySolution
2019-03-08 20:09:27,068 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:09:27,068 INFO  Starting to parse the user solution
2019-03-08 20:09:27,068 INFO  Displaying user solution
2019-03-08 20:09:27,130 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for game in list_of_games:\r\n            if ThemePark.validate_game(game):\r\n                self.__ticket_amount += ThemePark.dict_of_games[game][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total \r\n        ticket amount and assign it to attribute, \r\n        ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:09:27,130 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:09:27,130 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:09:27,130 INFO  Invoking the service to verify the user solution
2019-03-08 20:09:27,130 INFO  Time before invoking service:Fri Mar 08 20:09:27 IST 2019
2019-03-08 20:09:27,130 INFO  Initialising service address for VerifySolution
2019-03-08 20:09:27,130 INFO  Time before invoking service In SUPER:Fri Mar 08 20:09:27 IST 2019
2019-03-08 20:09:28,427 INFO  Time after invoking service In SUPER:Fri Mar 08 20:09:28 IST 2019
2019-03-08 20:09:28,443 INFO  Service responded successfully with required details
2019-03-08 20:09:28,443 INFO  Time after invoking service:Fri Mar 08 20:09:28 IST 2019
2019-03-08 20:09:28,443 INFO  User solution successfully verified
2019-03-08 20:09:28,443 INFO  Processing the response from verify service
2019-03-08 20:09:28,443 INFO  Starting to parse JSON response
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:28,443 INFO  Successfully parsed JSON response
2019-03-08 20:09:28,443 INFO  In the process of generating verify response in HTML
2019-03-08 20:09:28,521 INFO  Successfully generated verify response in HTML
2019-03-08 20:09:28,521 INFO  Successfully processed the response from service
2019-03-08 20:09:33,536 INFO  Setting request parameters for VerifySolution
2019-03-08 20:09:33,536 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:09:33,536 INFO  Starting to parse the user solution
2019-03-08 20:09:33,536 INFO  Displaying user solution
2019-03-08 20:09:33,582 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for i in list_of_games:\r\n            if ThemePark.validate_game(i):\r\n                self.__ticket_amount += ThemePark.dict_of_games[i][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total \r\n        ticket amount and assign it to attribute, \r\n        ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for game in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(game)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:09:33,582 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:09:33,582 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:09:33,582 INFO  Invoking the service to verify the user solution
2019-03-08 20:09:33,582 INFO  Time before invoking service:Fri Mar 08 20:09:33 IST 2019
2019-03-08 20:09:33,582 INFO  Initialising service address for VerifySolution
2019-03-08 20:09:33,582 INFO  Time before invoking service In SUPER:Fri Mar 08 20:09:33 IST 2019
2019-03-08 20:09:34,912 INFO  Time after invoking service In SUPER:Fri Mar 08 20:09:34 IST 2019
2019-03-08 20:09:34,912 INFO  Service responded successfully with required details
2019-03-08 20:09:34,912 INFO  Time after invoking service:Fri Mar 08 20:09:34 IST 2019
2019-03-08 20:09:34,912 INFO  User solution successfully verified
2019-03-08 20:09:34,912 INFO  Processing the response from verify service
2019-03-08 20:09:34,912 INFO  Starting to parse JSON response
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:09:34,912 INFO  Successfully parsed JSON response
2019-03-08 20:09:34,912 INFO  In the process of generating verify response in HTML
2019-03-08 20:09:34,990 INFO  Successfully generated verify response in HTML
2019-03-08 20:09:34,990 INFO  Successfully processed the response from service
2019-03-08 20:14:13,165 INFO  Setting request parameters for VerifySolution
2019-03-08 20:14:13,165 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:14:13,165 INFO  Starting to parse the user solution
2019-03-08 20:14:13,165 INFO  Displaying user solution
2019-03-08 20:14:13,227 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for i in list_of_games:\r\n            if ThemePark.validate_game(i):\r\n                self.__ticket_amount += ThemePark.dict_of_games[i][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total \r\n        ticket amount and assign it to attribute, \r\n        ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for i in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(i)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:14:13,227 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:14:13,227 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:14:13,227 INFO  Invoking the service to verify the user solution
2019-03-08 20:14:13,227 INFO  Time before invoking service:Fri Mar 08 20:14:13 IST 2019
2019-03-08 20:14:13,227 INFO  Initialising service address for VerifySolution
2019-03-08 20:14:13,227 INFO  Time before invoking service In SUPER:Fri Mar 08 20:14:13 IST 2019
2019-03-08 20:14:15,510 INFO  Time after invoking service In SUPER:Fri Mar 08 20:14:15 IST 2019
2019-03-08 20:14:15,510 INFO  Service responded successfully with required details
2019-03-08 20:14:15,510 INFO  Time after invoking service:Fri Mar 08 20:14:15 IST 2019
2019-03-08 20:14:15,510 INFO  User solution successfully verified
2019-03-08 20:14:15,510 INFO  Processing the response from verify service
2019-03-08 20:14:15,525 INFO  Starting to parse JSON response
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:14:15,525 INFO  Successfully parsed JSON response
2019-03-08 20:14:15,525 INFO  In the process of generating verify response in HTML
2019-03-08 20:14:15,603 INFO  Successfully generated verify response in HTML
2019-03-08 20:14:15,603 INFO  Successfully processed the response from service
2019-03-08 20:14:23,259 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:14:23,259 INFO  Displaying user solution
2019-03-08 20:14:23,274 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:14:23,274 INFO  Invoking the service to submit the user solution
2019-03-08 20:14:23,274 INFO  Initialising service address for Submit
2019-03-08 20:14:23,274 INFO  Time before invoking service In SUPER:Fri Mar 08 20:14:23 IST 2019
2019-03-08 20:14:23,792 INFO  Time after invoking service In SUPER:Fri Mar 08 20:14:23 IST 2019
2019-03-08 20:14:23,792 INFO  Service responded successfully with required details
2019-03-08 20:14:23,792 INFO  User solution successfully submitted
2019-03-08 20:14:23,792 INFO  Displaying submission status
2019-03-08 20:14:23,792 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:14:25,977 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:14:25,977 INFO  Displaying user solution
2019-03-08 20:14:25,993 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:14:25,993 INFO  Invoking the service to submit the user solution
2019-03-08 20:14:25,993 INFO  Initialising service address for Submit
2019-03-08 20:14:25,993 INFO  Time before invoking service In SUPER:Fri Mar 08 20:14:25 IST 2019
2019-03-08 20:14:26,165 INFO  Time after invoking service In SUPER:Fri Mar 08 20:14:26 IST 2019
2019-03-08 20:14:26,165 INFO  Service responded successfully with required details
2019-03-08 20:14:26,165 INFO  User solution successfully submitted
2019-03-08 20:14:26,165 INFO  Displaying submission status
2019-03-08 20:14:26,165 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:14:28,792 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:14:28,792 INFO  Displaying user solution
2019-03-08 20:14:28,807 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:14:28,807 INFO  Invoking the service to submit the user solution
2019-03-08 20:14:28,807 INFO  Initialising service address for Submit
2019-03-08 20:14:28,807 INFO  Time before invoking service In SUPER:Fri Mar 08 20:14:28 IST 2019
2019-03-08 20:14:29,071 INFO  Time after invoking service In SUPER:Fri Mar 08 20:14:29 IST 2019
2019-03-08 20:14:29,071 INFO  Service responded successfully with required details
2019-03-08 20:14:29,071 INFO  User solution successfully submitted
2019-03-08 20:14:29,071 INFO  Displaying submission status
2019-03-08 20:14:29,071 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:17:24,124 INFO  Setting request parameters for VerifySolution
2019-03-08 20:17:24,124 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:17:24,124 INFO  Starting to parse the user solution
2019-03-08 20:17:24,124 INFO  Displaying user solution
2019-03-08 20:17:24,202 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-20\r\n'''\r\nCreated on Mar 7, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Applicant:\r\n    __application_dict=None\r\n    __applicant_id_count=1000\r\n    def __init__(self,applicant_name):\r\n        self.__applicant_id = None\r\n        self.__applicant_name = applicant_name\r\n        self.__job_band = None\r\n    \r\n    def generate_applicant_id(self):\r\n        Applicant.__applicant_id_count+=1\r\n        self.__applicant_id=Applicant.__applicant_id_count\r\n        \r\n    \r\n    def apply_for_job(self,job_band):\r\n        if Applicant.get_application_dict()[job_band]>=5:\r\n            return -1\r\n        else:\r\n            Applicant.get_application_dict()[job_band]+=1\r\n            self.generate_applicant_id()\r\n            self.__job_band=job_band\r\n\r\n    @staticmethod\r\n    def get_application_dict():\r\n        return Applicant.__application_dict\r\n\r\n    def get_applicant_id(self):\r\n        return self.__applicant_id\r\n\r\n\r\n    def get_applicant_name(self):\r\n        return self.__applicant_name\r\n\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n","asgnmtId":"20","SolutionFileName":"Assign20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:17:24,202 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:17:24,202 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:17:24,202 INFO  Invoking the service to verify the user solution
2019-03-08 20:17:24,202 INFO  Time before invoking service:Fri Mar 08 20:17:24 IST 2019
2019-03-08 20:17:24,202 INFO  Initialising service address for VerifySolution
2019-03-08 20:17:24,202 INFO  Time before invoking service In SUPER:Fri Mar 08 20:17:24 IST 2019
2019-03-08 20:17:25,183 INFO  Time after invoking service In SUPER:Fri Mar 08 20:17:25 IST 2019
2019-03-08 20:17:25,183 INFO  Service responded successfully with required details
2019-03-08 20:17:25,183 INFO  Time after invoking service:Fri Mar 08 20:17:25 IST 2019
2019-03-08 20:17:25,183 INFO  User solution successfully verified
2019-03-08 20:17:25,183 INFO  Processing the response from verify service
2019-03-08 20:17:25,183 INFO  Starting to parse JSON response
2019-03-08 20:17:25,183 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:25,183 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:25,199 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:25,199 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:25,199 INFO  Successfully parsed JSON response
2019-03-08 20:17:25,199 INFO  In the process of generating verify response in HTML
2019-03-08 20:17:25,261 INFO  Successfully generated verify response in HTML
2019-03-08 20:17:25,261 INFO  Successfully processed the response from service
2019-03-08 20:17:46,357 INFO  Setting request parameters for VerifySolution
2019-03-08 20:17:46,357 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:17:46,357 INFO  Starting to parse the user solution
2019-03-08 20:17:46,357 INFO  Displaying user solution
2019-03-08 20:17:46,420 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-20\r\n'''\r\nCreated on Mar 7, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Applicant:\r\n    __application_dict=None\r\n    __applicant_id_count=1000\r\n    def __init__(self,applicant_name):\r\n        self.__applicant_id = None\r\n        self.__applicant_name = applicant_name\r\n        self.__job_band = None\r\n    \r\n    def generate_applicant_id(self):\r\n        Applicant.__applicant_id_count+=1\r\n        self.__applicant_id=Applicant.__applicant_id_count\r\n        \r\n    \r\n    def apply_for_job(self,job_band):\r\n        if Applicant.get_application_dict()[job_band]>=5:\r\n            return -1\r\n        else:\r\n            Applicant.get_application_dict()[job_band]+=1\r\n            self.generate_applicant_id()\r\n            self.__job_band=job_band\r\n\r\n    @staticmethod\r\n    def get_application_dict():\r\n        return Applicant.__application_dict\r\n\r\n    def get_applicant_id(self):\r\n        return self.__applicant_id\r\n\r\n\r\n    def get_applicant_name(self):\r\n        return self.__applicant_name\r\n\r\n\r\n    def get_job_band(self):\r\n        return self.__job_band\r\n","asgnmtId":"20","SolutionFileName":"Assign20.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:17:46,420 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:17:46,420 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:17:46,420 INFO  Invoking the service to verify the user solution
2019-03-08 20:17:46,420 INFO  Time before invoking service:Fri Mar 08 20:17:46 IST 2019
2019-03-08 20:17:46,420 INFO  Initialising service address for VerifySolution
2019-03-08 20:17:46,420 INFO  Time before invoking service In SUPER:Fri Mar 08 20:17:46 IST 2019
2019-03-08 20:17:47,390 INFO  Time after invoking service In SUPER:Fri Mar 08 20:17:47 IST 2019
2019-03-08 20:17:47,406 INFO  Service responded successfully with required details
2019-03-08 20:17:47,406 INFO  Time after invoking service:Fri Mar 08 20:17:47 IST 2019
2019-03-08 20:17:47,406 INFO  User solution successfully verified
2019-03-08 20:17:47,406 INFO  Processing the response from verify service
2019-03-08 20:17:47,406 INFO  Starting to parse JSON response
2019-03-08 20:17:47,406 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:47,406 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:47,406 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:47,406 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:17:47,406 INFO  Successfully parsed JSON response
2019-03-08 20:17:47,406 INFO  In the process of generating verify response in HTML
2019-03-08 20:17:47,469 INFO  Successfully generated verify response in HTML
2019-03-08 20:17:47,469 INFO  Successfully processed the response from service
2019-03-08 20:17:50,404 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:17:50,404 INFO  Displaying user solution
2019-03-08 20:17:50,404 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:17:50,404 INFO  Invoking the service to submit the user solution
2019-03-08 20:17:50,404 INFO  Initialising service address for Submit
2019-03-08 20:17:50,404 INFO  Time before invoking service In SUPER:Fri Mar 08 20:17:50 IST 2019
2019-03-08 20:17:50,670 INFO  Time after invoking service In SUPER:Fri Mar 08 20:17:50 IST 2019
2019-03-08 20:17:50,670 INFO  Service responded successfully with required details
2019-03-08 20:17:50,670 INFO  User solution successfully submitted
2019-03-08 20:17:50,670 INFO  Displaying submission status
2019-03-08 20:17:50,670 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:20:51,116 INFO  Setting request parameters for VerifySolution
2019-03-08 20:20:51,116 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:20:51,116 INFO  Starting to parse the user solution
2019-03-08 20:20:51,116 INFO  Displaying user solution
2019-03-08 20:20:51,194 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-21\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Patient:\r\n    def __init__(self,patient_id,patient_name,list_of_lab_test_ids):\r\n        self.__patient_id=patient_id\r\n        self.__patient_name=patient_name\r\n        self.__list_of_lab_test_ids=list_of_lab_test_ids\r\n        self.__lab_test_charge=None\r\n    def get_patient_id(self):\r\n        return self.__patient_id\r\n    def get_patient_name(self):\r\n        return self.__patient_name\r\n    def get_list_of_lab_test_ids(self):\r\n        return self.__list_of_lab_test_ids\r\n    def get_lab_test_charge(self):\r\n        return self.__lab_test_charge\r\n    def calculate_lab_test_charge(self):\r\n        self.__lab_test_charge=0\r\n        for i in self.__list_of_lab_test_ids:     \r\n            price=LabTestRepository.get_test_charge(i)      \r\n            if price == -1 :                                    \r\n                price = 0\r\n            self.__lab_test_charge+=price\r\n        #Remove pass and write the logic here.\r\n\r\nclass LabTestRepository:\r\n    __list_of_hospital_lab_test_ids=[\"L101\",\"L102\",\"L103\",\"L104\"]\r\n    __list_of_lab_test_charge=[2020,1750.50,5700,1320.50]\r\n    @staticmethod\r\n    def get_test_charge(lab_test_id):\r\n        pass\r\n        #Remove pass and write the logic here.\r\n\r\nlab_test_list1=[\"L101\",\"L103\",\"L104\",'L105']\r\npatient1=Patient(1010,\"Sam\",lab_test_list1)\r\npatient1.calculate_lab_test_charge()\r\nprint(\"Patient id:\",patient1.get_patient_id(),\"\\nPatient name:\",patient1.get_patient_name(),\"\\nPatient's test ids:\",patient1.get_list_of_lab_test_ids(), \"\\nTotal lab test charge:\",patient1.get_lab_test_charge())\r\n","asgnmtId":"21","SolutionFileName":"Assign21.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:20:51,194 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:20:51,210 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:20:51,210 INFO  Invoking the service to verify the user solution
2019-03-08 20:20:51,210 INFO  Time before invoking service:Fri Mar 08 20:20:51 IST 2019
2019-03-08 20:20:51,210 INFO  Initialising service address for VerifySolution
2019-03-08 20:20:51,210 INFO  Time before invoking service In SUPER:Fri Mar 08 20:20:51 IST 2019
2019-03-08 20:20:53,085 INFO  Time after invoking service In SUPER:Fri Mar 08 20:20:53 IST 2019
2019-03-08 20:20:53,085 INFO  Service responded successfully with required details
2019-03-08 20:20:53,085 INFO  Time after invoking service:Fri Mar 08 20:20:53 IST 2019
2019-03-08 20:20:53,085 INFO  User solution successfully verified
2019-03-08 20:20:53,085 INFO  Processing the response from verify service
2019-03-08 20:20:53,085 INFO  Starting to parse JSON response
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:20:53,085 INFO  Successfully parsed JSON response
2019-03-08 20:20:53,085 INFO  In the process of generating verify response in HTML
2019-03-08 20:20:53,163 INFO  Successfully generated verify response in HTML
2019-03-08 20:20:53,163 INFO  Successfully processed the response from service
2019-03-08 20:21:59,382 INFO  Setting request parameters for VerifySolution
2019-03-08 20:21:59,382 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:21:59,382 INFO  Starting to parse the user solution
2019-03-08 20:21:59,382 INFO  Displaying user solution
2019-03-08 20:21:59,444 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-21\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Patient:\r\n    def __init__(self,patient_id,patient_name,list_of_lab_test_ids):\r\n        self.__patient_id=patient_id\r\n        self.__patient_name=patient_name\r\n        self.__list_of_lab_test_ids=list_of_lab_test_ids\r\n        self.__lab_test_charge=None\r\n    def get_patient_id(self):\r\n        return self.__patient_id\r\n    def get_patient_name(self):\r\n        return self.__patient_name\r\n    def get_list_of_lab_test_ids(self):\r\n        return self.__list_of_lab_test_ids\r\n    def get_lab_test_charge(self):\r\n        return self.__lab_test_charge\r\n    def calculate_lab_test_charge(self):\r\n        self.__lab_test_charge=0\r\n        for i in self.__list_of_lab_test_ids:     \r\n            price=LabTestRepository.get_test_charge(i)      \r\n            if price == -1 :                                    \r\n                price = 0\r\n            self.__lab_test_charge+=price\r\n        #Remove pass and write the logic here.\r\n\r\nclass LabTestRepository:\r\n    __list_of_hospital_lab_test_ids=[\"L101\",\"L102\",\"L103\",\"L104\"]\r\n    __list_of_lab_test_charge=[2020,1750.50,5700,1320.50]\r\n    @staticmethod\r\n    def get_test_charge(lab_test_id):\r\n        if lab_test_id not in LabTestRepository.__list_of_hospital_lab_test_ids:\r\n            return -1\r\n        else:\r\n            index=LabTestRepository.__list_of_hospital_lab_test_ids.index(lab_test_id)\r\n            return LabTestRepository.__list_of_lab_test_charge[index]\r\n        #Remove pass and write the logic here.\r\n\r\nlab_test_list1=[\"L101\",\"L103\",\"L104\",'L105']\r\npatient1=Patient(1010,\"Sam\",lab_test_list1)\r\npatient1.calculate_lab_test_charge()\r\nprint(\"Patient id:\",patient1.get_patient_id(),\"\\nPatient name:\",patient1.get_patient_name(),\"\\nPatient's test ids:\",patient1.get_list_of_lab_test_ids(), \"\\nTotal lab test charge:\",patient1.get_lab_test_charge())\r\n","asgnmtId":"21","SolutionFileName":"Assign21.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:21:59,444 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:21:59,444 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:21:59,444 INFO  Invoking the service to verify the user solution
2019-03-08 20:21:59,444 INFO  Time before invoking service:Fri Mar 08 20:21:59 IST 2019
2019-03-08 20:21:59,444 INFO  Initialising service address for VerifySolution
2019-03-08 20:21:59,444 INFO  Time before invoking service In SUPER:Fri Mar 08 20:21:59 IST 2019
2019-03-08 20:22:00,537 INFO  Time after invoking service In SUPER:Fri Mar 08 20:22:00 IST 2019
2019-03-08 20:22:00,537 INFO  Service responded successfully with required details
2019-03-08 20:22:00,537 INFO  Time after invoking service:Fri Mar 08 20:22:00 IST 2019
2019-03-08 20:22:00,537 INFO  User solution successfully verified
2019-03-08 20:22:00,537 INFO  Processing the response from verify service
2019-03-08 20:22:00,537 INFO  Starting to parse JSON response
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:00,537 INFO  Successfully parsed JSON response
2019-03-08 20:22:00,537 INFO  In the process of generating verify response in HTML
2019-03-08 20:22:00,599 INFO  Successfully generated verify response in HTML
2019-03-08 20:22:00,599 INFO  Successfully processed the response from service
2019-03-08 20:22:48,197 INFO  Setting request parameters for VerifySolution
2019-03-08 20:22:48,197 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:22:48,197 INFO  Starting to parse the user solution
2019-03-08 20:22:48,197 INFO  Displaying user solution
2019-03-08 20:22:48,244 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-21\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Patient:\r\n    def __init__(self,patient_id,patient_name,list_of_lab_test_ids):\r\n        self.__patient_id=patient_id\r\n        self.__patient_name=patient_name\r\n        self.__list_of_lab_test_ids=list_of_lab_test_ids\r\n        self.__lab_test_charge=None\r\n    def get_patient_id(self):\r\n        return self.__patient_id\r\n    def get_patient_name(self):\r\n        return self.__patient_name\r\n    def get_list_of_lab_test_ids(self):\r\n        return self.__list_of_lab_test_ids\r\n    def get_lab_test_charge(self):\r\n        return self.__lab_test_charge\r\n    def calculate_lab_test_charge(self):\r\n        self.__lab_test_charge=0\r\n        for i in self.__list_of_lab_test_ids:     \r\n            price=LabTestRepository.get_test_charge(i)      \r\n            if price == -1 :                                    \r\n                price = 0\r\n            self.__lab_test_charge+=price\r\n        #Remove pass and write the logic here.\r\n\r\nclass LabTestRepository:\r\n    __list_of_hospital_lab_test_ids=[\"L101\",\"L102\",\"L103\",\"L104\"]\r\n    __list_of_lab_test_charge=[2020,1750.50,5700,1320.50]\r\n    @staticmethod\r\n    def get_test_charge(lab_test_id):\r\n        if lab_test_id not in LabTestRepository.__list_of_hospital_lab_test_ids:\r\n            return -1\r\n        else:\r\n            index=LabTestRepository.__list_of_hospital_lab_test_ids.index(lab_test_id)\r\n            return LabTestRepository.__list_of_lab_test_charge[index]\r\n        #Remove pass and write the logic here.\r\n\r\nlab_test_list1=[\"L101\",\"L103\",\"L104\",'L105']\r\npatient1=Patient(1010,\"Sam\",lab_test_list1)\r\npatient1.calculate_lab_test_charge()\r\nprint(\"Patient id:\",patient1.get_patient_id(),\"\\nPatient name:\",patient1.get_patient_name(),\"\\nPatient's test ids:\",patient1.get_list_of_lab_test_ids(), \"\\nTotal lab test charge:\",patient1.get_lab_test_charge())\r\n","asgnmtId":"21","SolutionFileName":"Assign21.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:22:48,260 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:22:48,260 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:22:48,260 INFO  Invoking the service to verify the user solution
2019-03-08 20:22:48,260 INFO  Time before invoking service:Fri Mar 08 20:22:48 IST 2019
2019-03-08 20:22:48,260 INFO  Initialising service address for VerifySolution
2019-03-08 20:22:48,260 INFO  Time before invoking service In SUPER:Fri Mar 08 20:22:48 IST 2019
2019-03-08 20:22:49,194 INFO  Time after invoking service In SUPER:Fri Mar 08 20:22:49 IST 2019
2019-03-08 20:22:49,194 INFO  Service responded successfully with required details
2019-03-08 20:22:49,194 INFO  Time after invoking service:Fri Mar 08 20:22:49 IST 2019
2019-03-08 20:22:49,194 INFO  User solution successfully verified
2019-03-08 20:22:49,194 INFO  Processing the response from verify service
2019-03-08 20:22:49,194 INFO  Starting to parse JSON response
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:22:49,194 INFO  Successfully parsed JSON response
2019-03-08 20:22:49,194 INFO  In the process of generating verify response in HTML
2019-03-08 20:22:49,273 INFO  Successfully generated verify response in HTML
2019-03-08 20:22:49,273 INFO  Successfully processed the response from service
2019-03-08 20:23:03,990 INFO  Setting request parameters for VerifySolution
2019-03-08 20:23:03,990 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:23:03,990 INFO  Starting to parse the user solution
2019-03-08 20:23:03,990 INFO  Displaying user solution
2019-03-08 20:23:04,069 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-21\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Patient:\r\n    def __init__(self,patient_id,patient_name,list_of_lab_test_ids):\r\n        self.__patient_id=patient_id\r\n        self.__patient_name=patient_name\r\n        self.__list_of_lab_test_ids=list_of_lab_test_ids\r\n        self.__lab_test_charge=None\r\n    def get_patient_id(self):\r\n        return self.__patient_id\r\n    def get_patient_name(self):\r\n        return self.__patient_name\r\n    def get_list_of_lab_test_ids(self):\r\n        return self.__list_of_lab_test_ids\r\n    def get_lab_test_charge(self):\r\n        return self.__lab_test_charge\r\n    def calculate_lab_test_charge(self):\r\n        self.__lab_test_charge=0\r\n        for i in self.__list_of_lab_test_ids:     \r\n            price=LabTestRepository.get_test_charge(i)      \r\n            if price == -1 :                                    \r\n                price = 0\r\n            self.__lab_test_charge+=price\r\n        #Remove pass and write the logic here.\r\n\r\nclass LabTestRepository:\r\n    __list_of_hospital_lab_test_ids=[\"L101\",\"L102\",\"L103\",\"L104\"]\r\n    __list_of_lab_test_charge=[2020,1750.50,5700,1320.50]\r\n    @staticmethod\r\n    def get_test_charge(lab_test_id):\r\n        if lab_test_id not in LabTestRepository.__list_of_hospital_lab_test_ids:\r\n            return -1\r\n        else:\r\n            index=LabTestRepository.__list_of_hospital_lab_test_ids.index(lab_test_id)\r\n            return LabTestRepository.__list_of_lab_test_charge[index]\r\n        #Remove pass and write the logic here.\r\n\r\nlab_test_list1=[\"L101\",\"L103\",\"L104\",'L105']\r\npatient1=Patient(1010,\"Sam\",lab_test_list1)\r\npatient1.calculate_lab_test_charge()\r\nprint(\"Patient id:\",patient1.get_patient_id(),\"\\nPatient name:\",patient1.get_patient_name(),\"\\nPatient's test ids:\",patient1.get_list_of_lab_test_ids(), \"\\nTotal lab test charge:\",patient1.get_lab_test_charge())\r\n","asgnmtId":"21","SolutionFileName":"Assign21.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:23:04,069 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:23:04,069 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:23:04,069 INFO  Invoking the service to verify the user solution
2019-03-08 20:23:04,069 INFO  Time before invoking service:Fri Mar 08 20:23:04 IST 2019
2019-03-08 20:23:04,069 INFO  Initialising service address for VerifySolution
2019-03-08 20:23:04,069 INFO  Time before invoking service In SUPER:Fri Mar 08 20:23:04 IST 2019
2019-03-08 20:23:05,056 INFO  Time after invoking service In SUPER:Fri Mar 08 20:23:05 IST 2019
2019-03-08 20:23:05,056 INFO  Service responded successfully with required details
2019-03-08 20:23:05,056 INFO  Time after invoking service:Fri Mar 08 20:23:05 IST 2019
2019-03-08 20:23:05,056 INFO  User solution successfully verified
2019-03-08 20:23:05,072 INFO  Processing the response from verify service
2019-03-08 20:23:05,072 INFO  Starting to parse JSON response
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:23:05,072 INFO  Successfully parsed JSON response
2019-03-08 20:23:05,072 INFO  In the process of generating verify response in HTML
2019-03-08 20:23:05,134 INFO  Successfully generated verify response in HTML
2019-03-08 20:23:05,134 INFO  Successfully processed the response from service
2019-03-08 20:23:20,241 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:23:20,241 INFO  Displaying user solution
2019-03-08 20:23:20,241 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:23:20,241 INFO  Invoking the service to submit the user solution
2019-03-08 20:23:20,241 INFO  Initialising service address for Submit
2019-03-08 20:23:20,241 INFO  Time before invoking service In SUPER:Fri Mar 08 20:23:20 IST 2019
2019-03-08 20:23:20,898 INFO  Time after invoking service In SUPER:Fri Mar 08 20:23:20 IST 2019
2019-03-08 20:23:20,898 INFO  Service responded successfully with required details
2019-03-08 20:23:20,898 INFO  User solution successfully submitted
2019-03-08 20:23:20,898 INFO  Displaying submission status
2019-03-08 20:23:20,898 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:23:24,725 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:23:24,725 INFO  Displaying user solution
2019-03-08 20:23:24,725 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:23:24,725 INFO  Invoking the service to submit the user solution
2019-03-08 20:23:24,725 INFO  Initialising service address for Submit
2019-03-08 20:23:24,725 INFO  Time before invoking service In SUPER:Fri Mar 08 20:23:24 IST 2019
2019-03-08 20:23:24,834 INFO  Time after invoking service In SUPER:Fri Mar 08 20:23:24 IST 2019
2019-03-08 20:23:24,834 INFO  Service responded successfully with required details
2019-03-08 20:23:24,834 INFO  User solution successfully submitted
2019-03-08 20:23:24,834 INFO  Displaying submission status
2019-03-08 20:23:24,834 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:25:52,283 INFO  Setting request parameters for VerifySolution
2019-03-08 20:25:52,283 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:25:52,283 INFO  Starting to parse the user solution
2019-03-08 20:25:52,283 INFO  Displaying user solution
2019-03-08 20:25:52,376 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif Multiplex.__list_total_tickets[Multiplex.__list_movie_name.index(movie_name)]<number_of_tickets:\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:25:52,376 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:25:52,376 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:25:52,376 INFO  Invoking the service to verify the user solution
2019-03-08 20:25:52,376 INFO  Time before invoking service:Fri Mar 08 20:25:52 IST 2019
2019-03-08 20:25:52,376 INFO  Initialising service address for VerifySolution
2019-03-08 20:25:52,376 INFO  Time before invoking service In SUPER:Fri Mar 08 20:25:52 IST 2019
2019-03-08 20:25:53,550 INFO  Time after invoking service In SUPER:Fri Mar 08 20:25:53 IST 2019
2019-03-08 20:25:53,550 INFO  Service responded successfully with required details
2019-03-08 20:25:53,550 INFO  Time after invoking service:Fri Mar 08 20:25:53 IST 2019
2019-03-08 20:25:53,550 INFO  User solution successfully verified
2019-03-08 20:25:53,550 INFO  Processing the response from verify service
2019-03-08 20:25:53,550 INFO  Starting to parse JSON response
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:25:53,566 INFO  Successfully parsed JSON response
2019-03-08 20:25:53,566 INFO  In the process of generating verify response in HTML
2019-03-08 20:25:53,628 INFO  Successfully generated verify response in HTML
2019-03-08 20:25:53,628 INFO  Successfully processed the response from service
2019-03-08 20:26:57,722 INFO  Setting request parameters for VerifySolution
2019-03-08 20:26:57,722 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:26:57,722 INFO  Starting to parse the user solution
2019-03-08 20:26:57,722 INFO  Displaying user solution
2019-03-08 20:26:57,796 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the \r\n        given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif (Multiplex.__list_total_tickets[Multiplex.__list_movie_name.index(movie_name)]\r\n              <number_of_tickets):\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:26:57,796 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:26:57,796 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:26:57,796 INFO  Invoking the service to verify the user solution
2019-03-08 20:26:57,796 INFO  Time before invoking service:Fri Mar 08 20:26:57 IST 2019
2019-03-08 20:26:57,796 INFO  Initialising service address for VerifySolution
2019-03-08 20:26:57,811 INFO  Time before invoking service In SUPER:Fri Mar 08 20:26:57 IST 2019
2019-03-08 20:26:59,065 INFO  Time after invoking service In SUPER:Fri Mar 08 20:26:59 IST 2019
2019-03-08 20:26:59,065 INFO  Service responded successfully with required details
2019-03-08 20:26:59,065 INFO  Time after invoking service:Fri Mar 08 20:26:59 IST 2019
2019-03-08 20:26:59,065 INFO  User solution successfully verified
2019-03-08 20:26:59,065 INFO  Processing the response from verify service
2019-03-08 20:26:59,065 INFO  Starting to parse JSON response
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:26:59,081 INFO  Successfully parsed JSON response
2019-03-08 20:26:59,081 INFO  In the process of generating verify response in HTML
2019-03-08 20:26:59,143 INFO  Successfully generated verify response in HTML
2019-03-08 20:26:59,143 INFO  Successfully processed the response from service
2019-03-08 20:27:21,677 INFO  Setting request parameters for VerifySolution
2019-03-08 20:27:21,677 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:27:21,677 INFO  Starting to parse the user solution
2019-03-08 20:27:21,677 INFO  Displaying user solution
2019-03-08 20:27:21,739 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the \r\n        given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif (Multiplex.__list_total_tickets\r\n              [Multiplex.__list_movie_name.index(movie_name)]<number_of_tickets):\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:27:21,739 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:27:21,739 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:27:21,739 INFO  Invoking the service to verify the user solution
2019-03-08 20:27:21,739 INFO  Time before invoking service:Fri Mar 08 20:27:21 IST 2019
2019-03-08 20:27:21,739 INFO  Initialising service address for VerifySolution
2019-03-08 20:27:21,739 INFO  Time before invoking service In SUPER:Fri Mar 08 20:27:21 IST 2019
2019-03-08 20:27:23,018 INFO  Time after invoking service In SUPER:Fri Mar 08 20:27:23 IST 2019
2019-03-08 20:27:23,018 INFO  Service responded successfully with required details
2019-03-08 20:27:23,018 INFO  Time after invoking service:Fri Mar 08 20:27:23 IST 2019
2019-03-08 20:27:23,018 INFO  User solution successfully verified
2019-03-08 20:27:23,018 INFO  Processing the response from verify service
2019-03-08 20:27:23,018 INFO  Starting to parse JSON response
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:23,018 INFO  Successfully parsed JSON response
2019-03-08 20:27:23,018 INFO  In the process of generating verify response in HTML
2019-03-08 20:27:23,080 INFO  Successfully generated verify response in HTML
2019-03-08 20:27:23,080 INFO  Successfully processed the response from service
2019-03-08 20:27:35,944 INFO  Setting request parameters for VerifySolution
2019-03-08 20:27:35,944 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:27:35,944 INFO  Starting to parse the user solution
2019-03-08 20:27:35,944 INFO  Displaying user solution
2019-03-08 20:27:36,007 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the \r\n        given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif (Multiplex.__list_total_tickets\r\n              [Multiplex.__list_movie_name.index(movie_name)]\r\n              <number_of_tickets):\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:27:36,023 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:27:36,023 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:27:36,023 INFO  Invoking the service to verify the user solution
2019-03-08 20:27:36,023 INFO  Time before invoking service:Fri Mar 08 20:27:36 IST 2019
2019-03-08 20:27:36,023 INFO  Initialising service address for VerifySolution
2019-03-08 20:27:36,023 INFO  Time before invoking service In SUPER:Fri Mar 08 20:27:36 IST 2019
2019-03-08 20:27:37,253 INFO  Time after invoking service In SUPER:Fri Mar 08 20:27:37 IST 2019
2019-03-08 20:27:37,253 INFO  Service responded successfully with required details
2019-03-08 20:27:37,253 INFO  Time after invoking service:Fri Mar 08 20:27:37 IST 2019
2019-03-08 20:27:37,253 INFO  User solution successfully verified
2019-03-08 20:27:37,253 INFO  Processing the response from verify service
2019-03-08 20:27:37,253 INFO  Starting to parse JSON response
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:27:37,253 INFO  Successfully parsed JSON response
2019-03-08 20:27:37,253 INFO  In the process of generating verify response in HTML
2019-03-08 20:27:37,331 INFO  Successfully generated verify response in HTML
2019-03-08 20:27:37,331 INFO  Successfully processed the response from service
2019-03-08 20:28:23,304 INFO  Setting request parameters for VerifySolution
2019-03-08 20:28:23,304 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:28:23,304 INFO  Starting to parse the user solution
2019-03-08 20:28:23,304 INFO  Displaying user solution
2019-03-08 20:28:23,382 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the \r\n        given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif (Multiplex.__list_total_tickets\r\n              [Multiplex.__list_movie_name.index(movie_name)]\r\n              <number_of_tickets):\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:28:23,382 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:28:23,382 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:28:23,382 INFO  Invoking the service to verify the user solution
2019-03-08 20:28:23,382 INFO  Time before invoking service:Fri Mar 08 20:28:23 IST 2019
2019-03-08 20:28:23,382 INFO  Initialising service address for VerifySolution
2019-03-08 20:28:23,398 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:23 IST 2019
2019-03-08 20:28:24,472 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:24 IST 2019
2019-03-08 20:28:24,472 INFO  Service responded successfully with required details
2019-03-08 20:28:24,472 INFO  Time after invoking service:Fri Mar 08 20:28:24 IST 2019
2019-03-08 20:28:24,472 INFO  User solution successfully verified
2019-03-08 20:28:24,472 INFO  Processing the response from verify service
2019-03-08 20:28:24,472 INFO  Starting to parse JSON response
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:24,472 INFO  Successfully parsed JSON response
2019-03-08 20:28:24,472 INFO  In the process of generating verify response in HTML
2019-03-08 20:28:24,550 INFO  Successfully generated verify response in HTML
2019-03-08 20:28:24,550 INFO  Successfully processed the response from service
2019-03-08 20:28:39,753 INFO  Setting request parameters for VerifySolution
2019-03-08 20:28:39,753 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:28:39,753 INFO  Starting to parse the user solution
2019-03-08 20:28:39,753 INFO  Displaying user solution
2019-03-08 20:28:39,815 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-22\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Multiplex:\r\n    __list_movie_name=[\"movie1\",\"movie2\"]\r\n    __list_total_tickets=[100,60]\r\n    __list_last_seat_number=[None,None]\r\n    __list_ticket_price=[150,200]\r\n    def __init__(self):\r\n        self.__seat_numbers=None\r\n        self.__total_price=None\r\n    def calculate_ticket_price(self,movie_index,number_of_tickets):\r\n        self.__total_price= Multiplex.__list_ticket_price[movie_index]*number_of_tickets\r\n    def check_seat_availability(self,movie_index,number_of_tickets):\r\n        if(Multiplex.__list_total_tickets[movie_index]<number_of_tickets):\r\n            return False\r\n        else:\r\n            return True\r\n    def get_total_price(self):\r\n        return self.__total_price\r\n    def get_seat_numbers(self):\r\n        return self.__seat_numbers\r\n    def book_ticket(self, movie_name, number_of_tickets):\r\n        '''Write the logic to book the \r\n        given number of tickets for the specified movie.'''\r\n        if movie_name.lower() not in Multiplex.__list_movie_name:\r\n            return 0\r\n        elif (Multiplex.__list_total_tickets\r\n              [Multiplex.__list_movie_name.index(movie_name)]\r\n              <number_of_tickets):\r\n            return -1\r\n        else:\r\n            movie_indx=Multiplex.__list_movie_name.index(movie_name)\r\n            self.__seat_numbers=self.generate_seat_number(movie_indx, number_of_tickets)\r\n            self.calculate_ticket_price(movie_indx, number_of_tickets)\r\n    def  generate_seat_number(self,movie_index, number_of_tickets):\r\n        '''Write the logic to generate and return the list of seat numbers'''\r\n        prefix,tkt_list,number_of_tickets='',[],int(number_of_tickets)\r\n        \r\n        \r\n        if movie_index == 0:\r\n            if Multiplex.__list_last_seat_number[0] is None:\r\n                lst_tkt=0\r\n        \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[0].split('-')[-1])\r\n            prefix=\"M1\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[0]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[0]-=number_of_tickets\r\n        \r\n        \r\n        else:\r\n            if Multiplex.__list_last_seat_number[1] is None:\r\n                lst_tkt=0\r\n            \r\n            else:\r\n                lst_tkt=int(Multiplex.__list_last_seat_number[1].split('-')[-1])\r\n            prefix=\"M2\"\r\n            \r\n            for i in range (lst_tkt+1,lst_tkt+number_of_tickets+1):\r\n                tkt_list.append(prefix+'-'+str(i))\r\n            Multiplex.__list_last_seat_number[1]=tkt_list[-1]\r\n            Multiplex.__list_total_tickets[1]-=number_of_tickets\r\n\r\n        return tkt_list\r\n\r\nbooking1=Multiplex()\r\nstatus=booking1.book_ticket(\"movie1\",10)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-1\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking1.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking1.get_total_price())\r\nprint(\"-----------------------------------------------------------------------------\")\r\nbooking2=Multiplex()\r\nstatus=booking2.book_ticket(\"movie2\",6)\r\nif(status==0):\r\n    print(\"invalid movie name\")\r\nelif(status==-1):\r\n    print(\"Tickets not available for movie-2\")\r\nelse:\r\n    print(\"Booking successful\")\r\n    print(\"Seat Numbers :\", booking2.get_seat_numbers())\r\n    print(\"Total amount to be paid:\", booking2.get_total_price())\r\n","asgnmtId":"22","SolutionFileName":"Assign22.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:28:39,815 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:28:39,815 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:28:39,815 INFO  Invoking the service to verify the user solution
2019-03-08 20:28:39,815 INFO  Time before invoking service:Fri Mar 08 20:28:39 IST 2019
2019-03-08 20:28:39,815 INFO  Initialising service address for VerifySolution
2019-03-08 20:28:39,815 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:39 IST 2019
2019-03-08 20:28:40,897 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:40 IST 2019
2019-03-08 20:28:40,897 INFO  Service responded successfully with required details
2019-03-08 20:28:40,897 INFO  Time after invoking service:Fri Mar 08 20:28:40 IST 2019
2019-03-08 20:28:40,897 INFO  User solution successfully verified
2019-03-08 20:28:40,897 INFO  Processing the response from verify service
2019-03-08 20:28:40,897 INFO  Starting to parse JSON response
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:40,897 INFO  Successfully parsed JSON response
2019-03-08 20:28:40,897 INFO  In the process of generating verify response in HTML
2019-03-08 20:28:40,960 INFO  Successfully generated verify response in HTML
2019-03-08 20:28:40,960 INFO  Successfully processed the response from service
2019-03-08 20:28:44,129 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:28:44,129 INFO  Displaying user solution
2019-03-08 20:28:44,129 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:28:44,129 INFO  Invoking the service to submit the user solution
2019-03-08 20:28:44,129 INFO  Initialising service address for Submit
2019-03-08 20:28:44,129 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:44 IST 2019
2019-03-08 20:28:44,718 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:44 IST 2019
2019-03-08 20:28:44,719 INFO  Service responded successfully with required details
2019-03-08 20:28:44,719 INFO  User solution successfully submitted
2019-03-08 20:28:44,719 INFO  Displaying submission status
2019-03-08 20:28:44,719 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:28:47,693 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:28:47,693 INFO  Displaying user solution
2019-03-08 20:28:47,693 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:28:47,693 INFO  Invoking the service to submit the user solution
2019-03-08 20:28:47,693 INFO  Initialising service address for Submit
2019-03-08 20:28:47,693 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:47 IST 2019
2019-03-08 20:28:47,804 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:47 IST 2019
2019-03-08 20:28:47,804 INFO  Service responded successfully with required details
2019-03-08 20:28:47,804 INFO  User solution successfully submitted
2019-03-08 20:28:47,804 INFO  Displaying submission status
2019-03-08 20:28:47,804 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:28:51,846 INFO  Setting request parameters for VerifySolution
2019-03-08 20:28:51,846 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:28:51,846 INFO  Starting to parse the user solution
2019-03-08 20:28:51,846 INFO  Displaying user solution
2019-03-08 20:28:51,893 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-27\r\n'''\r\nCreated on Mar 8, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#This class represents ThemePark\r\nclass ThemePark:\r\n    #dict_of_games contains the game name as key, \r\n    #price/ride and points that can be earned by customer in a list as value\r\n    dict_of_games={\"Game1\":[35.5,5], \"Game2\":[40.0,6],\r\n                   \"Game3\":[120.0,10], \"Game4\":[60.0,7],\"Game5\":[25.0,4]}\r\n    @staticmethod\r\n    def validate_game(game_input):\r\n        if game_input in ThemePark.dict_of_games:\r\n            return True\r\n        return False\r\n        #Remove pass and write the logic here\r\n        #If game_input is present in ThemePark, return true. Else, return false.\r\n    @staticmethod\r\n    def get_points(game_input):\r\n        for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[1]\r\n        #Remove pass and write the logic here\r\n        #Return the points that can be earned for the given game_input.\r\n    @staticmethod\r\n    def get_amount(game_input):\r\n       for key,value in ThemePark.dict_of_games.items():\r\n            if(game_input==key):\r\n                return value[0]\r\n        #Remove pass and write the logic here\r\n        #Return the price/ride for the given game_input\r\n\r\n#This class represents ticket\r\nclass Ticket:\r\n    __ticket_count=200\r\n    def __init__(self):\r\n        self.__ticket_id=None\r\n        self.__ticket_amount=0\r\n    def generate_ticket_id(self):\r\n        Ticket.__ticket_count+=1\r\n        self.__ticket_id=Ticket.__ticket_count\r\n        #Remove pass and write the logic here\r\n        #Auto-generate ticket_id starting from 201\r\n    def calculate_amount(self, list_of_games):\r\n        for i in list_of_games:\r\n            if ThemePark.validate_game(i):\r\n                self.__ticket_amount += ThemePark.dict_of_games[i][0]\r\n            else:\r\n                return False\r\n        return True \r\n        #Remove pass and write the logic here\r\n        '''Validate the games in the list_of_games.\r\n        If all games are valid, calculate total \r\n        ticket amount and assign it to attribute, \r\n        ticket_amount and return true. Else, return false'''\r\n    def get_ticket_id(self):\r\n        return self.__ticket_id\r\n    def get_ticket_amount(self):\r\n        return self.__ticket_amount\r\n\r\nclass Customer:\r\n    def __init__(self,name,list_of_games):\r\n        self.__name = name\r\n        self.__list_of_games = list_of_games \r\n        self.__ticket = Ticket()\r\n        self.__points_earned = 0\r\n        self.__food_coupon = 'No'\r\n\r\n    def play_game(self):\r\n        self.__points_earned = 0\r\n        for i in self.__list_of_games:\r\n            self.__points_earned += ThemePark.get_points(i)\r\n        if \"Game3\" in self.__list_of_games:\r\n            self.__list_of_games.append(\"Game2\")\r\n            self.__points_earned += ThemePark.get_points(\"Game2\")    \r\n    \r\n    def update_food_coupon(self):\r\n        self.play_game()\r\n        if \"Game4\" in self.__list_of_games and self.__points_earned > 15:\r\n            self.__food_coupon = \"Yes\"\r\n    \r\n    def book_ticket(self):\r\n        if self.__ticket.calculate_amount(self.__list_of_games):\r\n            self.__ticket.generate_ticket_id()\r\n            self.play_game()\r\n            self.update_food_coupon()\r\n        else:\r\n            return False\r\n        return True\r\n    \r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_list_of_games(self):\r\n        return self.__list_of_games\r\n\r\n    def get_ticket(self):\r\n        return self.__ticket\r\n\r\n    def get_points_earned(self):\r\n        return self.__points_earned\r\n\r\n    def get_food_coupon(self):\r\n        return self.__food_coupon\r\n    #Remove pass and implement class Customer here\r\n\r\n'''Represent customers and display all details of the customer, if he is able to book the ticket and play the game. Else, display appropriate error message '''\r\n","asgnmtId":"27","SolutionFileName":"Assign27.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:28:51,893 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:28:51,893 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:28:51,893 INFO  Invoking the service to verify the user solution
2019-03-08 20:28:51,893 INFO  Time before invoking service:Fri Mar 08 20:28:51 IST 2019
2019-03-08 20:28:51,893 INFO  Initialising service address for VerifySolution
2019-03-08 20:28:51,893 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:51 IST 2019
2019-03-08 20:28:53,271 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:53 IST 2019
2019-03-08 20:28:53,271 INFO  Service responded successfully with required details
2019-03-08 20:28:53,271 INFO  Time after invoking service:Fri Mar 08 20:28:53 IST 2019
2019-03-08 20:28:53,271 INFO  User solution successfully verified
2019-03-08 20:28:53,271 INFO  Processing the response from verify service
2019-03-08 20:28:53,271 INFO  Starting to parse JSON response
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:28:53,271 INFO  Successfully parsed JSON response
2019-03-08 20:28:53,271 INFO  In the process of generating verify response in HTML
2019-03-08 20:28:53,334 INFO  Successfully generated verify response in HTML
2019-03-08 20:28:53,334 INFO  Successfully processed the response from service
2019-03-08 20:28:56,175 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:28:56,175 INFO  Displaying user solution
2019-03-08 20:28:56,191 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:28:56,191 INFO  Invoking the service to submit the user solution
2019-03-08 20:28:56,191 INFO  Initialising service address for Submit
2019-03-08 20:28:56,191 INFO  Time before invoking service In SUPER:Fri Mar 08 20:28:56 IST 2019
2019-03-08 20:28:56,333 INFO  Time after invoking service In SUPER:Fri Mar 08 20:28:56 IST 2019
2019-03-08 20:28:56,333 INFO  Service responded successfully with required details
2019-03-08 20:28:56,333 INFO  User solution successfully submitted
2019-03-08 20:28:56,333 INFO  Displaying submission status
2019-03-08 20:28:56,333 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:30:05,884 INFO  Setting request parameters for VerifySolution
2019-03-08 20:30:05,884 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:30:05,884 INFO  Starting to parse the user solution
2019-03-08 20:30:05,884 INFO  Displaying user solution
2019-03-08 20:30:05,946 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-8\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Student:\r\n    def __init__(self):\r\n        self.__student_id = None\r\n        self.__age = None\r\n        self.__marks = None\r\n    def get_student_id(self):\r\n        return self.__student_id\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_marks(self):\r\n        return self.__marks\r\n\r\n\r\n    def set_student_id(self, student_id):\r\n        self.__student_id = student_id\r\n\r\n\r\n    def set_age(self, age):\r\n        self.__age = age\r\n\r\n\r\n    def set_marks(self, marks):\r\n        self.__marks = marks\r\n        \r\n    def validate_marks(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100):\r\n            return True\r\n        else:\r\n            return False\r\n    def validate_age(self):\r\n        if(self.get_age()>20):\r\n            return True\r\n        else:\r\n            return False\r\n    def check_qualification(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100 and self.get_age()>20):\r\n            if(self.get_marks()>=65):\r\n                return True\r\n            else:\r\n                return False\r\n        else:\r\n            return False\r\n        \r\ns1 = Student()\r\ns1.set_student_id(167)\r\ns1.set_age(22)\r\ns1.set_marks(74)\r\ns1.validate_marks()\r\ns1.validate_age()\r\ns1.check_qualification()        \r\n        \r\n\r\n    \r\n","asgnmtId":"8","SolutionFileName":"Assign8.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:30:05,946 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:30:05,946 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:30:05,946 INFO  Invoking the service to verify the user solution
2019-03-08 20:30:05,946 INFO  Time before invoking service:Fri Mar 08 20:30:05 IST 2019
2019-03-08 20:30:05,946 INFO  Initialising service address for VerifySolution
2019-03-08 20:30:05,946 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:05 IST 2019
2019-03-08 20:30:07,040 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:07 IST 2019
2019-03-08 20:30:07,040 INFO  Service responded successfully with required details
2019-03-08 20:30:07,040 INFO  Time after invoking service:Fri Mar 08 20:30:07 IST 2019
2019-03-08 20:30:07,040 INFO  User solution successfully verified
2019-03-08 20:30:07,040 INFO  Processing the response from verify service
2019-03-08 20:30:07,040 INFO  Starting to parse JSON response
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:07,040 INFO  Successfully parsed JSON response
2019-03-08 20:30:07,040 INFO  In the process of generating verify response in HTML
2019-03-08 20:30:07,102 INFO  Successfully generated verify response in HTML
2019-03-08 20:30:07,102 INFO  Successfully processed the response from service
2019-03-08 20:30:11,305 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:30:11,305 INFO  Displaying user solution
2019-03-08 20:30:11,321 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:30:11,321 INFO  Invoking the service to submit the user solution
2019-03-08 20:30:11,321 INFO  Initialising service address for Submit
2019-03-08 20:30:11,321 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:11 IST 2019
2019-03-08 20:30:11,446 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:11 IST 2019
2019-03-08 20:30:11,446 INFO  Service responded successfully with required details
2019-03-08 20:30:11,446 INFO  User solution successfully submitted
2019-03-08 20:30:11,446 INFO  Displaying submission status
2019-03-08 20:30:11,446 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:30:15,962 INFO  Setting request parameters for VerifySolution
2019-03-08 20:30:15,962 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:30:15,962 INFO  Starting to parse the user solution
2019-03-08 20:30:15,962 INFO  Displaying user solution
2019-03-08 20:30:16,024 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-8\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Student:\r\n    def __init__(self):\r\n        self.__student_id = None\r\n        self.__age = None\r\n        self.__marks = None\r\n    def get_student_id(self):\r\n        return self.__student_id\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_marks(self):\r\n        return self.__marks\r\n\r\n\r\n    def set_student_id(self, student_id):\r\n        self.__student_id = student_id\r\n\r\n\r\n    def set_age(self, age):\r\n        self.__age = age\r\n\r\n\r\n    def set_marks(self, marks):\r\n        self.__marks = marks\r\n        \r\n    def validate_marks(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100):\r\n            return True\r\n        else:\r\n            return False\r\n    def validate_age(self):\r\n        if(self.get_age()>20):\r\n            return True\r\n        else:\r\n            return False\r\n    def check_qualification(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100 and self.get_age()>20):\r\n            if(self.get_marks()>=65):\r\n                return True\r\n            else:\r\n                return False\r\n        else:\r\n            return False\r\n        \r\ns1 = Student()\r\ns1.set_student_id(167)\r\ns1.set_age(22)\r\ns1.set_marks(74)\r\ns1.validate_marks()\r\ns1.validate_age()\r\ns1.check_qualification()        \r\n        \r\n\r\n    \r\n","asgnmtId":"8","SolutionFileName":"Assign8.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:30:16,024 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:30:16,024 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:30:16,024 INFO  Invoking the service to verify the user solution
2019-03-08 20:30:16,024 INFO  Time before invoking service:Fri Mar 08 20:30:16 IST 2019
2019-03-08 20:30:16,024 INFO  Initialising service address for VerifySolution
2019-03-08 20:30:16,024 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:16 IST 2019
2019-03-08 20:30:16,946 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:16 IST 2019
2019-03-08 20:30:16,946 INFO  Service responded successfully with required details
2019-03-08 20:30:16,946 INFO  Time after invoking service:Fri Mar 08 20:30:16 IST 2019
2019-03-08 20:30:16,946 INFO  User solution successfully verified
2019-03-08 20:30:16,946 INFO  Processing the response from verify service
2019-03-08 20:30:16,946 INFO  Starting to parse JSON response
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:16,946 INFO  Successfully parsed JSON response
2019-03-08 20:30:16,946 INFO  In the process of generating verify response in HTML
2019-03-08 20:30:17,009 INFO  Successfully generated verify response in HTML
2019-03-08 20:30:17,009 INFO  Successfully processed the response from service
2019-03-08 20:30:20,743 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:30:20,743 INFO  Displaying user solution
2019-03-08 20:30:20,759 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:30:20,759 INFO  Invoking the service to submit the user solution
2019-03-08 20:30:20,759 INFO  Initialising service address for Submit
2019-03-08 20:30:20,759 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:20 IST 2019
2019-03-08 20:30:20,852 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:20 IST 2019
2019-03-08 20:30:20,852 INFO  Service responded successfully with required details
2019-03-08 20:30:20,852 INFO  User solution successfully submitted
2019-03-08 20:30:20,852 INFO  Displaying submission status
2019-03-08 20:30:20,852 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:30:26,463 INFO  Setting request parameters for VerifySolution
2019-03-08 20:30:26,463 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:30:26,463 INFO  Starting to parse the user solution
2019-03-08 20:30:26,463 INFO  Displaying user solution
2019-03-08 20:30:26,525 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-7\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Instructor:\r\n    def __init__(self):\r\n        self.__instructor_name= None\r\n        self.__technology_skill =None\r\n        self.__experience = None\r\n        self.__avg_feedback = None\r\n    def get_instructor_name(self):\r\n        return self.__instructor_name\r\n\r\n\r\n    def get_technology_skill(self):\r\n        return self.__technology_skill\r\n\r\n\r\n    def get_experience(self):\r\n        return self.__experience\r\n\r\n\r\n    def get_avg_feedback(self):\r\n        return self.__avg_feedback\r\n\r\n\r\n    def set_instructor_name(self, instructor_name):\r\n        self.__instructor_name = instructor_name\r\n\r\n\r\n    def set_technology_skill(self, technology_skill):\r\n            self.__technology_skill=technology_skill\r\n\r\n\r\n    def set_experience(self, experience):\r\n        self.__experience = experience\r\n\r\n\r\n    def set_avg_feedback(self,avg_feedback):\r\n        self.__avg_feedback =avg_feedback\r\n    def check_eligibility(self):\r\n        if(self.get_experience()>3 and self.get_avg_feedback()>=4.5):\r\n            return True\r\n        elif(self.get_experience()<=3 and self.get_avg_feedback()>=4):\r\n            return True\r\n        else:\r\n            return False\r\n    def allocate_course(self,technology):\r\n        s=self.check_eligibility()\r\n        if(technology in self.__technology_skill and s ):\r\n            return True\r\n        else:\r\n            return False\r\n\r\nI1 = Instructor()\r\nI1.set_instructor_name(\"Vijay\")\r\nI1.set_experience(3)\r\nI1.set_avg_feedback(4)\r\nI1.set_technology_skill(['C++','JAVA'])\r\nI1.check_eligibility()\r\nI1.allocate_course('C++')\r\n\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:30:26,525 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:30:26,525 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:30:26,525 INFO  Invoking the service to verify the user solution
2019-03-08 20:30:26,525 INFO  Time before invoking service:Fri Mar 08 20:30:26 IST 2019
2019-03-08 20:30:26,525 INFO  Initialising service address for VerifySolution
2019-03-08 20:30:26,525 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:26 IST 2019
2019-03-08 20:30:27,571 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:27 IST 2019
2019-03-08 20:30:27,571 INFO  Service responded successfully with required details
2019-03-08 20:30:27,571 INFO  Time after invoking service:Fri Mar 08 20:30:27 IST 2019
2019-03-08 20:30:27,571 INFO  User solution successfully verified
2019-03-08 20:30:27,571 INFO  Processing the response from verify service
2019-03-08 20:30:27,571 INFO  Starting to parse JSON response
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:27,571 INFO  Successfully parsed JSON response
2019-03-08 20:30:27,571 INFO  In the process of generating verify response in HTML
2019-03-08 20:30:27,649 INFO  Successfully generated verify response in HTML
2019-03-08 20:30:27,649 INFO  Successfully processed the response from service
2019-03-08 20:30:30,806 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:30:30,821 INFO  Displaying user solution
2019-03-08 20:30:30,821 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:30:30,821 INFO  Invoking the service to submit the user solution
2019-03-08 20:30:30,821 INFO  Initialising service address for Submit
2019-03-08 20:30:30,821 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:30 IST 2019
2019-03-08 20:30:30,978 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:30 IST 2019
2019-03-08 20:30:30,978 INFO  Service responded successfully with required details
2019-03-08 20:30:30,978 INFO  User solution successfully submitted
2019-03-08 20:30:30,978 INFO  Displaying submission status
2019-03-08 20:30:30,978 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:30:34,821 INFO  Setting request parameters for VerifySolution
2019-03-08 20:30:34,821 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:30:34,821 INFO  Starting to parse the user solution
2019-03-08 20:30:34,821 INFO  Displaying user solution
2019-03-08 20:30:34,884 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-5\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Vehicle:\r\n    def __init__(self):\r\n        self.__vehicle_id =None\r\n        self.__vehicle_type = None\r\n        self.__vehicle_cost = None\r\n        self.__premium_amount = None\r\n\r\n    def get_vehicle_id(self):\r\n        return self.__vehicle_id\r\n\r\n\r\n    def get_vehicle_type(self):\r\n        return self.__vehicle_type\r\n\r\n    def get_vehicle_cost(self):\r\n        return self.__vehicle_cost\r\n\r\n\r\n    def get_premium_amount(self):\r\n        return self.__premium_amount\r\n\r\n\r\n    def set_vehicle_id(self, vehicle_id):\r\n        self.__vehicle_id = vehicle_id\r\n\r\n\r\n    def set_vehicle_type(self,vehicle_type):\r\n        self.__vehicle_type = vehicle_type\r\n\r\n\r\n    def set_vehicle_cost(self, vehicle_cost):\r\n        self.__vehicle_cost = vehicle_cost\r\n\r\n\r\n    def set_premium_amount(self, premium_amount):\r\n        self.__premium_amount = premium_amount\r\n    \r\n    def calculate_premium(self):\r\n        if(self.get_vehicle_type()==\"Two Wheeler\"):\r\n            amount = 0.02*(self.get_vehicle_cost())\r\n            self.set_premium_amount(amount)\r\n            return self.get_premium_amount()\r\n        elif(self.get_vehicle_type()==\"Four Wheeler\"):\r\n            amount = 0.06*(self.get_vehicle_cost())\r\n            self.set_premium_amount(amount)\r\n            return self.get_premium_amount()\r\n        else:\r\n            return \"Invalid Vehicle\"\r\n    def display_vehicle_details(self):\r\n        return(\"Vehicle Type:\"+self.get_vehicle_type()+\"\\tVehicle ID:\"+self.get_vehicle_id()+\"\\tVehicle Cost:\"+str(self.get_vehicle_cost())+\"\\tPremium Amount:\"+str(self.get_premium_amount())) \r\n        \r\nveh1 = Vehicle()\r\nveh1.set_vehicle_type(\"Four Wheeler\")\r\nveh1.set_vehicle_id(\"RJ31-2930\")\r\nveh1.set_vehicle_cost(1000000)\r\nveh1.calculate_premium()\r\nprint(veh1.display_vehicle_details())\r\n          \r\n    \r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:30:34,884 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:30:34,884 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:30:34,884 INFO  Invoking the service to verify the user solution
2019-03-08 20:30:34,884 INFO  Time before invoking service:Fri Mar 08 20:30:34 IST 2019
2019-03-08 20:30:34,884 INFO  Initialising service address for VerifySolution
2019-03-08 20:30:34,884 INFO  Time before invoking service In SUPER:Fri Mar 08 20:30:34 IST 2019
2019-03-08 20:30:35,743 INFO  Time after invoking service In SUPER:Fri Mar 08 20:30:35 IST 2019
2019-03-08 20:30:35,743 INFO  Service responded successfully with required details
2019-03-08 20:30:35,743 INFO  Time after invoking service:Fri Mar 08 20:30:35 IST 2019
2019-03-08 20:30:35,743 INFO  User solution successfully verified
2019-03-08 20:30:35,743 INFO  Processing the response from verify service
2019-03-08 20:30:35,743 INFO  Starting to parse JSON response
2019-03-08 20:30:35,743 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:35,743 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:35,743 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:35,743 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:30:35,743 INFO  Successfully parsed JSON response
2019-03-08 20:30:35,743 INFO  In the process of generating verify response in HTML
2019-03-08 20:30:35,808 INFO  Successfully generated verify response in HTML
2019-03-08 20:30:35,808 INFO  Successfully processed the response from service
2019-03-08 20:31:05,197 INFO  Setting request parameters for VerifySolution
2019-03-08 20:31:05,197 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:31:05,197 INFO  Starting to parse the user solution
2019-03-08 20:31:05,197 INFO  Displaying user solution
2019-03-08 20:31:05,259 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-5\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Vehicle:\r\n    def __init__(self):\r\n        self.__vehicle_id =None\r\n        self.__vehicle_type = None\r\n        self.__vehicle_cost = None\r\n        self.__premium_amount = None\r\n\r\n    def get_vehicle_id(self):\r\n        return self.__vehicle_id\r\n\r\n\r\n    def get_vehicle_type(self):\r\n        return self.__vehicle_type\r\n\r\n    def get_vehicle_cost(self):\r\n        return self.__vehicle_cost\r\n\r\n\r\n    def get_premium_amount(self):\r\n        return self.__premium_amount\r\n\r\n\r\n    def set_vehicle_id(self, vehicle_id):\r\n        self.__vehicle_id = vehicle_id\r\n\r\n\r\n    def set_vehicle_type(self,vehicle_type):\r\n        self.__vehicle_type = vehicle_type\r\n\r\n\r\n    def set_vehicle_cost(self, vehicle_cost):\r\n        self.__vehicle_cost = vehicle_cost\r\n\r\n\r\n    def set_premium_amount(self, premium_amount):\r\n        self.__premium_amount = premium_amount\r\n    \r\n    def calculate_premium(self):\r\n        if(self.get_vehicle_type()==\"Two Wheeler\"):\r\n            amount = 0.02*(self.get_vehicle_cost())\r\n            self.set_premium_amount(amount)\r\n            return self.get_premium_amount()\r\n        elif(self.get_vehicle_type()==\"Four Wheeler\"):\r\n            amount = 0.06*(self.get_vehicle_cost())\r\n            self.set_premium_amount(amount)\r\n            return self.get_premium_amount()\r\n        else:\r\n            return \"Invalid Vehicle\"\r\n    def display_vehicle_details(self):\r\n        return(\"Vehicle Type:\"+self.get_vehicle_type()+\r\n               \"\\tVehicle ID:\"+self.get_vehicle_id()+\"\\tVehicle Cost:\"+\r\n               str(self.get_vehicle_cost())+\"\\tPremium Amount:\"+\r\n               str(self.get_premium_amount())) \r\n        \r\nveh1 = Vehicle()\r\nveh1.set_vehicle_type(\"Four Wheeler\")\r\nveh1.set_vehicle_id(\"RJ31-2930\")\r\nveh1.set_vehicle_cost(1000000)\r\nveh1.calculate_premium()\r\nprint(veh1.display_vehicle_details())\r\n          \r\n    \r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:31:05,259 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:31:05,259 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:31:05,259 INFO  Invoking the service to verify the user solution
2019-03-08 20:31:05,259 INFO  Time before invoking service:Fri Mar 08 20:31:05 IST 2019
2019-03-08 20:31:05,259 INFO  Initialising service address for VerifySolution
2019-03-08 20:31:05,259 INFO  Time before invoking service In SUPER:Fri Mar 08 20:31:05 IST 2019
2019-03-08 20:31:06,150 INFO  Time after invoking service In SUPER:Fri Mar 08 20:31:06 IST 2019
2019-03-08 20:31:06,150 INFO  Service responded successfully with required details
2019-03-08 20:31:06,150 INFO  Time after invoking service:Fri Mar 08 20:31:06 IST 2019
2019-03-08 20:31:06,150 INFO  User solution successfully verified
2019-03-08 20:31:06,150 INFO  Processing the response from verify service
2019-03-08 20:31:06,150 INFO  Starting to parse JSON response
2019-03-08 20:31:06,150 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:31:06,150 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:31:06,150 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:31:06,150 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:31:06,150 INFO  Successfully parsed JSON response
2019-03-08 20:31:06,150 INFO  In the process of generating verify response in HTML
2019-03-08 20:31:06,228 INFO  Successfully generated verify response in HTML
2019-03-08 20:31:06,228 INFO  Successfully processed the response from service
2019-03-08 20:31:09,713 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:31:09,713 INFO  Displaying user solution
2019-03-08 20:31:09,729 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:31:09,729 INFO  Invoking the service to submit the user solution
2019-03-08 20:31:09,729 INFO  Initialising service address for Submit
2019-03-08 20:31:09,729 INFO  Time before invoking service In SUPER:Fri Mar 08 20:31:09 IST 2019
2019-03-08 20:31:09,901 INFO  Time after invoking service In SUPER:Fri Mar 08 20:31:09 IST 2019
2019-03-08 20:31:09,901 INFO  Service responded successfully with required details
2019-03-08 20:31:09,901 INFO  User solution successfully submitted
2019-03-08 20:31:09,901 INFO  Displaying submission status
2019-03-08 20:31:09,901 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:31:16,838 INFO  Setting request parameters for VerifySolution
2019-03-08 20:31:16,838 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:31:16,838 INFO  Starting to parse the user solution
2019-03-08 20:31:16,838 INFO  Displaying user solution
2019-03-08 20:31:16,901 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-3\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Customer:\r\n    def __init__(self):\r\n        self.customer_name = None\r\n        self.bill_amount = None\r\n    def purchases(self):\r\n        bill_amount = self.bill_amount\r\n        amount = 0.95*bill_amount\r\n        return amount\r\n    def pays_bill(self,amount):\r\n        return( self.customer_name, \"pays bill amount of Rs.\",amount)\r\n    \r\nc1 = Customer()\r\nc1.customer_name = \"Vijay\"\r\nc1.bill_amount = 5000\r\nprint(c1.pays_bill(c1.purchases()))\r\n","asgnmtId":"3","SolutionFileName":"Assign3.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:31:16,901 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:31:16,901 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:31:16,901 INFO  Invoking the service to verify the user solution
2019-03-08 20:31:16,901 INFO  Time before invoking service:Fri Mar 08 20:31:16 IST 2019
2019-03-08 20:31:16,901 INFO  Initialising service address for VerifySolution
2019-03-08 20:31:16,901 INFO  Time before invoking service In SUPER:Fri Mar 08 20:31:16 IST 2019
2019-03-08 20:31:17,779 INFO  Time after invoking service In SUPER:Fri Mar 08 20:31:17 IST 2019
2019-03-08 20:31:17,779 INFO  Service responded successfully with required details
2019-03-08 20:31:17,780 INFO  Time after invoking service:Fri Mar 08 20:31:17 IST 2019
2019-03-08 20:31:17,780 INFO  User solution successfully verified
2019-03-08 20:31:17,780 INFO  Processing the response from verify service
2019-03-08 20:31:17,781 INFO  Starting to parse JSON response
2019-03-08 20:31:17,782 INFO  Successfully parsed JSON response
2019-03-08 20:31:17,783 INFO  In the process of generating verify response in HTML
2019-03-08 20:31:17,856 INFO  Successfully generated verify response in HTML
2019-03-08 20:31:17,856 INFO  Successfully processed the response from service
2019-03-08 20:31:21,260 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:31:21,260 INFO  Displaying user solution
2019-03-08 20:31:21,276 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:31:21,276 INFO  Invoking the service to submit the user solution
2019-03-08 20:31:21,276 INFO  Initialising service address for Submit
2019-03-08 20:31:21,276 INFO  Time before invoking service In SUPER:Fri Mar 08 20:31:21 IST 2019
2019-03-08 20:31:21,399 INFO  Time after invoking service In SUPER:Fri Mar 08 20:31:21 IST 2019
2019-03-08 20:31:21,399 INFO  Service responded successfully with required details
2019-03-08 20:31:21,399 INFO  User solution successfully submitted
2019-03-08 20:31:21,399 INFO  Displaying submission status
2019-03-08 20:31:21,399 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:36:23,204 INFO  Setting request parameters for VerifySolution
2019-03-08 20:36:23,204 INFO  Initiating to process and prepare Input for the verify service
2019-03-08 20:36:23,204 INFO  Starting to parse the user solution
2019-03-08 20:36:23,204 INFO  Displaying user solution
2019-03-08 20:36:23,267 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-9\r\n'''\r\nCreated on Mar 5, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nclass Student:\r\n    def __init__(self):\r\n        self.__student_id = None\r\n        self.__age = None\r\n        self.__marks = None\r\n        self.__course_id = None\r\n        self.__fees = None\r\n\r\n    def get_course_id(self):\r\n        return self.__course_id\r\n\r\n\r\n    def get_fees(self):\r\n        return self.__fees\r\n\r\n\r\n    def get_student_id(self):\r\n        return self.__student_id\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_marks(self):\r\n        return self.__marks\r\n\r\n\r\n    def set_student_id(self, student_id):\r\n        self.__student_id = student_id\r\n\r\n\r\n    def set_age(self, age):\r\n        self.__age = age\r\n\r\n\r\n    def set_marks(self, marks):\r\n        self.__marks = marks\r\n        \r\n    def validate_marks(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100):\r\n            return True\r\n        else:\r\n            return False\r\n    def validate_age(self):\r\n        if(self.get_age()>20):\r\n            return True\r\n        else:\r\n            return False\r\n    def check_qualification(self):\r\n        if(self.get_marks()>=0 and self.get_marks()<=100 and self.get_age()>20):\r\n            if(self.get_marks()>=65):\r\n                return True\r\n            else:\r\n                return False\r\n        else:\r\n            return False\r\n    def choose_course(self,course_id):\r\n         if(course_id==1001):\r\n             self.__course_id = 1001\r\n             self.__fees = 25575.0\r\n             if(self.get_marks()>85):\r\n                 self.__fees = 0.75*self.__fees\r\n             return True\r\n         elif(course_id==1002):\r\n             self.__course_id = 1002\r\n             self.__fees = 15500.0\r\n             if(self.get_marks()>85):\r\n                 self.__fees= 0.75*self.__fees\r\n             return True\r\n         else:\r\n             return False\r\n   \r\ns1 = Student()\r\ns1.set_student_id(167)\r\ns1.set_age(22)\r\ns1.set_marks(85)\r\ns1.validate_marks()\r\ns1.validate_age()\r\ns1.check_qualification()\r\ns1.choose_course(1002)\r\n\r\n\r\n        \r\n        \r\n\r\n    \r\n","asgnmtId":"9","SolutionFileName":"Assign9.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-08 20:36:23,267 INFO  Successfully processed and prepared the input for the verify service
2019-03-08 20:36:23,267 INFO  Successfully set the request parameters for VerifySolution
2019-03-08 20:36:23,267 INFO  Invoking the service to verify the user solution
2019-03-08 20:36:23,267 INFO  Time before invoking service:Fri Mar 08 20:36:23 IST 2019
2019-03-08 20:36:23,267 INFO  Initialising service address for VerifySolution
2019-03-08 20:36:23,267 INFO  Time before invoking service In SUPER:Fri Mar 08 20:36:23 IST 2019
2019-03-08 20:36:24,456 INFO  Time after invoking service In SUPER:Fri Mar 08 20:36:24 IST 2019
2019-03-08 20:36:24,456 INFO  Service responded successfully with required details
2019-03-08 20:36:24,456 INFO  Time after invoking service:Fri Mar 08 20:36:24 IST 2019
2019-03-08 20:36:24,456 INFO  User solution successfully verified
2019-03-08 20:36:24,456 INFO  Processing the response from verify service
2019-03-08 20:36:24,456 INFO  Starting to parse JSON response
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-08 20:36:24,472 INFO  Successfully parsed JSON response
2019-03-08 20:36:24,472 INFO  In the process of generating verify response in HTML
2019-03-08 20:36:24,534 INFO  Successfully generated verify response in HTML
2019-03-08 20:36:24,534 INFO  Successfully processed the response from service
2019-03-08 20:36:27,359 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:36:27,359 INFO  Displaying user solution
2019-03-08 20:36:27,375 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:36:27,375 INFO  Invoking the service to submit the user solution
2019-03-08 20:36:27,375 INFO  Initialising service address for Submit
2019-03-08 20:36:27,375 INFO  Time before invoking service In SUPER:Fri Mar 08 20:36:27 IST 2019
2019-03-08 20:36:27,516 INFO  Time after invoking service In SUPER:Fri Mar 08 20:36:27 IST 2019
2019-03-08 20:36:27,516 INFO  Service responded successfully with required details
2019-03-08 20:36:27,516 INFO  User solution successfully submitted
2019-03-08 20:36:27,516 INFO  Displaying submission status
2019-03-08 20:36:27,516 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-08 20:36:29,379 INFO  Initiating to process and prepare Input for the submit service
2019-03-08 20:36:29,379 INFO  Displaying user solution
2019-03-08 20:36:29,395 INFO  Successfully processed and prepared the input for the submit service
2019-03-08 20:36:29,395 INFO  Invoking the service to submit the user solution
2019-03-08 20:36:29,395 INFO  Initialising service address for Submit
2019-03-08 20:36:29,395 INFO  Time before invoking service In SUPER:Fri Mar 08 20:36:29 IST 2019
2019-03-08 20:36:29,473 INFO  Time after invoking service In SUPER:Fri Mar 08 20:36:29 IST 2019
2019-03-08 20:36:29,473 INFO  Service responded successfully with required details
2019-03-08 20:36:29,473 INFO  User solution successfully submitted
2019-03-08 20:36:29,473 INFO  Displaying submission status
2019-03-08 20:36:29,473 INFO  Displayed submission status successfullySuccessfully Submitted!
