2019-03-11 10:20:38,807 INFO  Loading Baseframework Plugin
2019-03-11 10:20:38,812 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-11 10:20:38,829 INFO  Loading the Menu - HandsOn
2019-03-11 10:20:38,877 INFO  Successfully loaded the Menu - HandsOn
2019-03-11 11:02:25,904 INFO  Loading Programming Assignment Plugin
2019-03-11 11:02:26,434 INFO  Setting request parameters for VerifySolution
2019-03-11 11:02:26,434 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:02:26,440 INFO  Starting to parse the user solution
2019-03-11 11:02:26,442 INFO  Displaying user solution
2019-03-11 11:02:26,595 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.counter\r\n        DirectToHomeService.counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:02:26,598 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:02:26,599 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:02:26,599 INFO  Invoking the service to verify the user solution
2019-03-11 11:02:26,600 INFO  Time before invoking service:Mon Mar 11 11:02:26 IST 2019
2019-03-11 11:02:26,601 INFO  Initialising service address for VerifySolution
2019-03-11 11:02:26,602 INFO  Time before invoking service In SUPER:Mon Mar 11 11:02:26 IST 2019
2019-03-11 11:02:27,948 INFO  Time after invoking service In SUPER:Mon Mar 11 11:02:27 IST 2019
2019-03-11 11:02:27,949 INFO  Service responded successfully with required details
2019-03-11 11:02:27,949 INFO  Time after invoking service:Mon Mar 11 11:02:27 IST 2019
2019-03-11 11:02:27,949 INFO  User solution successfully verified
2019-03-11 11:02:27,950 INFO  Processing the response from verify service
2019-03-11 11:02:27,953 INFO  Starting to parse JSON response
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,958 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:27,962 INFO  Successfully parsed JSON response
2019-03-11 11:02:27,964 INFO  In the process of generating verify response in HTML
2019-03-11 11:02:28,080 INFO  Successfully generated verify response in HTML
2019-03-11 11:02:28,081 INFO  Successfully processed the response from service
2019-03-11 11:02:56,628 INFO  Setting request parameters for VerifySolution
2019-03-11 11:02:56,628 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:02:56,628 INFO  Starting to parse the user solution
2019-03-11 11:02:56,628 INFO  Displaying user solution
2019-03-11 11:02:56,659 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.counter\r\n        DirectToHomeService.counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:02:56,659 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:02:56,659 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:02:56,659 INFO  Invoking the service to verify the user solution
2019-03-11 11:02:56,659 INFO  Time before invoking service:Mon Mar 11 11:02:56 IST 2019
2019-03-11 11:02:56,659 INFO  Initialising service address for VerifySolution
2019-03-11 11:02:56,659 INFO  Time before invoking service In SUPER:Mon Mar 11 11:02:56 IST 2019
2019-03-11 11:02:57,777 INFO  Time after invoking service In SUPER:Mon Mar 11 11:02:57 IST 2019
2019-03-11 11:02:57,777 INFO  Service responded successfully with required details
2019-03-11 11:02:57,777 INFO  Time after invoking service:Mon Mar 11 11:02:57 IST 2019
2019-03-11 11:02:57,777 INFO  User solution successfully verified
2019-03-11 11:02:57,777 INFO  Processing the response from verify service
2019-03-11 11:02:57,792 INFO  Starting to parse JSON response
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:02:57,792 INFO  Successfully parsed JSON response
2019-03-11 11:02:57,792 INFO  In the process of generating verify response in HTML
2019-03-11 11:02:57,870 INFO  Successfully generated verify response in HTML
2019-03-11 11:02:57,870 INFO  Successfully processed the response from service
2019-03-11 11:04:23,465 INFO  Setting request parameters for VerifySolution
2019-03-11 11:04:23,465 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:04:23,465 INFO  Starting to parse the user solution
2019-03-11 11:04:23,480 INFO  Displaying user solution
2019-03-11 11:04:23,512 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:04:23,512 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:04:23,512 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:04:23,512 INFO  Invoking the service to verify the user solution
2019-03-11 11:04:23,512 INFO  Time before invoking service:Mon Mar 11 11:04:23 IST 2019
2019-03-11 11:04:23,512 INFO  Initialising service address for VerifySolution
2019-03-11 11:04:23,512 INFO  Time before invoking service In SUPER:Mon Mar 11 11:04:23 IST 2019
2019-03-11 11:04:24,671 INFO  Time after invoking service In SUPER:Mon Mar 11 11:04:24 IST 2019
2019-03-11 11:04:24,671 INFO  Service responded successfully with required details
2019-03-11 11:04:24,671 INFO  Time after invoking service:Mon Mar 11 11:04:24 IST 2019
2019-03-11 11:04:24,671 INFO  User solution successfully verified
2019-03-11 11:04:24,671 INFO  Processing the response from verify service
2019-03-11 11:04:24,671 INFO  Starting to parse JSON response
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:04:24,671 INFO  Successfully parsed JSON response
2019-03-11 11:04:24,671 INFO  In the process of generating verify response in HTML
2019-03-11 11:04:24,765 INFO  Successfully generated verify response in HTML
2019-03-11 11:04:24,765 INFO  Successfully processed the response from service
2019-03-11 11:09:03,266 INFO  Setting request parameters for VerifySolution
2019-03-11 11:09:03,266 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:09:03,266 INFO  Starting to parse the user solution
2019-03-11 11:09:03,266 INFO  Displaying user solution
2019-03-11 11:09:03,313 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                else:\r\n                    return -1\r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:09:03,313 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:09:03,313 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:09:03,313 INFO  Invoking the service to verify the user solution
2019-03-11 11:09:03,313 INFO  Time before invoking service:Mon Mar 11 11:09:03 IST 2019
2019-03-11 11:09:03,313 INFO  Initialising service address for VerifySolution
2019-03-11 11:09:03,313 INFO  Time before invoking service In SUPER:Mon Mar 11 11:09:03 IST 2019
2019-03-11 11:09:04,530 INFO  Time after invoking service In SUPER:Mon Mar 11 11:09:04 IST 2019
2019-03-11 11:09:04,530 INFO  Service responded successfully with required details
2019-03-11 11:09:04,530 INFO  Time after invoking service:Mon Mar 11 11:09:04 IST 2019
2019-03-11 11:09:04,530 INFO  User solution successfully verified
2019-03-11 11:09:04,530 INFO  Processing the response from verify service
2019-03-11 11:09:04,530 INFO  Starting to parse JSON response
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,530 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:09:04,546 INFO  Successfully parsed JSON response
2019-03-11 11:09:04,546 INFO  In the process of generating verify response in HTML
2019-03-11 11:09:04,624 INFO  Successfully generated verify response in HTML
2019-03-11 11:09:04,624 INFO  Successfully processed the response from service
2019-03-11 11:10:03,517 INFO  Setting request parameters for VerifySolution
2019-03-11 11:10:03,517 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:10:03,517 INFO  Starting to parse the user solution
2019-03-11 11:10:03,517 INFO  Displaying user solution
2019-03-11 11:10:03,548 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                else:\r\n                    return -1\r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:10:03,548 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:10:03,548 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:10:03,548 INFO  Invoking the service to verify the user solution
2019-03-11 11:10:03,548 INFO  Time before invoking service:Mon Mar 11 11:10:03 IST 2019
2019-03-11 11:10:03,548 INFO  Initialising service address for VerifySolution
2019-03-11 11:10:03,548 INFO  Time before invoking service In SUPER:Mon Mar 11 11:10:03 IST 2019
2019-03-11 11:10:04,951 INFO  Time after invoking service In SUPER:Mon Mar 11 11:10:04 IST 2019
2019-03-11 11:10:04,951 INFO  Service responded successfully with required details
2019-03-11 11:10:04,951 INFO  Time after invoking service:Mon Mar 11 11:10:04 IST 2019
2019-03-11 11:10:04,951 INFO  User solution successfully verified
2019-03-11 11:10:04,951 INFO  Processing the response from verify service
2019-03-11 11:10:04,951 INFO  Starting to parse JSON response
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:10:04,951 INFO  Successfully parsed JSON response
2019-03-11 11:10:04,951 INFO  In the process of generating verify response in HTML
2019-03-11 11:10:05,031 INFO  Successfully generated verify response in HTML
2019-03-11 11:10:05,031 INFO  Successfully processed the response from service
2019-03-11 11:11:12,392 INFO  Setting request parameters for VerifySolution
2019-03-11 11:11:12,392 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:11:12,392 INFO  Starting to parse the user solution
2019-03-11 11:11:12,392 INFO  Displaying user solution
2019-03-11 11:11:12,424 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass Basepackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                else:\r\n                    return -1\r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:11:12,424 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:11:12,424 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:11:12,424 INFO  Invoking the service to verify the user solution
2019-03-11 11:11:12,424 INFO  Time before invoking service:Mon Mar 11 11:11:12 IST 2019
2019-03-11 11:11:12,424 INFO  Initialising service address for VerifySolution
2019-03-11 11:11:12,424 INFO  Time before invoking service In SUPER:Mon Mar 11 11:11:12 IST 2019
2019-03-11 11:11:14,018 INFO  Time after invoking service In SUPER:Mon Mar 11 11:11:14 IST 2019
2019-03-11 11:11:14,018 INFO  Service responded successfully with required details
2019-03-11 11:11:14,018 INFO  Time after invoking service:Mon Mar 11 11:11:14 IST 2019
2019-03-11 11:11:14,018 INFO  User solution successfully verified
2019-03-11 11:11:14,018 INFO  Processing the response from verify service
2019-03-11 11:11:14,033 INFO  Starting to parse JSON response
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:14,033 INFO  Successfully parsed JSON response
2019-03-11 11:11:14,033 INFO  In the process of generating verify response in HTML
2019-03-11 11:11:14,111 INFO  Successfully generated verify response in HTML
2019-03-11 11:11:14,111 INFO  Successfully processed the response from service
2019-03-11 11:11:47,907 INFO  Setting request parameters for VerifySolution
2019-03-11 11:11:47,907 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:11:47,907 INFO  Starting to parse the user solution
2019-03-11 11:11:47,907 INFO  Displaying user solution
2019-03-11 11:11:47,938 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                else:\r\n                    return -1\r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:11:47,938 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:11:47,938 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:11:47,938 INFO  Invoking the service to verify the user solution
2019-03-11 11:11:47,938 INFO  Time before invoking service:Mon Mar 11 11:11:47 IST 2019
2019-03-11 11:11:47,938 INFO  Initialising service address for VerifySolution
2019-03-11 11:11:47,938 INFO  Time before invoking service In SUPER:Mon Mar 11 11:11:47 IST 2019
2019-03-11 11:11:49,050 INFO  Time after invoking service In SUPER:Mon Mar 11 11:11:49 IST 2019
2019-03-11 11:11:49,050 INFO  Service responded successfully with required details
2019-03-11 11:11:49,050 INFO  Time after invoking service:Mon Mar 11 11:11:49 IST 2019
2019-03-11 11:11:49,050 INFO  User solution successfully verified
2019-03-11 11:11:49,050 INFO  Processing the response from verify service
2019-03-11 11:11:49,050 INFO  Starting to parse JSON response
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:11:49,050 INFO  Successfully parsed JSON response
2019-03-11 11:11:49,050 INFO  In the process of generating verify response in HTML
2019-03-11 11:11:49,128 INFO  Successfully generated verify response in HTML
2019-03-11 11:11:49,128 INFO  Successfully processed the response from service
2019-03-11 11:13:31,707 INFO  Setting request parameters for VerifySolution
2019-03-11 11:13:31,707 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:13:31,707 INFO  Starting to parse the user solution
2019-03-11 11:13:31,707 INFO  Displaying user solution
2019-03-11 11:13:31,754 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:13:31,754 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:13:31,754 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:13:31,754 INFO  Invoking the service to verify the user solution
2019-03-11 11:13:31,754 INFO  Time before invoking service:Mon Mar 11 11:13:31 IST 2019
2019-03-11 11:13:31,754 INFO  Initialising service address for VerifySolution
2019-03-11 11:13:31,754 INFO  Time before invoking service In SUPER:Mon Mar 11 11:13:31 IST 2019
2019-03-11 11:13:32,969 INFO  Time after invoking service In SUPER:Mon Mar 11 11:13:32 IST 2019
2019-03-11 11:13:32,969 INFO  Service responded successfully with required details
2019-03-11 11:13:32,969 INFO  Time after invoking service:Mon Mar 11 11:13:32 IST 2019
2019-03-11 11:13:32,969 INFO  User solution successfully verified
2019-03-11 11:13:32,969 INFO  Processing the response from verify service
2019-03-11 11:13:32,969 INFO  Starting to parse JSON response
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:13:32,969 INFO  Successfully parsed JSON response
2019-03-11 11:13:32,969 INFO  In the process of generating verify response in HTML
2019-03-11 11:13:33,049 INFO  Successfully generated verify response in HTML
2019-03-11 11:13:33,049 INFO  Successfully processed the response from service
2019-03-11 11:15:17,332 INFO  Setting request parameters for VerifySolution
2019-03-11 11:15:17,332 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:15:17,332 INFO  Starting to parse the user solution
2019-03-11 11:15:17,332 INFO  Displaying user solution
2019-03-11 11:15:17,363 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name().lower()==\"silver\" or self.get_base_pack_name().lower()==\"gold\" or self.get_base_pack_name().lower()==\"platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:15:17,363 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:15:17,379 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:15:17,379 INFO  Invoking the service to verify the user solution
2019-03-11 11:15:17,379 INFO  Time before invoking service:Mon Mar 11 11:15:17 IST 2019
2019-03-11 11:15:17,379 INFO  Initialising service address for VerifySolution
2019-03-11 11:15:17,379 INFO  Time before invoking service In SUPER:Mon Mar 11 11:15:17 IST 2019
2019-03-11 11:15:18,502 INFO  Time after invoking service In SUPER:Mon Mar 11 11:15:18 IST 2019
2019-03-11 11:15:18,502 INFO  Service responded successfully with required details
2019-03-11 11:15:18,502 INFO  Time after invoking service:Mon Mar 11 11:15:18 IST 2019
2019-03-11 11:15:18,502 INFO  User solution successfully verified
2019-03-11 11:15:18,502 INFO  Processing the response from verify service
2019-03-11 11:15:18,517 INFO  Starting to parse JSON response
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:15:18,517 INFO  Successfully parsed JSON response
2019-03-11 11:15:18,517 INFO  In the process of generating verify response in HTML
2019-03-11 11:15:18,611 INFO  Successfully generated verify response in HTML
2019-03-11 11:15:18,611 INFO  Successfully processed the response from service
2019-03-11 11:16:27,179 INFO  Setting request parameters for VerifySolution
2019-03-11 11:16:27,179 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:16:27,179 INFO  Starting to parse the user solution
2019-03-11 11:16:27,195 INFO  Displaying user solution
2019-03-11 11:16:27,226 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name().lower()==\"silver\" or self.get_base_pack_name().lower()==\"gold\" or self.get_base_pack_name().lower()==\"platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:16:27,226 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:16:27,226 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:16:27,226 INFO  Invoking the service to verify the user solution
2019-03-11 11:16:27,226 INFO  Time before invoking service:Mon Mar 11 11:16:27 IST 2019
2019-03-11 11:16:27,226 INFO  Initialising service address for VerifySolution
2019-03-11 11:16:27,226 INFO  Time before invoking service In SUPER:Mon Mar 11 11:16:27 IST 2019
2019-03-11 11:16:28,441 INFO  Time after invoking service In SUPER:Mon Mar 11 11:16:28 IST 2019
2019-03-11 11:16:28,441 INFO  Service responded successfully with required details
2019-03-11 11:16:28,441 INFO  Time after invoking service:Mon Mar 11 11:16:28 IST 2019
2019-03-11 11:16:28,441 INFO  User solution successfully verified
2019-03-11 11:16:28,456 INFO  Processing the response from verify service
2019-03-11 11:16:28,456 INFO  Starting to parse JSON response
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:16:28,456 INFO  Successfully parsed JSON response
2019-03-11 11:16:28,456 INFO  In the process of generating verify response in HTML
2019-03-11 11:16:28,535 INFO  Successfully generated verify response in HTML
2019-03-11 11:16:28,535 INFO  Successfully processed the response from service
2019-03-11 11:18:28,848 INFO  Setting request parameters for VerifySolution
2019-03-11 11:18:28,848 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:18:28,848 INFO  Starting to parse the user solution
2019-03-11 11:18:28,848 INFO  Displaying user solution
2019-03-11 11:18:28,879 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:18:28,879 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:18:28,879 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:18:28,879 INFO  Invoking the service to verify the user solution
2019-03-11 11:18:28,879 INFO  Time before invoking service:Mon Mar 11 11:18:28 IST 2019
2019-03-11 11:18:28,879 INFO  Initialising service address for VerifySolution
2019-03-11 11:18:28,879 INFO  Time before invoking service In SUPER:Mon Mar 11 11:18:28 IST 2019
2019-03-11 11:18:30,099 INFO  Time after invoking service In SUPER:Mon Mar 11 11:18:30 IST 2019
2019-03-11 11:18:30,099 INFO  Service responded successfully with required details
2019-03-11 11:18:30,099 INFO  Time after invoking service:Mon Mar 11 11:18:30 IST 2019
2019-03-11 11:18:30,099 INFO  User solution successfully verified
2019-03-11 11:18:30,099 INFO  Processing the response from verify service
2019-03-11 11:18:30,099 INFO  Starting to parse JSON response
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:18:30,099 INFO  Successfully parsed JSON response
2019-03-11 11:18:30,099 INFO  In the process of generating verify response in HTML
2019-03-11 11:18:30,177 INFO  Successfully generated verify response in HTML
2019-03-11 11:18:30,177 INFO  Successfully processed the response from service
2019-03-11 11:19:28,008 INFO  Setting request parameters for VerifySolution
2019-03-11 11:19:28,008 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:19:28,008 INFO  Starting to parse the user solution
2019-03-11 11:19:28,008 INFO  Displaying user solution
2019-03-11 11:19:28,055 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:19:28,055 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:19:28,055 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:19:28,055 INFO  Invoking the service to verify the user solution
2019-03-11 11:19:28,055 INFO  Time before invoking service:Mon Mar 11 11:19:28 IST 2019
2019-03-11 11:19:28,055 INFO  Initialising service address for VerifySolution
2019-03-11 11:19:28,055 INFO  Time before invoking service In SUPER:Mon Mar 11 11:19:28 IST 2019
2019-03-11 11:19:29,128 INFO  Time after invoking service In SUPER:Mon Mar 11 11:19:29 IST 2019
2019-03-11 11:19:29,128 INFO  Service responded successfully with required details
2019-03-11 11:19:29,128 INFO  Time after invoking service:Mon Mar 11 11:19:29 IST 2019
2019-03-11 11:19:29,128 INFO  User solution successfully verified
2019-03-11 11:19:29,128 INFO  Processing the response from verify service
2019-03-11 11:19:29,128 INFO  Starting to parse JSON response
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:29,144 INFO  Successfully parsed JSON response
2019-03-11 11:19:29,144 INFO  In the process of generating verify response in HTML
2019-03-11 11:19:29,222 INFO  Successfully generated verify response in HTML
2019-03-11 11:19:29,222 INFO  Successfully processed the response from service
2019-03-11 11:19:47,977 INFO  Setting request parameters for VerifySolution
2019-03-11 11:19:47,977 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:19:47,977 INFO  Starting to parse the user solution
2019-03-11 11:19:47,977 INFO  Displaying user solution
2019-03-11 11:19:48,008 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:19:48,008 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:19:48,008 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:19:48,008 INFO  Invoking the service to verify the user solution
2019-03-11 11:19:48,008 INFO  Time before invoking service:Mon Mar 11 11:19:48 IST 2019
2019-03-11 11:19:48,008 INFO  Initialising service address for VerifySolution
2019-03-11 11:19:48,008 INFO  Time before invoking service In SUPER:Mon Mar 11 11:19:48 IST 2019
2019-03-11 11:19:49,365 INFO  Time after invoking service In SUPER:Mon Mar 11 11:19:49 IST 2019
2019-03-11 11:19:49,365 INFO  Service responded successfully with required details
2019-03-11 11:19:49,365 INFO  Time after invoking service:Mon Mar 11 11:19:49 IST 2019
2019-03-11 11:19:49,365 INFO  User solution successfully verified
2019-03-11 11:19:49,365 INFO  Processing the response from verify service
2019-03-11 11:19:49,365 INFO  Starting to parse JSON response
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:19:49,365 INFO  Successfully parsed JSON response
2019-03-11 11:19:49,365 INFO  In the process of generating verify response in HTML
2019-03-11 11:19:49,427 INFO  Successfully generated verify response in HTML
2019-03-11 11:19:49,427 INFO  Successfully processed the response from service
2019-03-11 11:20:06,991 INFO  Setting request parameters for VerifySolution
2019-03-11 11:20:06,991 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:20:06,991 INFO  Starting to parse the user solution
2019-03-11 11:20:06,991 INFO  Displaying user solution
2019-03-11 11:20:07,038 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name()==\"Silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name()==\"Platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:20:07,038 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:20:07,038 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:20:07,038 INFO  Invoking the service to verify the user solution
2019-03-11 11:20:07,038 INFO  Time before invoking service:Mon Mar 11 11:20:07 IST 2019
2019-03-11 11:20:07,038 INFO  Initialising service address for VerifySolution
2019-03-11 11:20:07,038 INFO  Time before invoking service In SUPER:Mon Mar 11 11:20:07 IST 2019
2019-03-11 11:20:08,117 INFO  Time after invoking service In SUPER:Mon Mar 11 11:20:08 IST 2019
2019-03-11 11:20:08,117 INFO  Service responded successfully with required details
2019-03-11 11:20:08,117 INFO  Time after invoking service:Mon Mar 11 11:20:08 IST 2019
2019-03-11 11:20:08,117 INFO  User solution successfully verified
2019-03-11 11:20:08,117 INFO  Processing the response from verify service
2019-03-11 11:20:08,117 INFO  Starting to parse JSON response
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:20:08,117 INFO  Successfully parsed JSON response
2019-03-11 11:20:08,117 INFO  In the process of generating verify response in HTML
2019-03-11 11:20:08,211 INFO  Successfully generated verify response in HTML
2019-03-11 11:20:08,211 INFO  Successfully processed the response from service
2019-03-11 11:22:21,463 INFO  Setting request parameters for VerifySolution
2019-03-11 11:22:21,463 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:22:21,463 INFO  Starting to parse the user solution
2019-03-11 11:22:21,463 INFO  Displaying user solution
2019-03-11 11:22:21,495 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            else:\r\n                return -1\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:22:21,495 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:22:21,495 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:22:21,495 INFO  Invoking the service to verify the user solution
2019-03-11 11:22:21,510 INFO  Time before invoking service:Mon Mar 11 11:22:21 IST 2019
2019-03-11 11:22:21,510 INFO  Initialising service address for VerifySolution
2019-03-11 11:22:21,510 INFO  Time before invoking service In SUPER:Mon Mar 11 11:22:21 IST 2019
2019-03-11 11:22:22,789 INFO  Time after invoking service In SUPER:Mon Mar 11 11:22:22 IST 2019
2019-03-11 11:22:22,789 INFO  Service responded successfully with required details
2019-03-11 11:22:22,789 INFO  Time after invoking service:Mon Mar 11 11:22:22 IST 2019
2019-03-11 11:22:22,789 INFO  User solution successfully verified
2019-03-11 11:22:22,789 INFO  Processing the response from verify service
2019-03-11 11:22:22,804 INFO  Starting to parse JSON response
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:22:22,804 INFO  Successfully parsed JSON response
2019-03-11 11:22:22,804 INFO  In the process of generating verify response in HTML
2019-03-11 11:22:22,898 INFO  Successfully generated verify response in HTML
2019-03-11 11:22:22,898 INFO  Successfully processed the response from service
2019-03-11 11:23:17,241 INFO  Setting request parameters for VerifySolution
2019-03-11 11:23:17,241 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:23:17,241 INFO  Starting to parse the user solution
2019-03-11 11:23:17,241 INFO  Displaying user solution
2019-03-11 11:23:17,273 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:23:17,273 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:23:17,273 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:23:17,273 INFO  Invoking the service to verify the user solution
2019-03-11 11:23:17,273 INFO  Time before invoking service:Mon Mar 11 11:23:17 IST 2019
2019-03-11 11:23:17,273 INFO  Initialising service address for VerifySolution
2019-03-11 11:23:17,273 INFO  Time before invoking service In SUPER:Mon Mar 11 11:23:17 IST 2019
2019-03-11 11:23:18,431 INFO  Time after invoking service In SUPER:Mon Mar 11 11:23:18 IST 2019
2019-03-11 11:23:18,431 INFO  Service responded successfully with required details
2019-03-11 11:23:18,431 INFO  Time after invoking service:Mon Mar 11 11:23:18 IST 2019
2019-03-11 11:23:18,431 INFO  User solution successfully verified
2019-03-11 11:23:18,431 INFO  Processing the response from verify service
2019-03-11 11:23:18,446 INFO  Starting to parse JSON response
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:23:18,446 INFO  Successfully parsed JSON response
2019-03-11 11:23:18,446 INFO  In the process of generating verify response in HTML
2019-03-11 11:23:18,516 INFO  Successfully generated verify response in HTML
2019-03-11 11:23:18,516 INFO  Successfully processed the response from service
2019-03-11 11:24:49,212 INFO  Setting request parameters for VerifySolution
2019-03-11 11:24:49,212 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:24:49,212 INFO  Starting to parse the user solution
2019-03-11 11:24:49,212 INFO  Displaying user solution
2019-03-11 11:24:49,243 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:24:49,243 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:24:49,243 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:24:49,243 INFO  Invoking the service to verify the user solution
2019-03-11 11:24:49,243 INFO  Time before invoking service:Mon Mar 11 11:24:49 IST 2019
2019-03-11 11:24:49,243 INFO  Initialising service address for VerifySolution
2019-03-11 11:24:49,243 INFO  Time before invoking service In SUPER:Mon Mar 11 11:24:49 IST 2019
2019-03-11 11:24:50,590 INFO  Time after invoking service In SUPER:Mon Mar 11 11:24:50 IST 2019
2019-03-11 11:24:50,590 INFO  Service responded successfully with required details
2019-03-11 11:24:50,590 INFO  Time after invoking service:Mon Mar 11 11:24:50 IST 2019
2019-03-11 11:24:50,590 INFO  User solution successfully verified
2019-03-11 11:24:50,590 INFO  Processing the response from verify service
2019-03-11 11:24:50,590 INFO  Starting to parse JSON response
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:50,590 INFO  Successfully parsed JSON response
2019-03-11 11:24:50,590 INFO  In the process of generating verify response in HTML
2019-03-11 11:24:50,652 INFO  Successfully generated verify response in HTML
2019-03-11 11:24:50,668 INFO  Successfully processed the response from service
2019-03-11 11:24:56,726 INFO  Setting request parameters for VerifySolution
2019-03-11 11:24:56,726 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:24:56,726 INFO  Starting to parse the user solution
2019-03-11 11:24:56,726 INFO  Displaying user solution
2019-03-11 11:24:56,758 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:24:56,758 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:24:56,758 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:24:56,758 INFO  Invoking the service to verify the user solution
2019-03-11 11:24:56,758 INFO  Time before invoking service:Mon Mar 11 11:24:56 IST 2019
2019-03-11 11:24:56,758 INFO  Initialising service address for VerifySolution
2019-03-11 11:24:56,758 INFO  Time before invoking service In SUPER:Mon Mar 11 11:24:56 IST 2019
2019-03-11 11:24:57,931 INFO  Time after invoking service In SUPER:Mon Mar 11 11:24:57 IST 2019
2019-03-11 11:24:57,931 INFO  Service responded successfully with required details
2019-03-11 11:24:57,931 INFO  Time after invoking service:Mon Mar 11 11:24:57 IST 2019
2019-03-11 11:24:57,931 INFO  User solution successfully verified
2019-03-11 11:24:57,931 INFO  Processing the response from verify service
2019-03-11 11:24:57,931 INFO  Starting to parse JSON response
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,931 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:24:57,947 INFO  Successfully parsed JSON response
2019-03-11 11:24:57,947 INFO  In the process of generating verify response in HTML
2019-03-11 11:24:58,012 INFO  Successfully generated verify response in HTML
2019-03-11 11:24:58,012 INFO  Successfully processed the response from service
2019-03-11 11:25:41,103 INFO  Setting request parameters for VerifySolution
2019-03-11 11:25:41,103 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:25:41,103 INFO  Starting to parse the user solution
2019-03-11 11:25:41,103 INFO  Displaying user solution
2019-03-11 11:25:41,134 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:25:41,149 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:25:41,149 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:25:41,149 INFO  Invoking the service to verify the user solution
2019-03-11 11:25:41,149 INFO  Time before invoking service:Mon Mar 11 11:25:41 IST 2019
2019-03-11 11:25:41,149 INFO  Initialising service address for VerifySolution
2019-03-11 11:25:41,149 INFO  Time before invoking service In SUPER:Mon Mar 11 11:25:41 IST 2019
2019-03-11 11:25:42,167 INFO  Time after invoking service In SUPER:Mon Mar 11 11:25:42 IST 2019
2019-03-11 11:25:42,167 INFO  Service responded successfully with required details
2019-03-11 11:25:42,167 INFO  Time after invoking service:Mon Mar 11 11:25:42 IST 2019
2019-03-11 11:25:42,167 INFO  User solution successfully verified
2019-03-11 11:25:42,167 INFO  Processing the response from verify service
2019-03-11 11:25:42,167 INFO  Starting to parse JSON response
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:42,167 INFO  Successfully parsed JSON response
2019-03-11 11:25:42,167 INFO  In the process of generating verify response in HTML
2019-03-11 11:25:42,261 INFO  Successfully generated verify response in HTML
2019-03-11 11:25:42,261 INFO  Successfully processed the response from service
2019-03-11 11:25:50,277 INFO  Setting request parameters for VerifySolution
2019-03-11 11:25:50,277 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:25:50,277 INFO  Starting to parse the user solution
2019-03-11 11:25:50,293 INFO  Displaying user solution
2019-03-11 11:25:50,324 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:25:50,324 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:25:50,324 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:25:50,324 INFO  Invoking the service to verify the user solution
2019-03-11 11:25:50,324 INFO  Time before invoking service:Mon Mar 11 11:25:50 IST 2019
2019-03-11 11:25:50,324 INFO  Initialising service address for VerifySolution
2019-03-11 11:25:50,324 INFO  Time before invoking service In SUPER:Mon Mar 11 11:25:50 IST 2019
2019-03-11 11:25:51,587 INFO  Time after invoking service In SUPER:Mon Mar 11 11:25:51 IST 2019
2019-03-11 11:25:51,587 INFO  Service responded successfully with required details
2019-03-11 11:25:51,587 INFO  Time after invoking service:Mon Mar 11 11:25:51 IST 2019
2019-03-11 11:25:51,587 INFO  User solution successfully verified
2019-03-11 11:25:51,587 INFO  Processing the response from verify service
2019-03-11 11:25:51,587 INFO  Starting to parse JSON response
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:25:51,587 INFO  Successfully parsed JSON response
2019-03-11 11:25:51,587 INFO  In the process of generating verify response in HTML
2019-03-11 11:25:51,681 INFO  Successfully generated verify response in HTML
2019-03-11 11:25:51,681 INFO  Successfully processed the response from service
2019-03-11 11:27:05,011 INFO  Setting request parameters for VerifySolution
2019-03-11 11:27:05,011 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:27:05,011 INFO  Starting to parse the user solution
2019-03-11 11:27:05,011 INFO  Displaying user solution
2019-03-11 11:27:05,043 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:27:05,043 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:27:05,043 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:27:05,043 INFO  Invoking the service to verify the user solution
2019-03-11 11:27:05,043 INFO  Time before invoking service:Mon Mar 11 11:27:05 IST 2019
2019-03-11 11:27:05,043 INFO  Initialising service address for VerifySolution
2019-03-11 11:27:05,043 INFO  Time before invoking service In SUPER:Mon Mar 11 11:27:05 IST 2019
2019-03-11 11:27:06,405 INFO  Time after invoking service In SUPER:Mon Mar 11 11:27:06 IST 2019
2019-03-11 11:27:06,405 INFO  Service responded successfully with required details
2019-03-11 11:27:06,405 INFO  Time after invoking service:Mon Mar 11 11:27:06 IST 2019
2019-03-11 11:27:06,405 INFO  User solution successfully verified
2019-03-11 11:27:06,405 INFO  Processing the response from verify service
2019-03-11 11:27:06,405 INFO  Starting to parse JSON response
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:27:06,405 INFO  Successfully parsed JSON response
2019-03-11 11:27:06,405 INFO  In the process of generating verify response in HTML
2019-03-11 11:27:06,494 INFO  Successfully generated verify response in HTML
2019-03-11 11:27:06,494 INFO  Successfully processed the response from service
2019-03-11 11:28:23,975 INFO  Setting request parameters for VerifySolution
2019-03-11 11:28:23,975 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:28:23,975 INFO  Starting to parse the user solution
2019-03-11 11:28:23,981 INFO  Displaying user solution
2019-03-11 11:28:24,023 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            if(self.validate_base_pack_name()==True):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:28:24,023 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:28:24,023 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:28:24,023 INFO  Invoking the service to verify the user solution
2019-03-11 11:28:24,023 INFO  Time before invoking service:Mon Mar 11 11:28:24 IST 2019
2019-03-11 11:28:24,023 INFO  Initialising service address for VerifySolution
2019-03-11 11:28:24,023 INFO  Time before invoking service In SUPER:Mon Mar 11 11:28:24 IST 2019
2019-03-11 11:28:25,151 INFO  Time after invoking service In SUPER:Mon Mar 11 11:28:25 IST 2019
2019-03-11 11:28:25,151 INFO  Service responded successfully with required details
2019-03-11 11:28:25,151 INFO  Time after invoking service:Mon Mar 11 11:28:25 IST 2019
2019-03-11 11:28:25,151 INFO  User solution successfully verified
2019-03-11 11:28:25,151 INFO  Processing the response from verify service
2019-03-11 11:28:25,151 INFO  Starting to parse JSON response
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:28:25,151 INFO  Successfully parsed JSON response
2019-03-11 11:28:25,151 INFO  In the process of generating verify response in HTML
2019-03-11 11:28:25,244 INFO  Successfully generated verify response in HTML
2019-03-11 11:28:25,244 INFO  Successfully processed the response from service
2019-03-11 11:30:19,871 INFO  Setting request parameters for VerifySolution
2019-03-11 11:30:19,871 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:30:19,871 INFO  Starting to parse the user solution
2019-03-11 11:30:19,871 INFO  Displaying user solution
2019-03-11 11:30:19,902 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            \r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:30:19,902 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:30:19,902 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:30:19,902 INFO  Invoking the service to verify the user solution
2019-03-11 11:30:19,902 INFO  Time before invoking service:Mon Mar 11 11:30:19 IST 2019
2019-03-11 11:30:19,902 INFO  Initialising service address for VerifySolution
2019-03-11 11:30:19,902 INFO  Time before invoking service In SUPER:Mon Mar 11 11:30:19 IST 2019
2019-03-11 11:30:21,057 INFO  Time after invoking service In SUPER:Mon Mar 11 11:30:21 IST 2019
2019-03-11 11:30:21,057 INFO  Service responded successfully with required details
2019-03-11 11:30:21,057 INFO  Time after invoking service:Mon Mar 11 11:30:21 IST 2019
2019-03-11 11:30:21,057 INFO  User solution successfully verified
2019-03-11 11:30:21,057 INFO  Processing the response from verify service
2019-03-11 11:30:21,057 INFO  Starting to parse JSON response
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:21,057 INFO  Successfully parsed JSON response
2019-03-11 11:30:21,057 INFO  In the process of generating verify response in HTML
2019-03-11 11:30:21,135 INFO  Successfully generated verify response in HTML
2019-03-11 11:30:21,135 INFO  Successfully processed the response from service
2019-03-11 11:30:27,294 INFO  Setting request parameters for VerifySolution
2019-03-11 11:30:27,294 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:30:27,294 INFO  Starting to parse the user solution
2019-03-11 11:30:27,294 INFO  Displaying user solution
2019-03-11 11:30:27,325 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n            \r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:30:27,325 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:30:27,325 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:30:27,325 INFO  Invoking the service to verify the user solution
2019-03-11 11:30:27,325 INFO  Time before invoking service:Mon Mar 11 11:30:27 IST 2019
2019-03-11 11:30:27,325 INFO  Initialising service address for VerifySolution
2019-03-11 11:30:27,341 INFO  Time before invoking service In SUPER:Mon Mar 11 11:30:27 IST 2019
2019-03-11 11:30:28,494 INFO  Time after invoking service In SUPER:Mon Mar 11 11:30:28 IST 2019
2019-03-11 11:30:28,494 INFO  Service responded successfully with required details
2019-03-11 11:30:28,494 INFO  Time after invoking service:Mon Mar 11 11:30:28 IST 2019
2019-03-11 11:30:28,494 INFO  User solution successfully verified
2019-03-11 11:30:28,494 INFO  Processing the response from verify service
2019-03-11 11:30:28,494 INFO  Starting to parse JSON response
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:30:28,494 INFO  Successfully parsed JSON response
2019-03-11 11:30:28,494 INFO  In the process of generating verify response in HTML
2019-03-11 11:30:28,588 INFO  Successfully generated verify response in HTML
2019-03-11 11:30:28,588 INFO  Successfully processed the response from service
2019-03-11 11:32:37,405 INFO  Setting request parameters for VerifySolution
2019-03-11 11:32:37,405 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:32:37,405 INFO  Starting to parse the user solution
2019-03-11 11:32:37,405 INFO  Displaying user solution
2019-03-11 11:32:37,452 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.validate_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.validate_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.validate_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:32:37,452 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:32:37,452 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:32:37,452 INFO  Invoking the service to verify the user solution
2019-03-11 11:32:37,452 INFO  Time before invoking service:Mon Mar 11 11:32:37 IST 2019
2019-03-11 11:32:37,452 INFO  Initialising service address for VerifySolution
2019-03-11 11:32:37,452 INFO  Time before invoking service In SUPER:Mon Mar 11 11:32:37 IST 2019
2019-03-11 11:32:38,795 INFO  Time after invoking service In SUPER:Mon Mar 11 11:32:38 IST 2019
2019-03-11 11:32:38,795 INFO  Service responded successfully with required details
2019-03-11 11:32:38,795 INFO  Time after invoking service:Mon Mar 11 11:32:38 IST 2019
2019-03-11 11:32:38,795 INFO  User solution successfully verified
2019-03-11 11:32:38,795 INFO  Processing the response from verify service
2019-03-11 11:32:38,811 INFO  Starting to parse JSON response
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:32:38,811 INFO  Successfully parsed JSON response
2019-03-11 11:32:38,811 INFO  In the process of generating verify response in HTML
2019-03-11 11:32:38,904 INFO  Successfully generated verify response in HTML
2019-03-11 11:32:38,904 INFO  Successfully processed the response from service
2019-03-11 11:33:28,908 INFO  Setting request parameters for VerifySolution
2019-03-11 11:33:28,923 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:33:28,923 INFO  Starting to parse the user solution
2019-03-11 11:33:28,923 INFO  Displaying user solution
2019-03-11 11:33:28,954 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:33:28,954 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:33:28,954 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:33:28,954 INFO  Invoking the service to verify the user solution
2019-03-11 11:33:28,954 INFO  Time before invoking service:Mon Mar 11 11:33:28 IST 2019
2019-03-11 11:33:28,954 INFO  Initialising service address for VerifySolution
2019-03-11 11:33:28,954 INFO  Time before invoking service In SUPER:Mon Mar 11 11:33:28 IST 2019
2019-03-11 11:33:30,015 INFO  Time after invoking service In SUPER:Mon Mar 11 11:33:30 IST 2019
2019-03-11 11:33:30,031 INFO  Service responded successfully with required details
2019-03-11 11:33:30,031 INFO  Time after invoking service:Mon Mar 11 11:33:30 IST 2019
2019-03-11 11:33:30,031 INFO  User solution successfully verified
2019-03-11 11:33:30,031 INFO  Processing the response from verify service
2019-03-11 11:33:30,031 INFO  Starting to parse JSON response
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:33:30,031 INFO  Successfully parsed JSON response
2019-03-11 11:33:30,031 INFO  In the process of generating verify response in HTML
2019-03-11 11:33:30,109 INFO  Successfully generated verify response in HTML
2019-03-11 11:33:30,109 INFO  Successfully processed the response from service
2019-03-11 11:34:06,483 INFO  Setting request parameters for VerifySolution
2019-03-11 11:34:06,483 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:34:06,483 INFO  Starting to parse the user solution
2019-03-11 11:34:06,483 INFO  Displaying user solution
2019-03-11 11:34:06,523 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24 ):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12 and self.get_subscription_period()<=24):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:34:06,523 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:34:06,523 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:34:06,523 INFO  Invoking the service to verify the user solution
2019-03-11 11:34:06,523 INFO  Time before invoking service:Mon Mar 11 11:34:06 IST 2019
2019-03-11 11:34:06,523 INFO  Initialising service address for VerifySolution
2019-03-11 11:34:06,523 INFO  Time before invoking service In SUPER:Mon Mar 11 11:34:06 IST 2019
2019-03-11 11:34:07,515 INFO  Time after invoking service In SUPER:Mon Mar 11 11:34:07 IST 2019
2019-03-11 11:34:07,515 INFO  Service responded successfully with required details
2019-03-11 11:34:07,515 INFO  Time after invoking service:Mon Mar 11 11:34:07 IST 2019
2019-03-11 11:34:07,515 INFO  User solution successfully verified
2019-03-11 11:34:07,515 INFO  Processing the response from verify service
2019-03-11 11:34:07,515 INFO  Starting to parse JSON response
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,515 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,531 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,531 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:34:07,531 INFO  Successfully parsed JSON response
2019-03-11 11:34:07,531 INFO  In the process of generating verify response in HTML
2019-03-11 11:34:07,609 INFO  Successfully generated verify response in HTML
2019-03-11 11:34:07,609 INFO  Successfully processed the response from service
2019-03-11 11:35:17,454 INFO  Setting request parameters for VerifySolution
2019-03-11 11:35:17,470 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:35:17,470 INFO  Starting to parse the user solution
2019-03-11 11:35:17,470 INFO  Displaying user solution
2019-03-11 11:35:17,502 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:35:17,502 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:35:17,502 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:35:17,502 INFO  Invoking the service to verify the user solution
2019-03-11 11:35:17,502 INFO  Time before invoking service:Mon Mar 11 11:35:17 IST 2019
2019-03-11 11:35:17,502 INFO  Initialising service address for VerifySolution
2019-03-11 11:35:17,502 INFO  Time before invoking service In SUPER:Mon Mar 11 11:35:17 IST 2019
2019-03-11 11:35:18,797 INFO  Time after invoking service In SUPER:Mon Mar 11 11:35:18 IST 2019
2019-03-11 11:35:18,797 INFO  Service responded successfully with required details
2019-03-11 11:35:18,797 INFO  Time after invoking service:Mon Mar 11 11:35:18 IST 2019
2019-03-11 11:35:18,797 INFO  User solution successfully verified
2019-03-11 11:35:18,797 INFO  Processing the response from verify service
2019-03-11 11:35:18,797 INFO  Starting to parse JSON response
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:18,797 INFO  Successfully parsed JSON response
2019-03-11 11:35:18,797 INFO  In the process of generating verify response in HTML
2019-03-11 11:35:18,860 INFO  Successfully generated verify response in HTML
2019-03-11 11:35:18,860 INFO  Successfully processed the response from service
2019-03-11 11:35:41,221 INFO  Setting request parameters for VerifySolution
2019-03-11 11:35:41,221 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:35:41,221 INFO  Starting to parse the user solution
2019-03-11 11:35:41,221 INFO  Displaying user solution
2019-03-11 11:35:41,252 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>=12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>=12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>=12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:35:41,252 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:35:41,252 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:35:41,252 INFO  Invoking the service to verify the user solution
2019-03-11 11:35:41,252 INFO  Time before invoking service:Mon Mar 11 11:35:41 IST 2019
2019-03-11 11:35:41,252 INFO  Initialising service address for VerifySolution
2019-03-11 11:35:41,252 INFO  Time before invoking service In SUPER:Mon Mar 11 11:35:41 IST 2019
2019-03-11 11:35:42,421 INFO  Time after invoking service In SUPER:Mon Mar 11 11:35:42 IST 2019
2019-03-11 11:35:42,421 INFO  Service responded successfully with required details
2019-03-11 11:35:42,421 INFO  Time after invoking service:Mon Mar 11 11:35:42 IST 2019
2019-03-11 11:35:42,421 INFO  User solution successfully verified
2019-03-11 11:35:42,421 INFO  Processing the response from verify service
2019-03-11 11:35:42,421 INFO  Starting to parse JSON response
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,421 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:35:42,437 INFO  Successfully parsed JSON response
2019-03-11 11:35:42,437 INFO  In the process of generating verify response in HTML
2019-03-11 11:35:42,504 INFO  Successfully generated verify response in HTML
2019-03-11 11:35:42,504 INFO  Successfully processed the response from service
2019-03-11 11:36:48,985 INFO  Setting request parameters for VerifySolution
2019-03-11 11:36:48,985 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:36:48,985 INFO  Starting to parse the user solution
2019-03-11 11:36:48,985 INFO  Displaying user solution
2019-03-11 11:36:49,026 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    return final_rent\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560.00\r\n                    final_rent = monthly_rent*self.get_subscription_period()\r\n                    if(self.get_subscription_period()>12):\r\n                        final_rent = final_rent - monthly_rent\r\n                    \r\n                    return final_rent\r\n               \r\n            \r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:36:49,026 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:36:49,026 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:36:49,026 INFO  Invoking the service to verify the user solution
2019-03-11 11:36:49,026 INFO  Time before invoking service:Mon Mar 11 11:36:49 IST 2019
2019-03-11 11:36:49,026 INFO  Initialising service address for VerifySolution
2019-03-11 11:36:49,026 INFO  Time before invoking service In SUPER:Mon Mar 11 11:36:49 IST 2019
2019-03-11 11:36:50,174 INFO  Time after invoking service In SUPER:Mon Mar 11 11:36:50 IST 2019
2019-03-11 11:36:50,174 INFO  Service responded successfully with required details
2019-03-11 11:36:50,174 INFO  Time after invoking service:Mon Mar 11 11:36:50 IST 2019
2019-03-11 11:36:50,174 INFO  User solution successfully verified
2019-03-11 11:36:50,174 INFO  Processing the response from verify service
2019-03-11 11:36:50,174 INFO  Starting to parse JSON response
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:36:50,174 INFO  Successfully parsed JSON response
2019-03-11 11:36:50,174 INFO  In the process of generating verify response in HTML
2019-03-11 11:36:50,252 INFO  Successfully generated verify response in HTML
2019-03-11 11:36:50,252 INFO  Successfully processed the response from service
2019-03-11 11:44:33,835 INFO  Setting request parameters for VerifySolution
2019-03-11 11:44:33,835 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:44:33,835 INFO  Starting to parse the user solution
2019-03-11 11:44:33,835 INFO  Displaying user solution
2019-03-11 11:44:33,898 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or self.get_base_pack_name()==\"Gold\" or self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return ((monthly_rent*self.get_subscription_period())-discount_amount)/self.get_subscription_period()\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:44:33,898 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:44:33,898 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:44:33,898 INFO  Invoking the service to verify the user solution
2019-03-11 11:44:33,898 INFO  Time before invoking service:Mon Mar 11 11:44:33 IST 2019
2019-03-11 11:44:33,898 INFO  Initialising service address for VerifySolution
2019-03-11 11:44:33,898 INFO  Time before invoking service In SUPER:Mon Mar 11 11:44:33 IST 2019
2019-03-11 11:44:35,100 INFO  Time after invoking service In SUPER:Mon Mar 11 11:44:35 IST 2019
2019-03-11 11:44:35,100 INFO  Service responded successfully with required details
2019-03-11 11:44:35,100 INFO  Time after invoking service:Mon Mar 11 11:44:35 IST 2019
2019-03-11 11:44:35,100 INFO  User solution successfully verified
2019-03-11 11:44:35,100 INFO  Processing the response from verify service
2019-03-11 11:44:35,100 INFO  Starting to parse JSON response
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:44:35,116 INFO  Successfully parsed JSON response
2019-03-11 11:44:35,116 INFO  In the process of generating verify response in HTML
2019-03-11 11:44:35,209 INFO  Successfully generated verify response in HTML
2019-03-11 11:44:35,209 INFO  Successfully processed the response from service
2019-03-11 11:45:04,947 INFO  Setting request parameters for VerifySolution
2019-03-11 11:45:04,947 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:45:04,947 INFO  Starting to parse the user solution
2019-03-11 11:45:04,947 INFO  Displaying user solution
2019-03-11 11:45:04,988 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return ((monthly_rent*self.get_subscription_period())-discount_amount)/self.get_subscription_period()\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:45:04,989 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:45:04,989 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:45:04,989 INFO  Invoking the service to verify the user solution
2019-03-11 11:45:04,990 INFO  Time before invoking service:Mon Mar 11 11:45:04 IST 2019
2019-03-11 11:45:04,990 INFO  Initialising service address for VerifySolution
2019-03-11 11:45:04,991 INFO  Time before invoking service In SUPER:Mon Mar 11 11:45:04 IST 2019
2019-03-11 11:45:06,315 INFO  Time after invoking service In SUPER:Mon Mar 11 11:45:06 IST 2019
2019-03-11 11:45:06,315 INFO  Service responded successfully with required details
2019-03-11 11:45:06,315 INFO  Time after invoking service:Mon Mar 11 11:45:06 IST 2019
2019-03-11 11:45:06,315 INFO  User solution successfully verified
2019-03-11 11:45:06,315 INFO  Processing the response from verify service
2019-03-11 11:45:06,315 INFO  Starting to parse JSON response
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:06,315 INFO  Successfully parsed JSON response
2019-03-11 11:45:06,315 INFO  In the process of generating verify response in HTML
2019-03-11 11:45:06,409 INFO  Successfully generated verify response in HTML
2019-03-11 11:45:06,409 INFO  Successfully processed the response from service
2019-03-11 11:45:56,944 INFO  Setting request parameters for VerifySolution
2019-03-11 11:45:56,944 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:45:56,944 INFO  Starting to parse the user solution
2019-03-11 11:45:56,944 INFO  Displaying user solution
2019-03-11 11:45:56,976 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return ((monthly_rent*self.get_subscription_period())-discount_amount)/self.get_subscription_period()\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:45:56,976 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:45:56,976 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:45:56,976 INFO  Invoking the service to verify the user solution
2019-03-11 11:45:56,976 INFO  Time before invoking service:Mon Mar 11 11:45:56 IST 2019
2019-03-11 11:45:56,976 INFO  Initialising service address for VerifySolution
2019-03-11 11:45:56,976 INFO  Time before invoking service In SUPER:Mon Mar 11 11:45:56 IST 2019
2019-03-11 11:45:58,072 INFO  Time after invoking service In SUPER:Mon Mar 11 11:45:58 IST 2019
2019-03-11 11:45:58,072 INFO  Service responded successfully with required details
2019-03-11 11:45:58,072 INFO  Time after invoking service:Mon Mar 11 11:45:58 IST 2019
2019-03-11 11:45:58,072 INFO  User solution successfully verified
2019-03-11 11:45:58,072 INFO  Processing the response from verify service
2019-03-11 11:45:58,072 INFO  Starting to parse JSON response
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,072 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:45:58,088 INFO  Successfully parsed JSON response
2019-03-11 11:45:58,088 INFO  In the process of generating verify response in HTML
2019-03-11 11:45:58,166 INFO  Successfully generated verify response in HTML
2019-03-11 11:45:58,166 INFO  Successfully processed the response from service
2019-03-11 11:46:13,447 INFO  Setting request parameters for VerifySolution
2019-03-11 11:46:13,447 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:46:13,447 INFO  Starting to parse the user solution
2019-03-11 11:46:13,447 INFO  Displaying user solution
2019-03-11 11:46:13,479 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:46:13,479 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:46:13,479 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:46:13,479 INFO  Invoking the service to verify the user solution
2019-03-11 11:46:13,479 INFO  Time before invoking service:Mon Mar 11 11:46:13 IST 2019
2019-03-11 11:46:13,479 INFO  Initialising service address for VerifySolution
2019-03-11 11:46:13,479 INFO  Time before invoking service In SUPER:Mon Mar 11 11:46:13 IST 2019
2019-03-11 11:46:14,617 INFO  Time after invoking service In SUPER:Mon Mar 11 11:46:14 IST 2019
2019-03-11 11:46:14,633 INFO  Service responded successfully with required details
2019-03-11 11:46:14,633 INFO  Time after invoking service:Mon Mar 11 11:46:14 IST 2019
2019-03-11 11:46:14,633 INFO  User solution successfully verified
2019-03-11 11:46:14,633 INFO  Processing the response from verify service
2019-03-11 11:46:14,633 INFO  Starting to parse JSON response
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:14,633 INFO  Successfully parsed JSON response
2019-03-11 11:46:14,633 INFO  In the process of generating verify response in HTML
2019-03-11 11:46:14,711 INFO  Successfully generated verify response in HTML
2019-03-11 11:46:14,711 INFO  Successfully processed the response from service
2019-03-11 11:46:24,914 INFO  Initiating to process and prepare Input for the submit service
2019-03-11 11:46:24,914 INFO  Displaying user solution
2019-03-11 11:46:24,930 INFO  Successfully processed and prepared the input for the submit service
2019-03-11 11:46:24,930 INFO  Invoking the service to submit the user solution
2019-03-11 11:46:24,930 INFO  Initialising service address for Submit
2019-03-11 11:46:24,930 INFO  Time before invoking service In SUPER:Mon Mar 11 11:46:24 IST 2019
2019-03-11 11:46:28,197 INFO  Time after invoking service In SUPER:Mon Mar 11 11:46:28 IST 2019
2019-03-11 11:46:28,197 INFO  Service responded successfully with required details
2019-03-11 11:46:28,197 INFO  User solution successfully submitted
2019-03-11 11:46:28,197 INFO  Displaying submission status
2019-03-11 11:46:28,197 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-11 11:46:30,726 INFO  Setting request parameters for VerifySolution
2019-03-11 11:46:30,726 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 11:46:30,726 INFO  Starting to parse the user solution
2019-03-11 11:46:30,726 INFO  Displaying user solution
2019-03-11 11:46:30,757 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 11:46:30,757 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 11:46:30,757 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 11:46:30,757 INFO  Invoking the service to verify the user solution
2019-03-11 11:46:30,757 INFO  Time before invoking service:Mon Mar 11 11:46:30 IST 2019
2019-03-11 11:46:30,757 INFO  Initialising service address for VerifySolution
2019-03-11 11:46:30,757 INFO  Time before invoking service In SUPER:Mon Mar 11 11:46:30 IST 2019
2019-03-11 11:46:31,759 INFO  Time after invoking service In SUPER:Mon Mar 11 11:46:31 IST 2019
2019-03-11 11:46:31,759 INFO  Service responded successfully with required details
2019-03-11 11:46:31,759 INFO  Time after invoking service:Mon Mar 11 11:46:31 IST 2019
2019-03-11 11:46:31,759 INFO  User solution successfully verified
2019-03-11 11:46:31,759 INFO  Processing the response from verify service
2019-03-11 11:46:31,759 INFO  Starting to parse JSON response
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 11:46:31,759 INFO  Successfully parsed JSON response
2019-03-11 11:46:31,759 INFO  In the process of generating verify response in HTML
2019-03-11 11:46:31,837 INFO  Successfully generated verify response in HTML
2019-03-11 11:46:31,837 INFO  Successfully processed the response from service
2019-03-11 11:46:34,823 INFO  Initiating to process and prepare Input for the submit service
2019-03-11 11:46:34,823 INFO  Displaying user solution
2019-03-11 11:46:34,823 INFO  Successfully processed and prepared the input for the submit service
2019-03-11 11:46:34,823 INFO  Invoking the service to submit the user solution
2019-03-11 11:46:34,823 INFO  Initialising service address for Submit
2019-03-11 11:46:34,823 INFO  Time before invoking service In SUPER:Mon Mar 11 11:46:34 IST 2019
2019-03-11 11:46:34,994 INFO  Time after invoking service In SUPER:Mon Mar 11 11:46:34 IST 2019
2019-03-11 11:46:34,994 INFO  Service responded successfully with required details
2019-03-11 11:46:34,994 INFO  User solution successfully submitted
2019-03-11 11:46:34,995 INFO  Displaying submission status
2019-03-11 11:46:34,995 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-11 12:35:48,837 INFO  Setting request parameters for VerifySolution
2019-03-11 12:35:48,837 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 12:35:48,837 INFO  Starting to parse the user solution
2019-03-11 12:35:48,837 INFO  Displaying user solution
2019-03-11 12:35:48,868 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self,number):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 12:35:48,868 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 12:35:48,884 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 12:35:48,884 INFO  Invoking the service to verify the user solution
2019-03-11 12:35:48,884 INFO  Time before invoking service:Mon Mar 11 12:35:48 IST 2019
2019-03-11 12:35:48,884 INFO  Initialising service address for VerifySolution
2019-03-11 12:35:48,884 INFO  Time before invoking service In SUPER:Mon Mar 11 12:35:48 IST 2019
2019-03-11 12:35:49,931 INFO  Time after invoking service In SUPER:Mon Mar 11 12:35:49 IST 2019
2019-03-11 12:35:49,931 INFO  Service responded successfully with required details
2019-03-11 12:35:49,931 INFO  Time after invoking service:Mon Mar 11 12:35:49 IST 2019
2019-03-11 12:35:49,931 INFO  User solution successfully verified
2019-03-11 12:35:49,931 INFO  Processing the response from verify service
2019-03-11 12:35:49,946 INFO  Starting to parse JSON response
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:35:49,946 INFO  Successfully parsed JSON response
2019-03-11 12:35:49,946 INFO  In the process of generating verify response in HTML
2019-03-11 12:35:50,009 INFO  Successfully generated verify response in HTML
2019-03-11 12:35:50,009 INFO  Successfully processed the response from service
2019-03-11 12:36:01,853 INFO  Setting request parameters for VerifySolution
2019-03-11 12:36:01,853 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 12:36:01,853 INFO  Starting to parse the user solution
2019-03-11 12:36:01,853 INFO  Displaying user solution
2019-03-11 12:36:01,884 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self,number):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 12:36:01,884 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 12:36:01,884 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 12:36:01,884 INFO  Invoking the service to verify the user solution
2019-03-11 12:36:01,884 INFO  Time before invoking service:Mon Mar 11 12:36:01 IST 2019
2019-03-11 12:36:01,884 INFO  Initialising service address for VerifySolution
2019-03-11 12:36:01,884 INFO  Time before invoking service In SUPER:Mon Mar 11 12:36:01 IST 2019
2019-03-11 12:36:02,946 INFO  Time after invoking service In SUPER:Mon Mar 11 12:36:02 IST 2019
2019-03-11 12:36:02,946 INFO  Service responded successfully with required details
2019-03-11 12:36:02,946 INFO  Time after invoking service:Mon Mar 11 12:36:02 IST 2019
2019-03-11 12:36:02,946 INFO  User solution successfully verified
2019-03-11 12:36:02,946 INFO  Processing the response from verify service
2019-03-11 12:36:02,946 INFO  Starting to parse JSON response
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:02,962 INFO  Successfully parsed JSON response
2019-03-11 12:36:02,962 INFO  In the process of generating verify response in HTML
2019-03-11 12:36:03,025 INFO  Successfully generated verify response in HTML
2019-03-11 12:36:03,025 INFO  Successfully processed the response from service
2019-03-11 12:36:08,478 INFO  Setting request parameters for VerifySolution
2019-03-11 12:36:08,478 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 12:36:08,478 INFO  Starting to parse the user solution
2019-03-11 12:36:08,478 INFO  Displaying user solution
2019-03-11 12:36:08,509 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 12:36:08,509 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 12:36:08,509 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 12:36:08,509 INFO  Invoking the service to verify the user solution
2019-03-11 12:36:08,509 INFO  Time before invoking service:Mon Mar 11 12:36:08 IST 2019
2019-03-11 12:36:08,509 INFO  Initialising service address for VerifySolution
2019-03-11 12:36:08,509 INFO  Time before invoking service In SUPER:Mon Mar 11 12:36:08 IST 2019
2019-03-11 12:36:09,603 INFO  Time after invoking service In SUPER:Mon Mar 11 12:36:09 IST 2019
2019-03-11 12:36:09,603 INFO  Service responded successfully with required details
2019-03-11 12:36:09,603 INFO  Time after invoking service:Mon Mar 11 12:36:09 IST 2019
2019-03-11 12:36:09,603 INFO  User solution successfully verified
2019-03-11 12:36:09,603 INFO  Processing the response from verify service
2019-03-11 12:36:09,603 INFO  Starting to parse JSON response
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:36:09,603 INFO  Successfully parsed JSON response
2019-03-11 12:36:09,603 INFO  In the process of generating verify response in HTML
2019-03-11 12:36:09,665 INFO  Successfully generated verify response in HTML
2019-03-11 12:36:09,665 INFO  Successfully processed the response from service
2019-03-11 12:40:20,823 INFO  Setting request parameters for VerifySolution
2019-03-11 12:40:20,823 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 12:40:20,823 INFO  Starting to parse the user solution
2019-03-11 12:40:20,823 INFO  Displaying user solution
2019-03-11 12:40:20,855 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Exer-13\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractclassmethod, abstractmethod\r\nclass DirectToHomeService(metaclass=ABCMeta):\r\n    __counter =101\r\n    def __init__(self,consumer_name):\r\n        self.__consumer_name = consumer_name\r\n        self.__consumer_number = DirectToHomeService.__counter\r\n        DirectToHomeService.__counter+=1\r\n\r\n    def get_consumer_name(self):\r\n        return self.__consumer_name\r\n\r\n\r\n    def get_consumer_number(self):\r\n        return self.__consumer_number\r\n\r\n    @abstractmethod\r\n    def calculate_monthly_rent(self):\r\n        pass\r\nclass BasePackage(DirectToHomeService):\r\n    def __init__(self,consumer_name,base_pack_name,subscription_period):\r\n        super().__init__(consumer_name)\r\n        self.__base_pack_name = base_pack_name\r\n        self.__subscription_period = subscription_period\r\n\r\n    def get_base_pack_name(self):\r\n        return self.__base_pack_name\r\n\r\n\r\n    def get_subscription_period(self):\r\n        return self.__subscription_period\r\n\r\n    def validate_base_pack_name(self):\r\n        if(self.get_base_pack_name()==\"Silver\" or \r\n           self.get_base_pack_name()==\"Gold\" or \r\n           self.get_base_pack_name()==\"Platinum\" ):\r\n            return True\r\n        else:\r\n            self.__base_pack_name = \"Silver\"\r\n            return  \"Base package name is incorrect, set to Silver\"\r\n        \r\n    def calculate_monthly_rent(self):\r\n        if(self.get_subscription_period()>=1 and \r\n           self.get_subscription_period()<=24):\r\n                monthly_rent = 0\r\n                discount_amount = 0\r\n                if(self.get_base_pack_name().lower()==\"silver\"):\r\n                    monthly_rent = 350\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 350\r\n                elif(self.get_base_pack_name().lower()==\"gold\"):\r\n                    monthly_rent = 440\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 440\r\n                elif(self.get_base_pack_name().lower()==\"platinum\"):\r\n                    monthly_rent = 560\r\n                    if(self.get_subscription_period()>12):\r\n                        discount_amount = 560\r\n                \r\n                return (((monthly_rent*self.get_subscription_period())-\r\n                         discount_amount)\r\n                        /self.get_subscription_period())\r\n        else:\r\n            return -1\r\n                    \r\n                    \r\n                    \r\n        \r\n        \r\n        \r\n","asgnmtId":"13","SolutionFileName":"Excer13.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-11 12:40:20,855 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 12:40:20,855 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 12:40:20,855 INFO  Invoking the service to verify the user solution
2019-03-11 12:40:20,855 INFO  Time before invoking service:Mon Mar 11 12:40:20 IST 2019
2019-03-11 12:40:20,855 INFO  Initialising service address for VerifySolution
2019-03-11 12:40:20,855 INFO  Time before invoking service In SUPER:Mon Mar 11 12:40:20 IST 2019
2019-03-11 12:40:21,949 INFO  Time after invoking service In SUPER:Mon Mar 11 12:40:21 IST 2019
2019-03-11 12:40:21,949 INFO  Service responded successfully with required details
2019-03-11 12:40:21,949 INFO  Time after invoking service:Mon Mar 11 12:40:21 IST 2019
2019-03-11 12:40:21,949 INFO  User solution successfully verified
2019-03-11 12:40:21,949 INFO  Processing the response from verify service
2019-03-11 12:40:21,949 INFO  Starting to parse JSON response
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 12:40:21,949 INFO  Successfully parsed JSON response
2019-03-11 12:40:21,965 INFO  In the process of generating verify response in HTML
2019-03-11 12:40:22,028 INFO  Successfully generated verify response in HTML
2019-03-11 12:40:22,028 INFO  Successfully processed the response from service
2019-03-11 15:13:28,211 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-11 16:16:09,512 INFO  Setting request parameters for VerifySolution
2019-03-11 16:16:09,512 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:16:09,512 INFO  Starting to parse the user solution
2019-03-11 16:16:09,512 INFO  Displaying user solution
2019-03-11 16:16:09,653 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        \r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:16:09,653 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:16:09,653 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:16:09,653 INFO  Invoking the service to verify the user solution
2019-03-11 16:16:09,653 INFO  Time before invoking service:Mon Mar 11 16:16:09 IST 2019
2019-03-11 16:16:09,653 INFO  Initialising service address for VerifySolution
2019-03-11 16:16:09,668 INFO  Time before invoking service In SUPER:Mon Mar 11 16:16:09 IST 2019
2019-03-11 16:16:13,919 INFO  Time after invoking service In SUPER:Mon Mar 11 16:16:13 IST 2019
2019-03-11 16:16:13,919 INFO  Service responded successfully with required details
2019-03-11 16:16:13,919 INFO  Time after invoking service:Mon Mar 11 16:16:13 IST 2019
2019-03-11 16:16:13,919 INFO  User solution successfully verified
2019-03-11 16:16:13,919 INFO  Processing the response from verify service
2019-03-11 16:16:13,919 INFO  Starting to parse JSON response
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:16:13,935 INFO  Successfully parsed JSON response
2019-03-11 16:16:13,935 INFO  In the process of generating verify response in HTML
2019-03-11 16:16:14,029 INFO  Successfully generated verify response in HTML
2019-03-11 16:16:14,029 INFO  Successfully processed the response from service
2019-03-11 16:46:07,551 INFO  Setting request parameters for VerifySolution
2019-03-11 16:46:07,567 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:46:07,567 INFO  Starting to parse the user solution
2019-03-11 16:46:07,567 INFO  Displaying user solution
2019-03-11 16:46:07,645 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        Customer.bill_id = \"O\"+str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        Customer.bill_id = \"R\"+ str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:46:07,645 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:46:07,645 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:46:07,645 INFO  Invoking the service to verify the user solution
2019-03-11 16:46:07,645 INFO  Time before invoking service:Mon Mar 11 16:46:07 IST 2019
2019-03-11 16:46:07,645 INFO  Initialising service address for VerifySolution
2019-03-11 16:46:07,645 INFO  Time before invoking service In SUPER:Mon Mar 11 16:46:07 IST 2019
2019-03-11 16:46:08,879 INFO  Time after invoking service In SUPER:Mon Mar 11 16:46:08 IST 2019
2019-03-11 16:46:08,879 INFO  Service responded successfully with required details
2019-03-11 16:46:08,879 INFO  Time after invoking service:Mon Mar 11 16:46:08 IST 2019
2019-03-11 16:46:08,879 INFO  User solution successfully verified
2019-03-11 16:46:08,879 INFO  Processing the response from verify service
2019-03-11 16:46:08,895 INFO  Starting to parse JSON response
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:08,895 INFO  Successfully parsed JSON response
2019-03-11 16:46:08,895 INFO  In the process of generating verify response in HTML
2019-03-11 16:46:08,989 INFO  Successfully generated verify response in HTML
2019-03-11 16:46:08,989 INFO  Successfully processed the response from service
2019-03-11 16:46:54,065 INFO  Setting request parameters for VerifySolution
2019-03-11 16:46:54,065 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:46:54,065 INFO  Starting to parse the user solution
2019-03-11 16:46:54,065 INFO  Displaying user solution
2019-03-11 16:46:54,112 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        Customer.bill_id = \"O\"+str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        Customer.bill_id = \"R\"+ str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:46:54,112 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:46:54,112 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:46:54,112 INFO  Invoking the service to verify the user solution
2019-03-11 16:46:54,112 INFO  Time before invoking service:Mon Mar 11 16:46:54 IST 2019
2019-03-11 16:46:54,112 INFO  Initialising service address for VerifySolution
2019-03-11 16:46:54,112 INFO  Time before invoking service In SUPER:Mon Mar 11 16:46:54 IST 2019
2019-03-11 16:46:55,364 INFO  Time after invoking service In SUPER:Mon Mar 11 16:46:55 IST 2019
2019-03-11 16:46:55,364 INFO  Service responded successfully with required details
2019-03-11 16:46:55,364 INFO  Time after invoking service:Mon Mar 11 16:46:55 IST 2019
2019-03-11 16:46:55,364 INFO  User solution successfully verified
2019-03-11 16:46:55,364 INFO  Processing the response from verify service
2019-03-11 16:46:55,364 INFO  Starting to parse JSON response
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:46:55,364 INFO  Successfully parsed JSON response
2019-03-11 16:46:55,364 INFO  In the process of generating verify response in HTML
2019-03-11 16:46:55,458 INFO  Successfully generated verify response in HTML
2019-03-11 16:46:55,458 INFO  Successfully processed the response from service
2019-03-11 16:47:17,365 INFO  Setting request parameters for VerifySolution
2019-03-11 16:47:17,365 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:47:17,365 INFO  Starting to parse the user solution
2019-03-11 16:47:17,365 INFO  Displaying user solution
2019-03-11 16:47:17,412 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        Customer.bill_id = \"O\"+str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        Customer.bill_id = \"R\"+ str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:47:17,428 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:47:17,428 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:47:17,428 INFO  Invoking the service to verify the user solution
2019-03-11 16:47:17,428 INFO  Time before invoking service:Mon Mar 11 16:47:17 IST 2019
2019-03-11 16:47:17,428 INFO  Initialising service address for VerifySolution
2019-03-11 16:47:17,428 INFO  Time before invoking service In SUPER:Mon Mar 11 16:47:17 IST 2019
2019-03-11 16:47:18,475 INFO  Time after invoking service In SUPER:Mon Mar 11 16:47:18 IST 2019
2019-03-11 16:47:18,475 INFO  Service responded successfully with required details
2019-03-11 16:47:18,475 INFO  Time after invoking service:Mon Mar 11 16:47:18 IST 2019
2019-03-11 16:47:18,475 INFO  User solution successfully verified
2019-03-11 16:47:18,475 INFO  Processing the response from verify service
2019-03-11 16:47:18,475 INFO  Starting to parse JSON response
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:47:18,475 INFO  Successfully parsed JSON response
2019-03-11 16:47:18,475 INFO  In the process of generating verify response in HTML
2019-03-11 16:47:18,553 INFO  Successfully generated verify response in HTML
2019-03-11 16:47:18,553 INFO  Successfully processed the response from service
2019-03-11 16:49:35,349 INFO  Setting request parameters for VerifySolution
2019-03-11 16:49:35,349 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:49:35,349 INFO  Starting to parse the user solution
2019-03-11 16:49:35,365 INFO  Displaying user solution
2019-03-11 16:49:35,412 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        Customer.bill_id = \"O\" + str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        Customer.bill_id = \"R\" + str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:49:35,412 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:49:35,412 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:49:35,412 INFO  Invoking the service to verify the user solution
2019-03-11 16:49:35,412 INFO  Time before invoking service:Mon Mar 11 16:49:35 IST 2019
2019-03-11 16:49:35,412 INFO  Initialising service address for VerifySolution
2019-03-11 16:49:35,412 INFO  Time before invoking service In SUPER:Mon Mar 11 16:49:35 IST 2019
2019-03-11 16:49:36,600 INFO  Time after invoking service In SUPER:Mon Mar 11 16:49:36 IST 2019
2019-03-11 16:49:36,600 INFO  Service responded successfully with required details
2019-03-11 16:49:36,600 INFO  Time after invoking service:Mon Mar 11 16:49:36 IST 2019
2019-03-11 16:49:36,600 INFO  User solution successfully verified
2019-03-11 16:49:36,600 INFO  Processing the response from verify service
2019-03-11 16:49:36,600 INFO  Starting to parse JSON response
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:49:36,600 INFO  Successfully parsed JSON response
2019-03-11 16:49:36,600 INFO  In the process of generating verify response in HTML
2019-03-11 16:49:36,693 INFO  Successfully generated verify response in HTML
2019-03-11 16:49:36,693 INFO  Successfully processed the response from service
2019-03-11 16:50:08,815 INFO  Setting request parameters for VerifySolution
2019-03-11 16:50:08,815 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:50:08,815 INFO  Starting to parse the user solution
2019-03-11 16:50:08,815 INFO  Displaying user solution
2019-03-11 16:50:08,861 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        self.bill_id = \"O\" + str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        self.bill_id = \"R\" + str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:50:08,877 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:50:08,877 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:50:08,877 INFO  Invoking the service to verify the user solution
2019-03-11 16:50:08,877 INFO  Time before invoking service:Mon Mar 11 16:50:08 IST 2019
2019-03-11 16:50:08,877 INFO  Initialising service address for VerifySolution
2019-03-11 16:50:08,877 INFO  Time before invoking service In SUPER:Mon Mar 11 16:50:08 IST 2019
2019-03-11 16:50:09,989 INFO  Time after invoking service In SUPER:Mon Mar 11 16:50:09 IST 2019
2019-03-11 16:50:09,989 INFO  Service responded successfully with required details
2019-03-11 16:50:09,989 INFO  Time after invoking service:Mon Mar 11 16:50:09 IST 2019
2019-03-11 16:50:09,989 INFO  User solution successfully verified
2019-03-11 16:50:09,989 INFO  Processing the response from verify service
2019-03-11 16:50:09,989 INFO  Starting to parse JSON response
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:09,989 INFO  Successfully parsed JSON response
2019-03-11 16:50:09,989 INFO  In the process of generating verify response in HTML
2019-03-11 16:50:10,083 INFO  Successfully generated verify response in HTML
2019-03-11 16:50:10,083 INFO  Successfully processed the response from service
2019-03-11 16:50:27,381 INFO  Setting request parameters for VerifySolution
2019-03-11 16:50:27,381 INFO  Initiating to process and prepare Input for the verify service
2019-03-11 16:50:27,381 INFO  Starting to parse the user solution
2019-03-11 16:50:27,381 INFO  Displaying user solution
2019-03-11 16:50:27,459 INFO  Successfully parsed the user solution{"CourseShortName":"OOPR","UserSolution":"#OOPR-Assgn-29\r\n'''\r\nCreated on Mar 11, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n#Start writing your code here\r\nfrom abc import ABCMeta, abstractmethod\r\nclass Customer(metaclass = ABCMeta):\r\n    def __init__(self,customer_name):\r\n        self.__customer_name = customer_name\r\n        self.bill_amount = None\r\n        self.bill_id = None\r\n\r\n    def get_customer_name(self):\r\n        return self.__customer_name\r\n\r\n    @abstractmethod\r\n    def calculate_bill_amount(self):\r\n        pass\r\n    \r\nclass OccasionalCustomer(Customer):\r\n    __counter= 1000\r\n    def __init__(self,customer_name,distance_in_kms):\r\n        super().__init__(customer_name)\r\n        self.__distance_in_kms = distance_in_kms\r\n        OccasionalCustomer.__counter += 1  \r\n        self.bill_id = \"O\" + str(OccasionalCustomer.__counter)\r\n\r\n    def get_distance_in_kms(self):\r\n        return self.__distance_in_kms\r\n\r\n    def validate_distance_in_kms(self):\r\n        if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=5):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_distance_in_kms()==True):\r\n            bill_amount = 50\r\n            delivery_charge =0\r\n            if(self.get_distance_in_kms()>=1 and self.get_distance_in_kms()<=2):\r\n                delivery_charge = 5*self.get_distance_in_kms()\r\n            elif(self.get_distance_in_kms()>2 and \r\n                 self.get_distance_in_kms()<=5):\r\n                delivery_charge = 7.5*self.get_distance_in_kms()\r\n            bill_amount += delivery_charge\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\nclass RegularCustomer(Customer):\r\n    __counter= 100\r\n    def __init__(self,customer_name,no_of_tiffin):\r\n        super().__init__(customer_name)\r\n        self.__no_of_tiffin = no_of_tiffin\r\n        RegularCustomer.__counter+=1\r\n        self.bill_id = \"R\" + str(RegularCustomer.__counter)\r\n\r\n    def get_no_of_tiffin(self):\r\n        return self.__no_of_tiffin\r\n\r\n    def validate_no_of_tiffin(self):\r\n        if(self.get_no_of_tiffin()>=1 and self.get_no_of_tiffin()<=7):\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n    def calculate_bill_amount(self):\r\n        if(self.validate_no_of_tiffin()==True):\r\n            cost_per_tiffin = 50\r\n            no_of_days = 7\r\n            bill_amount = cost_per_tiffin*self.get_no_of_tiffin()*no_of_days\r\n            Customer.bill_amount = bill_amount\r\n            return Customer.bill_amount\r\n        else:\r\n            Customer.bill_amount = -1\r\n            return Customer.bill_amount\r\n        \r\n        \r\n    \r\n        \r\n","asgnmtId":"29","SolutionFileName":"Assign29.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-11 16:50:27,459 INFO  Successfully processed and prepared the input for the verify service
2019-03-11 16:50:27,459 INFO  Successfully set the request parameters for VerifySolution
2019-03-11 16:50:27,459 INFO  Invoking the service to verify the user solution
2019-03-11 16:50:27,459 INFO  Time before invoking service:Mon Mar 11 16:50:27 IST 2019
2019-03-11 16:50:27,459 INFO  Initialising service address for VerifySolution
2019-03-11 16:50:27,459 INFO  Time before invoking service In SUPER:Mon Mar 11 16:50:27 IST 2019
2019-03-11 16:50:28,506 INFO  Time after invoking service In SUPER:Mon Mar 11 16:50:28 IST 2019
2019-03-11 16:50:28,506 INFO  Service responded successfully with required details
2019-03-11 16:50:28,506 INFO  Time after invoking service:Mon Mar 11 16:50:28 IST 2019
2019-03-11 16:50:28,506 INFO  User solution successfully verified
2019-03-11 16:50:28,506 INFO  Processing the response from verify service
2019-03-11 16:50:28,522 INFO  Starting to parse JSON response
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 ERROR Keys used to parse test result JSON might be incorrect
2019-03-11 16:50:28,522 INFO  Successfully parsed JSON response
2019-03-11 16:50:28,522 INFO  In the process of generating verify response in HTML
2019-03-11 16:50:28,600 INFO  Successfully generated verify response in HTML
2019-03-11 16:50:28,600 INFO  Successfully processed the response from service
2019-03-11 16:50:34,147 INFO  Initiating to process and prepare Input for the submit service
2019-03-11 16:50:34,147 INFO  Displaying user solution
2019-03-11 16:50:34,147 INFO  Successfully processed and prepared the input for the submit service
2019-03-11 16:50:34,147 INFO  Invoking the service to submit the user solution
2019-03-11 16:50:34,147 INFO  Initialising service address for Submit
2019-03-11 16:50:34,147 INFO  Time before invoking service In SUPER:Mon Mar 11 16:50:34 IST 2019
2019-03-11 16:50:34,412 INFO  Time after invoking service In SUPER:Mon Mar 11 16:50:34 IST 2019
2019-03-11 16:50:34,412 INFO  Service responded successfully with required details
2019-03-11 16:50:34,412 INFO  User solution successfully submitted
2019-03-11 16:50:34,412 INFO  Displaying submission status
2019-03-11 16:50:34,412 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-11 16:50:36,506 INFO  Initiating to process and prepare Input for the submit service
2019-03-11 16:50:36,506 INFO  Displaying user solution
2019-03-11 16:50:36,506 INFO  Successfully processed and prepared the input for the submit service
2019-03-11 16:50:36,506 INFO  Invoking the service to submit the user solution
2019-03-11 16:50:36,506 INFO  Initialising service address for Submit
2019-03-11 16:50:36,522 INFO  Time before invoking service In SUPER:Mon Mar 11 16:50:36 IST 2019
2019-03-11 16:50:36,584 INFO  Time after invoking service In SUPER:Mon Mar 11 16:50:36 IST 2019
2019-03-11 16:50:36,584 INFO  Service responded successfully with required details
2019-03-11 16:50:36,584 INFO  User solution successfully submitted
2019-03-11 16:50:36,584 INFO  Displaying submission status
2019-03-11 16:50:36,584 INFO  Displayed submission status successfullySuccessfully Submitted!
