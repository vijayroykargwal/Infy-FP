2019-03-15 09:21:18,697 INFO  Loading Baseframework Plugin
2019-03-15 09:21:18,710 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-15 09:21:18,713 INFO  Loading the Menu - HandsOn
2019-03-15 09:21:18,721 INFO  Successfully loaded the Menu - HandsOn
2019-03-15 11:07:20,141 INFO  Loading Programming Assignment Plugin
2019-03-15 11:07:20,841 INFO  Setting request parameters for VerifySolution
2019-03-15 11:07:20,842 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 11:07:20,848 INFO  Starting to parse the user solution
2019-03-15 11:07:20,849 INFO  Displaying user solution
2019-03-15 11:07:21,061 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef reverse_linkedlist(reverse_list):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = reverse_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    reverse_list = list1[::-1]\r\n    for i in range(0,len(reverse_list)):\r\n        new_list.add(reverse_list[i])\r\n    reverse_list = new_list   \r\n    return reverse_list\r\n\r\n#Add different values to the linked list and test your program\r\n\r\nreverse_list=LinkedList()\r\nreverse_list.add(10)\r\nreverse_list.add(15)\r\nreverse_list.add(14)\r\nreverse_list.add(28)\r\nreverse_list.add(30)\r\nreversed_linkedlist=reverse_linkedlist(reverse_list)\r\nreversed_linkedlist.display()\r\n","asgnmtId":"9","SolutionFileName":"Assign9.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 11:07:21,062 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 11:07:21,063 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 11:07:21,063 INFO  Invoking the service to verify the user solution
2019-03-15 11:07:21,063 INFO  Time before invoking service:Fri Mar 15 11:07:21 IST 2019
2019-03-15 11:07:21,064 INFO  Initialising service address for VerifySolution
2019-03-15 11:07:21,065 INFO  Time before invoking service In SUPER:Fri Mar 15 11:07:21 IST 2019
2019-03-15 11:07:22,223 INFO  Time after invoking service In SUPER:Fri Mar 15 11:07:22 IST 2019
2019-03-15 11:07:22,223 INFO  Service responded successfully with required details
2019-03-15 11:07:22,223 INFO  Time after invoking service:Fri Mar 15 11:07:22 IST 2019
2019-03-15 11:07:22,224 INFO  User solution successfully verified
2019-03-15 11:07:22,224 INFO  Processing the response from verify service
2019-03-15 11:07:22,226 INFO  Starting to parse JSON response
2019-03-15 11:07:22,230 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:07:22,230 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:07:22,233 INFO  Successfully parsed JSON response
2019-03-15 11:07:22,233 INFO  In the process of generating verify response in HTML
2019-03-15 11:07:22,882 INFO  Successfully generated verify response in HTML
2019-03-15 11:07:22,882 INFO  Successfully processed the response from service
2019-03-15 11:07:40,117 INFO  Setting request parameters for VerifySolution
2019-03-15 11:07:40,117 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 11:07:40,117 INFO  Starting to parse the user solution
2019-03-15 11:07:40,118 INFO  Displaying user solution
2019-03-15 11:07:40,197 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef reverse_linkedlist(reverse_list):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = reverse_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    reverse_list = list1[::-1]\r\n    for i in range(0,len(reverse_list)):\r\n        new_list.add(reverse_list[i])\r\n    reverse_list = new_list   \r\n    return reverse_list\r\n\r\n#Add different values to the linked list and test your program\r\n\r\nreverse_list=LinkedList()\r\nreverse_list.add(10)\r\nreverse_list.add(15)\r\nreverse_list.add(14)\r\nreverse_list.add(28)\r\nreverse_list.add(30)\r\nreversed_linkedlist=reverse_linkedlist(reverse_list)\r\nreversed_linkedlist.display()\r\n","asgnmtId":"9","SolutionFileName":"Assign9.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 11:07:40,197 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 11:07:40,197 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 11:07:40,197 INFO  Invoking the service to verify the user solution
2019-03-15 11:07:40,198 INFO  Time before invoking service:Fri Mar 15 11:07:40 IST 2019
2019-03-15 11:07:40,198 INFO  Initialising service address for VerifySolution
2019-03-15 11:07:40,198 INFO  Time before invoking service In SUPER:Fri Mar 15 11:07:40 IST 2019
2019-03-15 11:07:41,174 INFO  Time after invoking service In SUPER:Fri Mar 15 11:07:41 IST 2019
2019-03-15 11:07:41,174 INFO  Service responded successfully with required details
2019-03-15 11:07:41,175 INFO  Time after invoking service:Fri Mar 15 11:07:41 IST 2019
2019-03-15 11:07:41,175 INFO  User solution successfully verified
2019-03-15 11:07:41,175 INFO  Processing the response from verify service
2019-03-15 11:07:41,177 INFO  Starting to parse JSON response
2019-03-15 11:07:41,177 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:07:41,177 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:07:41,179 INFO  Successfully parsed JSON response
2019-03-15 11:07:41,179 INFO  In the process of generating verify response in HTML
2019-03-15 11:07:41,263 INFO  Successfully generated verify response in HTML
2019-03-15 11:07:41,263 INFO  Successfully processed the response from service
2019-03-15 11:07:46,357 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 11:07:46,362 INFO  Displaying user solution
2019-03-15 11:07:46,372 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 11:07:46,372 INFO  Invoking the service to submit the user solution
2019-03-15 11:07:46,372 INFO  Initialising service address for Submit
2019-03-15 11:07:46,373 INFO  Time before invoking service In SUPER:Fri Mar 15 11:07:46 IST 2019
2019-03-15 11:07:46,774 INFO  Time after invoking service In SUPER:Fri Mar 15 11:07:46 IST 2019
2019-03-15 11:07:46,774 INFO  Service responded successfully with required details
2019-03-15 11:07:46,774 INFO  User solution successfully submitted
2019-03-15 11:07:46,775 INFO  Displaying submission status
2019-03-15 11:07:46,775 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 11:07:49,028 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 11:07:49,029 INFO  Displaying user solution
2019-03-15 11:07:49,037 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 11:07:49,037 INFO  Invoking the service to submit the user solution
2019-03-15 11:07:49,037 INFO  Initialising service address for Submit
2019-03-15 11:07:49,038 INFO  Time before invoking service In SUPER:Fri Mar 15 11:07:49 IST 2019
2019-03-15 11:07:49,271 INFO  Time after invoking service In SUPER:Fri Mar 15 11:07:49 IST 2019
2019-03-15 11:07:49,272 INFO  Service responded successfully with required details
2019-03-15 11:07:49,272 INFO  User solution successfully submitted
2019-03-15 11:07:49,272 INFO  Displaying submission status
2019-03-15 11:07:49,272 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 11:15:20,039 INFO  Setting request parameters for VerifySolution
2019-03-15 11:15:20,039 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 11:15:20,039 INFO  Starting to parse the user solution
2019-03-15 11:15:20,040 INFO  Displaying user solution
2019-03-15 11:15:20,156 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        pass\r\n    def check_vacancy(self):\r\n        pass\r\n\r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 11:15:20,156 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 11:15:20,157 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 11:15:20,157 INFO  Invoking the service to verify the user solution
2019-03-15 11:15:20,157 INFO  Time before invoking service:Fri Mar 15 11:15:20 IST 2019
2019-03-15 11:15:20,157 INFO  Initialising service address for VerifySolution
2019-03-15 11:15:20,158 INFO  Time before invoking service In SUPER:Fri Mar 15 11:15:20 IST 2019
2019-03-15 11:15:21,211 INFO  Time after invoking service In SUPER:Fri Mar 15 11:15:21 IST 2019
2019-03-15 11:15:21,212 INFO  Service responded successfully with required details
2019-03-15 11:15:21,212 INFO  Time after invoking service:Fri Mar 15 11:15:21 IST 2019
2019-03-15 11:15:21,212 INFO  User solution successfully verified
2019-03-15 11:15:21,213 INFO  Processing the response from verify service
2019-03-15 11:15:21,219 INFO  Starting to parse JSON response
2019-03-15 11:15:21,222 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:15:21,222 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:15:21,222 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:15:21,222 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:15:21,224 INFO  Successfully parsed JSON response
2019-03-15 11:15:21,224 INFO  In the process of generating verify response in HTML
2019-03-15 11:15:21,332 INFO  Successfully generated verify response in HTML
2019-03-15 11:15:21,333 INFO  Successfully processed the response from service
2019-03-15 11:16:47,671 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 11:16:47,673 INFO  Displaying user solution
2019-03-15 11:16:47,674 INFO  Submission failed : Code not verified
->Please verify your code before submitting
2019-03-15 11:16:47,677 ERROR Exception occured while submitting the user solution
2019-03-15 11:16:49,907 INFO  Setting request parameters for VerifySolution
2019-03-15 11:16:49,908 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 11:16:49,908 INFO  Starting to parse the user solution
2019-03-15 11:16:49,908 INFO  Displaying user solution
2019-03-15 11:16:49,999 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef reverse_linkedlist(reverse_list):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = reverse_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    reverse_list = list1[::-1]\r\n    for i in range(0,len(reverse_list)):\r\n        new_list.add(reverse_list[i])\r\n    reverse_list = new_list   \r\n    return reverse_list\r\n\r\n#Add different values to the linked list and test your program\r\n\r\nreverse_list=LinkedList()\r\nreverse_list.add(10)\r\nreverse_list.add(15)\r\nreverse_list.add(14)\r\nreverse_list.add(28)\r\nreverse_list.add(30)\r\nreversed_linkedlist=reverse_linkedlist(reverse_list)\r\nreversed_linkedlist.display()\r\n","asgnmtId":"9","SolutionFileName":"Assign9.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 11:16:50,000 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 11:16:50,000 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 11:16:50,000 INFO  Invoking the service to verify the user solution
2019-03-15 11:16:50,001 INFO  Time before invoking service:Fri Mar 15 11:16:50 IST 2019
2019-03-15 11:16:50,001 INFO  Initialising service address for VerifySolution
2019-03-15 11:16:50,002 INFO  Time before invoking service In SUPER:Fri Mar 15 11:16:50 IST 2019
2019-03-15 11:16:50,897 INFO  Time after invoking service In SUPER:Fri Mar 15 11:16:50 IST 2019
2019-03-15 11:16:50,897 INFO  Service responded successfully with required details
2019-03-15 11:16:50,898 INFO  Time after invoking service:Fri Mar 15 11:16:50 IST 2019
2019-03-15 11:16:50,898 INFO  User solution successfully verified
2019-03-15 11:16:50,898 INFO  Processing the response from verify service
2019-03-15 11:16:50,900 INFO  Starting to parse JSON response
2019-03-15 11:16:50,901 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:16:50,901 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 11:16:50,902 INFO  Successfully parsed JSON response
2019-03-15 11:16:50,902 INFO  In the process of generating verify response in HTML
2019-03-15 11:16:50,980 INFO  Successfully generated verify response in HTML
2019-03-15 11:16:50,981 INFO  Successfully processed the response from service
2019-03-15 11:16:54,167 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 11:16:54,167 INFO  Displaying user solution
2019-03-15 11:16:54,178 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 11:16:54,179 INFO  Invoking the service to submit the user solution
2019-03-15 11:16:54,179 INFO  Initialising service address for Submit
2019-03-15 11:16:54,179 INFO  Time before invoking service In SUPER:Fri Mar 15 11:16:54 IST 2019
2019-03-15 11:16:54,347 INFO  Time after invoking service In SUPER:Fri Mar 15 11:16:54 IST 2019
2019-03-15 11:16:54,347 INFO  Service responded successfully with required details
2019-03-15 11:16:54,347 INFO  User solution successfully submitted
2019-03-15 11:16:54,347 INFO  Displaying submission status
2019-03-15 11:16:54,347 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 12:05:26,351 INFO  Setting request parameters for VerifySolution
2019-03-15 12:05:26,351 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:05:26,351 INFO  Starting to parse the user solution
2019-03-15 12:05:26,351 INFO  Displaying user solution
2019-03-15 12:05:26,495 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        count = 0\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        count = len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:05:26,495 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:05:26,496 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:05:26,496 INFO  Invoking the service to verify the user solution
2019-03-15 12:05:26,496 INFO  Time before invoking service:Fri Mar 15 12:05:26 IST 2019
2019-03-15 12:05:26,496 INFO  Initialising service address for VerifySolution
2019-03-15 12:05:26,497 INFO  Time before invoking service In SUPER:Fri Mar 15 12:05:26 IST 2019
2019-03-15 12:05:27,885 INFO  Time after invoking service In SUPER:Fri Mar 15 12:05:27 IST 2019
2019-03-15 12:05:27,885 INFO  Service responded successfully with required details
2019-03-15 12:05:27,886 INFO  Time after invoking service:Fri Mar 15 12:05:27 IST 2019
2019-03-15 12:05:27,886 INFO  User solution successfully verified
2019-03-15 12:05:27,886 INFO  Processing the response from verify service
2019-03-15 12:05:27,893 INFO  Starting to parse JSON response
2019-03-15 12:05:27,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:05:27,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:05:27,895 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:05:27,896 INFO  Successfully parsed JSON response
2019-03-15 12:05:27,897 INFO  In the process of generating verify response in HTML
2019-03-15 12:05:27,979 INFO  Successfully generated verify response in HTML
2019-03-15 12:05:27,980 INFO  Successfully processed the response from service
2019-03-15 12:07:35,728 INFO  Setting request parameters for VerifySolution
2019-03-15 12:07:35,728 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:07:35,728 INFO  Starting to parse the user solution
2019-03-15 12:07:35,728 INFO  Displaying user solution
2019-03-15 12:07:35,818 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        count = 0\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        count = len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:07:35,820 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:07:35,820 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:07:35,820 INFO  Invoking the service to verify the user solution
2019-03-15 12:07:35,820 INFO  Time before invoking service:Fri Mar 15 12:07:35 IST 2019
2019-03-15 12:07:35,821 INFO  Initialising service address for VerifySolution
2019-03-15 12:07:35,821 INFO  Time before invoking service In SUPER:Fri Mar 15 12:07:35 IST 2019
2019-03-15 12:07:36,882 INFO  Time after invoking service In SUPER:Fri Mar 15 12:07:36 IST 2019
2019-03-15 12:07:36,882 INFO  Service responded successfully with required details
2019-03-15 12:07:36,882 INFO  Time after invoking service:Fri Mar 15 12:07:36 IST 2019
2019-03-15 12:07:36,882 INFO  User solution successfully verified
2019-03-15 12:07:36,883 INFO  Processing the response from verify service
2019-03-15 12:07:36,884 INFO  Starting to parse JSON response
2019-03-15 12:07:36,885 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:07:36,885 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:07:36,885 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:07:36,887 INFO  Successfully parsed JSON response
2019-03-15 12:07:36,887 INFO  In the process of generating verify response in HTML
2019-03-15 12:07:36,980 INFO  Successfully generated verify response in HTML
2019-03-15 12:07:36,980 INFO  Successfully processed the response from service
2019-03-15 12:35:32,350 INFO  Setting request parameters for VerifySolution
2019-03-15 12:35:32,350 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:35:32,350 INFO  Starting to parse the user solution
2019-03-15 12:35:32,355 INFO  Displaying user solution
2019-03-15 12:35:32,480 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        count = 0\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        count = len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:35:32,481 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:35:32,481 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:35:32,481 INFO  Invoking the service to verify the user solution
2019-03-15 12:35:32,481 INFO  Time before invoking service:Fri Mar 15 12:35:32 IST 2019
2019-03-15 12:35:32,482 INFO  Initialising service address for VerifySolution
2019-03-15 12:35:32,482 INFO  Time before invoking service In SUPER:Fri Mar 15 12:35:32 IST 2019
2019-03-15 12:35:33,534 INFO  Time after invoking service In SUPER:Fri Mar 15 12:35:33 IST 2019
2019-03-15 12:35:33,534 INFO  Service responded successfully with required details
2019-03-15 12:35:33,534 INFO  Time after invoking service:Fri Mar 15 12:35:33 IST 2019
2019-03-15 12:35:33,534 INFO  User solution successfully verified
2019-03-15 12:35:33,535 INFO  Processing the response from verify service
2019-03-15 12:35:33,538 INFO  Starting to parse JSON response
2019-03-15 12:35:33,540 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:35:33,540 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:35:33,540 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:35:33,542 INFO  Successfully parsed JSON response
2019-03-15 12:35:33,542 INFO  In the process of generating verify response in HTML
2019-03-15 12:35:33,682 INFO  Successfully generated verify response in HTML
2019-03-15 12:35:33,682 INFO  Successfully processed the response from service
2019-03-15 12:36:28,722 INFO  Setting request parameters for VerifySolution
2019-03-15 12:36:28,722 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:36:28,722 INFO  Starting to parse the user solution
2019-03-15 12:36:28,722 INFO  Displaying user solution
2019-03-15 12:36:28,807 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        count = len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:36:28,808 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:36:28,808 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:36:28,808 INFO  Invoking the service to verify the user solution
2019-03-15 12:36:28,809 INFO  Time before invoking service:Fri Mar 15 12:36:28 IST 2019
2019-03-15 12:36:28,809 INFO  Initialising service address for VerifySolution
2019-03-15 12:36:28,809 INFO  Time before invoking service In SUPER:Fri Mar 15 12:36:28 IST 2019
2019-03-15 12:36:29,774 INFO  Time after invoking service In SUPER:Fri Mar 15 12:36:29 IST 2019
2019-03-15 12:36:29,774 INFO  Service responded successfully with required details
2019-03-15 12:36:29,775 INFO  Time after invoking service:Fri Mar 15 12:36:29 IST 2019
2019-03-15 12:36:29,775 INFO  User solution successfully verified
2019-03-15 12:36:29,775 INFO  Processing the response from verify service
2019-03-15 12:36:29,777 INFO  Starting to parse JSON response
2019-03-15 12:36:29,778 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:36:29,778 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:36:29,778 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:36:29,779 INFO  Successfully parsed JSON response
2019-03-15 12:36:29,779 INFO  In the process of generating verify response in HTML
2019-03-15 12:36:29,870 INFO  Successfully generated verify response in HTML
2019-03-15 12:36:29,871 INFO  Successfully processed the response from service
2019-03-15 12:37:04,221 INFO  Setting request parameters for VerifySolution
2019-03-15 12:37:04,222 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:37:04,222 INFO  Starting to parse the user solution
2019-03-15 12:37:04,222 INFO  Displaying user solution
2019-03-15 12:37:04,337 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        return len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:37:04,338 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:37:04,338 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:37:04,338 INFO  Invoking the service to verify the user solution
2019-03-15 12:37:04,339 INFO  Time before invoking service:Fri Mar 15 12:37:04 IST 2019
2019-03-15 12:37:04,339 INFO  Initialising service address for VerifySolution
2019-03-15 12:37:04,339 INFO  Time before invoking service In SUPER:Fri Mar 15 12:37:04 IST 2019
2019-03-15 12:37:05,389 INFO  Time after invoking service In SUPER:Fri Mar 15 12:37:05 IST 2019
2019-03-15 12:37:05,389 INFO  Service responded successfully with required details
2019-03-15 12:37:05,390 INFO  Time after invoking service:Fri Mar 15 12:37:05 IST 2019
2019-03-15 12:37:05,390 INFO  User solution successfully verified
2019-03-15 12:37:05,390 INFO  Processing the response from verify service
2019-03-15 12:37:05,396 INFO  Starting to parse JSON response
2019-03-15 12:37:05,397 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:05,397 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:05,397 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:05,397 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:05,399 INFO  Successfully parsed JSON response
2019-03-15 12:37:05,399 INFO  In the process of generating verify response in HTML
2019-03-15 12:37:05,488 INFO  Successfully generated verify response in HTML
2019-03-15 12:37:05,489 INFO  Successfully processed the response from service
2019-03-15 12:37:39,410 INFO  Setting request parameters for VerifySolution
2019-03-15 12:37:39,410 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 12:37:39,410 INFO  Starting to parse the user solution
2019-03-15 12:37:39,411 INFO  Displaying user solution
2019-03-15 12:37:39,479 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-10\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Compartment:\r\n    def __init__(self,compartment_name,no_of_passengers,total_seats):\r\n        self.__compartment_name=compartment_name\r\n        self.__no_of_passengers=no_of_passengers\r\n        self.__total_seats=total_seats\r\n\r\n    def get_compartment_name(self):\r\n        return self.__compartment_name\r\n\r\n    def get_no_of_passengers(self):\r\n        return self.__no_of_passengers\r\n\r\n    def get_total_seats(self):\r\n        return self.__total_seats\r\n\r\nclass Train:\r\n    def __init__(self,train_name,compartment_list):\r\n        self.__train_name=train_name\r\n        self.__compartment_list=compartment_list\r\n\r\n    def get_train_name(self):\r\n        return self.__train_name\r\n\r\n\r\n    def get_compartment_list(self):\r\n        return self.__compartment_list\r\n\r\n    def count_compartments(self):\r\n        list1 = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        return len(list1)\r\n    def check_vacancy(self):\r\n        count = 0\r\n        list1 = []\r\n        vacant_seat_list = []\r\n        temp = self.__compartment_list.get_head()\r\n        while(temp is not None):\r\n            list1.append(temp.get_data())\r\n            temp = temp.get_next()\r\n        for i in range(0,len(list1)):\r\n            vacant_seat_list.append(list1[i].get_total_seats() \r\n                                    - list1[i].get_no_of_passengers())\r\n            if(vacant_seat_list[i]>(list1[i].get_total_seats())/2):\r\n                count+=1\r\n        return count    \r\n    #Implement the remaining methods of Train class here\r\n\r\n#Use different values for compartment and test your program\r\ncompartment1=Compartment(\"SL\",250,400)\r\ncompartment2=Compartment(\"2AC\",125,280)\r\ncompartment3=Compartment(\"3AC\",120,300)\r\ncompartment4=Compartment(\"FC\",160,300)\r\ncompartment5=Compartment(\"1AC\",100,210)\r\ncompartment_list=LinkedList()\r\ncompartment_list.add(compartment1)\r\ncompartment_list.add(compartment2)\r\ncompartment_list.add(compartment3)\r\ncompartment_list.add(compartment4)\r\ncompartment_list.add(compartment5)\r\ntrain1=Train(\"Shatabdi\",compartment_list)\r\ncount=train1.count_compartments()\r\nprint(\"The number of compartments in the train:\",count)\r\nvacancy_count=train1.check_vacancy()\r\nprint(\"The number of compartments which have more than 50% vacancy:\",vacancy_count)\r\n","asgnmtId":"10","SolutionFileName":"Assign10.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 12:37:39,480 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 12:37:39,480 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 12:37:39,480 INFO  Invoking the service to verify the user solution
2019-03-15 12:37:39,480 INFO  Time before invoking service:Fri Mar 15 12:37:39 IST 2019
2019-03-15 12:37:39,480 INFO  Initialising service address for VerifySolution
2019-03-15 12:37:39,481 INFO  Time before invoking service In SUPER:Fri Mar 15 12:37:39 IST 2019
2019-03-15 12:37:40,493 INFO  Time after invoking service In SUPER:Fri Mar 15 12:37:40 IST 2019
2019-03-15 12:37:40,494 INFO  Service responded successfully with required details
2019-03-15 12:37:40,494 INFO  Time after invoking service:Fri Mar 15 12:37:40 IST 2019
2019-03-15 12:37:40,494 INFO  User solution successfully verified
2019-03-15 12:37:40,495 INFO  Processing the response from verify service
2019-03-15 12:37:40,496 INFO  Starting to parse JSON response
2019-03-15 12:37:40,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:40,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:40,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:40,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 12:37:40,501 INFO  Successfully parsed JSON response
2019-03-15 12:37:40,501 INFO  In the process of generating verify response in HTML
2019-03-15 12:37:40,590 INFO  Successfully generated verify response in HTML
2019-03-15 12:37:40,590 INFO  Successfully processed the response from service
2019-03-15 12:37:46,095 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 12:37:46,095 INFO  Displaying user solution
2019-03-15 12:37:46,113 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 12:37:46,114 INFO  Invoking the service to submit the user solution
2019-03-15 12:37:46,114 INFO  Initialising service address for Submit
2019-03-15 12:37:46,114 INFO  Time before invoking service In SUPER:Fri Mar 15 12:37:46 IST 2019
2019-03-15 12:37:46,604 INFO  Time after invoking service In SUPER:Fri Mar 15 12:37:46 IST 2019
2019-03-15 12:37:46,605 INFO  Service responded successfully with required details
2019-03-15 12:37:46,605 INFO  User solution successfully submitted
2019-03-15 12:37:46,605 INFO  Displaying submission status
2019-03-15 12:37:46,605 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 12:37:49,068 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 12:37:49,069 INFO  Displaying user solution
2019-03-15 12:37:49,078 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 12:37:49,078 INFO  Invoking the service to submit the user solution
2019-03-15 12:37:49,078 INFO  Initialising service address for Submit
2019-03-15 12:37:49,079 INFO  Time before invoking service In SUPER:Fri Mar 15 12:37:49 IST 2019
2019-03-15 12:37:49,346 INFO  Time after invoking service In SUPER:Fri Mar 15 12:37:49 IST 2019
2019-03-15 12:37:49,347 INFO  Service responded successfully with required details
2019-03-15 12:37:49,347 INFO  User solution successfully submitted
2019-03-15 12:37:49,347 INFO  Displaying submission status
2019-03-15 12:37:49,347 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 13:57:46,218 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-15 13:57:58,606 INFO  Setting request parameters for VerifySolution
2019-03-15 13:57:58,606 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 13:57:58,606 INFO  Starting to parse the user solution
2019-03-15 13:57:58,607 INFO  Displaying user solution
2019-03-15 13:57:58,690 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass BakeHouse:\r\n    def __init__(self):\r\n        self.__occupied_table_list=LinkedList()\r\n\r\n    def get_occupied_table_list(self):\r\n        return self.__occupied_table_list\r\n\r\n    def allocate_table(self):\r\n        pass\r\n    def deallocate_table(self,table_number):\r\n        pass\r\n    #Implement other methods here\r\n\r\nbakehouse=BakeHouse()\r\n#Invoke the methods of BakeHouse class and test the program\r\n","asgnmtId":"8","SolutionFileName":"Assign8.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 13:57:58,691 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 13:57:58,691 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 13:57:58,691 INFO  Invoking the service to verify the user solution
2019-03-15 13:57:58,692 INFO  Time before invoking service:Fri Mar 15 13:57:58 IST 2019
2019-03-15 13:57:58,692 INFO  Initialising service address for VerifySolution
2019-03-15 13:57:58,692 INFO  Time before invoking service In SUPER:Fri Mar 15 13:57:58 IST 2019
2019-03-15 13:57:59,636 INFO  Time after invoking service In SUPER:Fri Mar 15 13:57:59 IST 2019
2019-03-15 13:57:59,636 INFO  Service responded successfully with required details
2019-03-15 13:57:59,636 INFO  Time after invoking service:Fri Mar 15 13:57:59 IST 2019
2019-03-15 13:57:59,637 INFO  User solution successfully verified
2019-03-15 13:57:59,637 INFO  Processing the response from verify service
2019-03-15 13:57:59,640 INFO  Starting to parse JSON response
2019-03-15 13:57:59,641 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 13:57:59,641 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 13:57:59,642 INFO  Successfully parsed JSON response
2019-03-15 13:57:59,642 INFO  In the process of generating verify response in HTML
2019-03-15 13:57:59,713 INFO  Successfully generated verify response in HTML
2019-03-15 13:57:59,714 INFO  Successfully processed the response from service
2019-03-15 14:36:26,284 INFO  Setting request parameters for VerifySolution
2019-03-15 14:36:26,284 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:36:26,285 INFO  Starting to parse the user solution
2019-03-15 14:36:26,285 INFO  Displaying user solution
2019-03-15 14:36:26,407 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum+= num_list.pop()\r\n    num_list.push(sum)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:36:26,408 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:36:26,409 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:36:26,409 INFO  Invoking the service to verify the user solution
2019-03-15 14:36:26,410 INFO  Time before invoking service:Fri Mar 15 14:36:26 IST 2019
2019-03-15 14:36:26,410 INFO  Initialising service address for VerifySolution
2019-03-15 14:36:26,410 INFO  Time before invoking service In SUPER:Fri Mar 15 14:36:26 IST 2019
2019-03-15 14:36:27,683 INFO  Time after invoking service In SUPER:Fri Mar 15 14:36:27 IST 2019
2019-03-15 14:36:27,684 INFO  Service responded successfully with required details
2019-03-15 14:36:27,684 INFO  Time after invoking service:Fri Mar 15 14:36:27 IST 2019
2019-03-15 14:36:27,684 INFO  User solution successfully verified
2019-03-15 14:36:27,685 INFO  Processing the response from verify service
2019-03-15 14:36:27,692 INFO  Starting to parse JSON response
2019-03-15 14:36:27,694 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:36:27,694 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:36:27,697 INFO  Successfully parsed JSON response
2019-03-15 14:36:27,697 INFO  In the process of generating verify response in HTML
2019-03-15 14:36:27,834 INFO  Successfully generated verify response in HTML
2019-03-15 14:36:27,834 INFO  Successfully processed the response from service
2019-03-15 14:36:34,273 INFO  Setting request parameters for VerifySolution
2019-03-15 14:36:34,273 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:36:34,273 INFO  Starting to parse the user solution
2019-03-15 14:36:34,274 INFO  Displaying user solution
2019-03-15 14:36:34,311 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum+= num_list.pop()\r\n    num_list.push(sum)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:36:34,312 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:36:34,312 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:36:34,312 INFO  Invoking the service to verify the user solution
2019-03-15 14:36:34,312 INFO  Time before invoking service:Fri Mar 15 14:36:34 IST 2019
2019-03-15 14:36:34,312 INFO  Initialising service address for VerifySolution
2019-03-15 14:36:34,313 INFO  Time before invoking service In SUPER:Fri Mar 15 14:36:34 IST 2019
2019-03-15 14:36:35,248 INFO  Time after invoking service In SUPER:Fri Mar 15 14:36:35 IST 2019
2019-03-15 14:36:35,249 INFO  Service responded successfully with required details
2019-03-15 14:36:35,249 INFO  Time after invoking service:Fri Mar 15 14:36:35 IST 2019
2019-03-15 14:36:35,249 INFO  User solution successfully verified
2019-03-15 14:36:35,250 INFO  Processing the response from verify service
2019-03-15 14:36:35,252 INFO  Starting to parse JSON response
2019-03-15 14:36:35,254 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:36:35,254 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:36:35,256 INFO  Successfully parsed JSON response
2019-03-15 14:36:35,256 INFO  In the process of generating verify response in HTML
2019-03-15 14:36:35,382 INFO  Successfully generated verify response in HTML
2019-03-15 14:36:35,382 INFO  Successfully processed the response from service
2019-03-15 14:41:10,873 INFO  Setting request parameters for VerifySolution
2019-03-15 14:41:10,873 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:41:10,873 INFO  Starting to parse the user solution
2019-03-15 14:41:10,874 INFO  Displaying user solution
2019-03-15 14:41:10,922 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    temp = num_list\r\n    for i in range(0,temp.get_max_size()-1):\r\n        sum+= temp.pop()\r\n    num_list.push(sum)\r\n    return num_list.__str__()\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:41:10,925 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:41:10,925 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:41:10,925 INFO  Invoking the service to verify the user solution
2019-03-15 14:41:10,927 INFO  Time before invoking service:Fri Mar 15 14:41:10 IST 2019
2019-03-15 14:41:10,927 INFO  Initialising service address for VerifySolution
2019-03-15 14:41:10,927 INFO  Time before invoking service In SUPER:Fri Mar 15 14:41:10 IST 2019
2019-03-15 14:41:11,896 INFO  Time after invoking service In SUPER:Fri Mar 15 14:41:11 IST 2019
2019-03-15 14:41:11,897 INFO  Service responded successfully with required details
2019-03-15 14:41:11,897 INFO  Time after invoking service:Fri Mar 15 14:41:11 IST 2019
2019-03-15 14:41:11,897 INFO  User solution successfully verified
2019-03-15 14:41:11,897 INFO  Processing the response from verify service
2019-03-15 14:41:11,901 INFO  Starting to parse JSON response
2019-03-15 14:41:11,903 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:41:11,903 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:41:11,906 INFO  Successfully parsed JSON response
2019-03-15 14:41:11,906 INFO  In the process of generating verify response in HTML
2019-03-15 14:41:12,097 INFO  Successfully generated verify response in HTML
2019-03-15 14:41:12,097 INFO  Successfully processed the response from service
2019-03-15 14:41:29,706 INFO  Setting request parameters for VerifySolution
2019-03-15 14:41:29,706 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:41:29,706 INFO  Starting to parse the user solution
2019-03-15 14:41:29,707 INFO  Displaying user solution
2019-03-15 14:41:29,749 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    temp = num_list\r\n    for i in range(0,temp.get_max_size()-1):\r\n        sum+= temp.pop()\r\n    num_list.push(sum)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:41:29,749 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:41:29,750 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:41:29,750 INFO  Invoking the service to verify the user solution
2019-03-15 14:41:29,750 INFO  Time before invoking service:Fri Mar 15 14:41:29 IST 2019
2019-03-15 14:41:29,750 INFO  Initialising service address for VerifySolution
2019-03-15 14:41:29,750 INFO  Time before invoking service In SUPER:Fri Mar 15 14:41:29 IST 2019
2019-03-15 14:41:30,788 INFO  Time after invoking service In SUPER:Fri Mar 15 14:41:30 IST 2019
2019-03-15 14:41:30,788 INFO  Service responded successfully with required details
2019-03-15 14:41:30,789 INFO  Time after invoking service:Fri Mar 15 14:41:30 IST 2019
2019-03-15 14:41:30,789 INFO  User solution successfully verified
2019-03-15 14:41:30,789 INFO  Processing the response from verify service
2019-03-15 14:41:30,791 INFO  Starting to parse JSON response
2019-03-15 14:41:30,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:41:30,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:41:30,793 INFO  Successfully parsed JSON response
2019-03-15 14:41:30,793 INFO  In the process of generating verify response in HTML
2019-03-15 14:41:30,897 INFO  Successfully generated verify response in HTML
2019-03-15 14:41:30,897 INFO  Successfully processed the response from service
2019-03-15 14:46:24,131 INFO  Setting request parameters for VerifySolution
2019-03-15 14:46:24,132 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:46:24,132 INFO  Starting to parse the user solution
2019-03-15 14:46:24,133 INFO  Displaying user solution
2019-03-15 14:46:24,186 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    temp = num_list\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum+= num_list.pop()\r\n    temp.push(sum)\r\n    return temp\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:46:24,187 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:46:24,187 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:46:24,187 INFO  Invoking the service to verify the user solution
2019-03-15 14:46:24,188 INFO  Time before invoking service:Fri Mar 15 14:46:24 IST 2019
2019-03-15 14:46:24,188 INFO  Initialising service address for VerifySolution
2019-03-15 14:46:24,189 INFO  Time before invoking service In SUPER:Fri Mar 15 14:46:24 IST 2019
2019-03-15 14:46:25,174 INFO  Time after invoking service In SUPER:Fri Mar 15 14:46:25 IST 2019
2019-03-15 14:46:25,174 INFO  Service responded successfully with required details
2019-03-15 14:46:25,174 INFO  Time after invoking service:Fri Mar 15 14:46:25 IST 2019
2019-03-15 14:46:25,174 INFO  User solution successfully verified
2019-03-15 14:46:25,175 INFO  Processing the response from verify service
2019-03-15 14:46:25,179 INFO  Starting to parse JSON response
2019-03-15 14:46:25,180 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:46:25,180 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:46:25,182 INFO  Successfully parsed JSON response
2019-03-15 14:46:25,182 INFO  In the process of generating verify response in HTML
2019-03-15 14:46:25,284 INFO  Successfully generated verify response in HTML
2019-03-15 14:46:25,285 INFO  Successfully processed the response from service
2019-03-15 14:48:03,362 INFO  Setting request parameters for VerifySolution
2019-03-15 14:48:03,362 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:48:03,362 INFO  Starting to parse the user solution
2019-03-15 14:48:03,363 INFO  Displaying user solution
2019-03-15 14:48:03,406 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    temp = num_list\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum+= num_list.pop()\r\n    average = sum/(num_list.get_max_size()-1)\r\n    temp.push(average)\r\n    return temp\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:48:03,407 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:48:03,407 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:48:03,407 INFO  Invoking the service to verify the user solution
2019-03-15 14:48:03,407 INFO  Time before invoking service:Fri Mar 15 14:48:03 IST 2019
2019-03-15 14:48:03,407 INFO  Initialising service address for VerifySolution
2019-03-15 14:48:03,408 INFO  Time before invoking service In SUPER:Fri Mar 15 14:48:03 IST 2019
2019-03-15 14:48:04,485 INFO  Time after invoking service In SUPER:Fri Mar 15 14:48:04 IST 2019
2019-03-15 14:48:04,485 INFO  Service responded successfully with required details
2019-03-15 14:48:04,486 INFO  Time after invoking service:Fri Mar 15 14:48:04 IST 2019
2019-03-15 14:48:04,486 INFO  User solution successfully verified
2019-03-15 14:48:04,486 INFO  Processing the response from verify service
2019-03-15 14:48:04,489 INFO  Starting to parse JSON response
2019-03-15 14:48:04,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:48:04,491 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:48:04,493 INFO  Successfully parsed JSON response
2019-03-15 14:48:04,493 INFO  In the process of generating verify response in HTML
2019-03-15 14:48:04,666 INFO  Successfully generated verify response in HTML
2019-03-15 14:48:04,666 INFO  Successfully processed the response from service
2019-03-15 14:50:37,444 INFO  Setting request parameters for VerifySolution
2019-03-15 14:50:37,444 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:50:37,444 INFO  Starting to parse the user solution
2019-03-15 14:50:37,445 INFO  Displaying user solution
2019-03-15 14:50:37,500 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum = 0\r\n    temp = num_list\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum+= num_list.pop()\r\n    average = sum/(num_list.get_max_size())\r\n    temp.push(average)\r\n    return temp\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:50:37,501 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:50:37,501 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:50:37,502 INFO  Invoking the service to verify the user solution
2019-03-15 14:50:37,502 INFO  Time before invoking service:Fri Mar 15 14:50:37 IST 2019
2019-03-15 14:50:37,502 INFO  Initialising service address for VerifySolution
2019-03-15 14:50:37,503 INFO  Time before invoking service In SUPER:Fri Mar 15 14:50:37 IST 2019
2019-03-15 14:50:38,507 INFO  Time after invoking service In SUPER:Fri Mar 15 14:50:38 IST 2019
2019-03-15 14:50:38,508 INFO  Service responded successfully with required details
2019-03-15 14:50:38,508 INFO  Time after invoking service:Fri Mar 15 14:50:38 IST 2019
2019-03-15 14:50:38,508 INFO  User solution successfully verified
2019-03-15 14:50:38,508 INFO  Processing the response from verify service
2019-03-15 14:50:38,512 INFO  Starting to parse JSON response
2019-03-15 14:50:38,514 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:50:38,514 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:50:38,515 INFO  Successfully parsed JSON response
2019-03-15 14:50:38,515 INFO  In the process of generating verify response in HTML
2019-03-15 14:50:38,627 INFO  Successfully generated verify response in HTML
2019-03-15 14:50:38,627 INFO  Successfully processed the response from service
2019-03-15 14:51:04,081 INFO  Setting request parameters for VerifySolution
2019-03-15 14:51:04,081 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 14:51:04,081 INFO  Starting to parse the user solution
2019-03-15 14:51:04,082 INFO  Displaying user solution
2019-03-15 14:51:04,126 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        sum1+= num_list.pop()\r\n    average = sum1/(num_list.get_max_size())\r\n    temp.push(average)\r\n    return temp\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 14:51:04,127 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 14:51:04,127 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 14:51:04,127 INFO  Invoking the service to verify the user solution
2019-03-15 14:51:04,128 INFO  Time before invoking service:Fri Mar 15 14:51:04 IST 2019
2019-03-15 14:51:04,128 INFO  Initialising service address for VerifySolution
2019-03-15 14:51:04,128 INFO  Time before invoking service In SUPER:Fri Mar 15 14:51:04 IST 2019
2019-03-15 14:51:05,125 INFO  Time after invoking service In SUPER:Fri Mar 15 14:51:05 IST 2019
2019-03-15 14:51:05,126 INFO  Service responded successfully with required details
2019-03-15 14:51:05,126 INFO  Time after invoking service:Fri Mar 15 14:51:05 IST 2019
2019-03-15 14:51:05,126 INFO  User solution successfully verified
2019-03-15 14:51:05,126 INFO  Processing the response from verify service
2019-03-15 14:51:05,128 INFO  Starting to parse JSON response
2019-03-15 14:51:05,129 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:51:05,129 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 14:51:05,131 INFO  Successfully parsed JSON response
2019-03-15 14:51:05,131 INFO  In the process of generating verify response in HTML
2019-03-15 14:51:05,226 INFO  Successfully generated verify response in HTML
2019-03-15 14:51:05,227 INFO  Successfully processed the response from service
2019-03-15 15:11:08,182 INFO  Setting request parameters for VerifySolution
2019-03-15 15:11:08,183 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:11:08,183 INFO  Starting to parse the user solution
2019-03-15 15:11:08,185 INFO  Displaying user solution
2019-03-15 15:11:08,271 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n        \r\n    average = sum1//(temp.get_max_size())\r\n    \r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:11:08,271 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:11:08,272 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:11:08,272 INFO  Invoking the service to verify the user solution
2019-03-15 15:11:08,272 INFO  Time before invoking service:Fri Mar 15 15:11:08 IST 2019
2019-03-15 15:11:08,272 INFO  Initialising service address for VerifySolution
2019-03-15 15:11:08,273 INFO  Time before invoking service In SUPER:Fri Mar 15 15:11:08 IST 2019
2019-03-15 15:11:09,276 INFO  Time after invoking service In SUPER:Fri Mar 15 15:11:09 IST 2019
2019-03-15 15:11:09,277 INFO  Service responded successfully with required details
2019-03-15 15:11:09,277 INFO  Time after invoking service:Fri Mar 15 15:11:09 IST 2019
2019-03-15 15:11:09,277 INFO  User solution successfully verified
2019-03-15 15:11:09,277 INFO  Processing the response from verify service
2019-03-15 15:11:09,282 INFO  Starting to parse JSON response
2019-03-15 15:11:09,285 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:09,285 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:09,287 INFO  Successfully parsed JSON response
2019-03-15 15:11:09,287 INFO  In the process of generating verify response in HTML
2019-03-15 15:11:09,412 INFO  Successfully generated verify response in HTML
2019-03-15 15:11:09,414 INFO  Successfully processed the response from service
2019-03-15 15:11:15,262 INFO  Setting request parameters for VerifySolution
2019-03-15 15:11:15,262 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:11:15,262 INFO  Starting to parse the user solution
2019-03-15 15:11:15,263 INFO  Displaying user solution
2019-03-15 15:11:15,328 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n        \r\n    average = sum1//(temp.get_max_size())\r\n    \r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:11:15,328 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:11:15,329 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:11:15,329 INFO  Invoking the service to verify the user solution
2019-03-15 15:11:15,330 INFO  Time before invoking service:Fri Mar 15 15:11:15 IST 2019
2019-03-15 15:11:15,330 INFO  Initialising service address for VerifySolution
2019-03-15 15:11:15,331 INFO  Time before invoking service In SUPER:Fri Mar 15 15:11:15 IST 2019
2019-03-15 15:11:16,232 INFO  Time after invoking service In SUPER:Fri Mar 15 15:11:16 IST 2019
2019-03-15 15:11:16,232 INFO  Service responded successfully with required details
2019-03-15 15:11:16,233 INFO  Time after invoking service:Fri Mar 15 15:11:16 IST 2019
2019-03-15 15:11:16,233 INFO  User solution successfully verified
2019-03-15 15:11:16,233 INFO  Processing the response from verify service
2019-03-15 15:11:16,238 INFO  Starting to parse JSON response
2019-03-15 15:11:16,239 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:16,239 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:16,242 INFO  Successfully parsed JSON response
2019-03-15 15:11:16,243 INFO  In the process of generating verify response in HTML
2019-03-15 15:11:16,365 INFO  Successfully generated verify response in HTML
2019-03-15 15:11:16,365 INFO  Successfully processed the response from service
2019-03-15 15:11:53,582 INFO  Setting request parameters for VerifySolution
2019-03-15 15:11:53,582 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:11:53,582 INFO  Starting to parse the user solution
2019-03-15 15:11:53,583 INFO  Displaying user solution
2019-03-15 15:11:53,625 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n        \r\n    average = sum1//(temp.get_max_size())\r\n    \r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:11:53,626 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:11:53,626 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:11:53,626 INFO  Invoking the service to verify the user solution
2019-03-15 15:11:53,626 INFO  Time before invoking service:Fri Mar 15 15:11:53 IST 2019
2019-03-15 15:11:53,626 INFO  Initialising service address for VerifySolution
2019-03-15 15:11:53,627 INFO  Time before invoking service In SUPER:Fri Mar 15 15:11:53 IST 2019
2019-03-15 15:11:54,524 INFO  Time after invoking service In SUPER:Fri Mar 15 15:11:54 IST 2019
2019-03-15 15:11:54,525 INFO  Service responded successfully with required details
2019-03-15 15:11:54,525 INFO  Time after invoking service:Fri Mar 15 15:11:54 IST 2019
2019-03-15 15:11:54,525 INFO  User solution successfully verified
2019-03-15 15:11:54,526 INFO  Processing the response from verify service
2019-03-15 15:11:54,529 INFO  Starting to parse JSON response
2019-03-15 15:11:54,531 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:54,531 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:11:54,532 INFO  Successfully parsed JSON response
2019-03-15 15:11:54,532 INFO  In the process of generating verify response in HTML
2019-03-15 15:11:54,628 INFO  Successfully generated verify response in HTML
2019-03-15 15:11:54,629 INFO  Successfully processed the response from service
2019-03-15 15:16:27,739 INFO  Setting request parameters for VerifySolution
2019-03-15 15:16:27,739 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:16:27,739 INFO  Starting to parse the user solution
2019-03-15 15:16:27,743 INFO  Displaying user solution
2019-03-15 15:16:27,805 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size())\r\n    \r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list.__str__()\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:16:27,806 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:16:27,807 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:16:27,807 INFO  Invoking the service to verify the user solution
2019-03-15 15:16:27,807 INFO  Time before invoking service:Fri Mar 15 15:16:27 IST 2019
2019-03-15 15:16:27,808 INFO  Initialising service address for VerifySolution
2019-03-15 15:16:27,809 INFO  Time before invoking service In SUPER:Fri Mar 15 15:16:27 IST 2019
2019-03-15 15:16:28,776 INFO  Time after invoking service In SUPER:Fri Mar 15 15:16:28 IST 2019
2019-03-15 15:16:28,776 INFO  Service responded successfully with required details
2019-03-15 15:16:28,777 INFO  Time after invoking service:Fri Mar 15 15:16:28 IST 2019
2019-03-15 15:16:28,777 INFO  User solution successfully verified
2019-03-15 15:16:28,777 INFO  Processing the response from verify service
2019-03-15 15:16:28,782 INFO  Starting to parse JSON response
2019-03-15 15:16:28,784 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:16:28,784 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:16:28,786 INFO  Successfully parsed JSON response
2019-03-15 15:16:28,786 INFO  In the process of generating verify response in HTML
2019-03-15 15:16:28,913 INFO  Successfully generated verify response in HTML
2019-03-15 15:16:28,913 INFO  Successfully processed the response from service
2019-03-15 15:16:37,444 INFO  Setting request parameters for VerifySolution
2019-03-15 15:16:37,445 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:16:37,445 INFO  Starting to parse the user solution
2019-03-15 15:16:37,447 INFO  Displaying user solution
2019-03-15 15:16:37,502 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size())\r\n    \r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:16:37,503 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:16:37,503 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:16:37,503 INFO  Invoking the service to verify the user solution
2019-03-15 15:16:37,504 INFO  Time before invoking service:Fri Mar 15 15:16:37 IST 2019
2019-03-15 15:16:37,504 INFO  Initialising service address for VerifySolution
2019-03-15 15:16:37,505 INFO  Time before invoking service In SUPER:Fri Mar 15 15:16:37 IST 2019
2019-03-15 15:16:38,499 INFO  Time after invoking service In SUPER:Fri Mar 15 15:16:38 IST 2019
2019-03-15 15:16:38,500 INFO  Service responded successfully with required details
2019-03-15 15:16:38,500 INFO  Time after invoking service:Fri Mar 15 15:16:38 IST 2019
2019-03-15 15:16:38,500 INFO  User solution successfully verified
2019-03-15 15:16:38,501 INFO  Processing the response from verify service
2019-03-15 15:16:38,503 INFO  Starting to parse JSON response
2019-03-15 15:16:38,505 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:16:38,505 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:16:38,507 INFO  Successfully parsed JSON response
2019-03-15 15:16:38,507 INFO  In the process of generating verify response in HTML
2019-03-15 15:16:38,681 INFO  Successfully generated verify response in HTML
2019-03-15 15:16:38,682 INFO  Successfully processed the response from service
2019-03-15 15:17:21,049 INFO  Setting request parameters for VerifySolution
2019-03-15 15:17:21,049 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:17:21,049 INFO  Starting to parse the user solution
2019-03-15 15:17:21,050 INFO  Displaying user solution
2019-03-15 15:17:21,084 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size())\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:17:21,085 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:17:21,085 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:17:21,085 INFO  Invoking the service to verify the user solution
2019-03-15 15:17:21,085 INFO  Time before invoking service:Fri Mar 15 15:17:21 IST 2019
2019-03-15 15:17:21,085 INFO  Initialising service address for VerifySolution
2019-03-15 15:17:21,086 INFO  Time before invoking service In SUPER:Fri Mar 15 15:17:21 IST 2019
2019-03-15 15:17:22,086 INFO  Time after invoking service In SUPER:Fri Mar 15 15:17:22 IST 2019
2019-03-15 15:17:22,086 INFO  Service responded successfully with required details
2019-03-15 15:17:22,087 INFO  Time after invoking service:Fri Mar 15 15:17:22 IST 2019
2019-03-15 15:17:22,087 INFO  User solution successfully verified
2019-03-15 15:17:22,087 INFO  Processing the response from verify service
2019-03-15 15:17:22,089 INFO  Starting to parse JSON response
2019-03-15 15:17:22,090 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:22,090 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:22,091 INFO  Successfully parsed JSON response
2019-03-15 15:17:22,092 INFO  In the process of generating verify response in HTML
2019-03-15 15:17:22,174 INFO  Successfully generated verify response in HTML
2019-03-15 15:17:22,175 INFO  Successfully processed the response from service
2019-03-15 15:17:46,268 INFO  Setting request parameters for VerifySolution
2019-03-15 15:17:46,269 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:17:46,269 INFO  Starting to parse the user solution
2019-03-15 15:17:46,269 INFO  Displaying user solution
2019-03-15 15:17:46,317 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size()+1)\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:17:46,318 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:17:46,319 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:17:46,319 INFO  Invoking the service to verify the user solution
2019-03-15 15:17:46,319 INFO  Time before invoking service:Fri Mar 15 15:17:46 IST 2019
2019-03-15 15:17:46,319 INFO  Initialising service address for VerifySolution
2019-03-15 15:17:46,321 INFO  Time before invoking service In SUPER:Fri Mar 15 15:17:46 IST 2019
2019-03-15 15:17:47,442 INFO  Time after invoking service In SUPER:Fri Mar 15 15:17:47 IST 2019
2019-03-15 15:17:47,442 INFO  Service responded successfully with required details
2019-03-15 15:17:47,443 INFO  Time after invoking service:Fri Mar 15 15:17:47 IST 2019
2019-03-15 15:17:47,443 INFO  User solution successfully verified
2019-03-15 15:17:47,444 INFO  Processing the response from verify service
2019-03-15 15:17:47,445 INFO  Starting to parse JSON response
2019-03-15 15:17:47,445 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:47,446 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:47,448 INFO  Successfully parsed JSON response
2019-03-15 15:17:47,449 INFO  In the process of generating verify response in HTML
2019-03-15 15:17:47,541 INFO  Successfully generated verify response in HTML
2019-03-15 15:17:47,542 INFO  Successfully processed the response from service
2019-03-15 15:17:58,883 INFO  Setting request parameters for VerifySolution
2019-03-15 15:17:58,883 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:17:58,883 INFO  Starting to parse the user solution
2019-03-15 15:17:58,884 INFO  Displaying user solution
2019-03-15 15:17:58,935 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size())\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:17:58,936 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:17:58,936 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:17:58,936 INFO  Invoking the service to verify the user solution
2019-03-15 15:17:58,937 INFO  Time before invoking service:Fri Mar 15 15:17:58 IST 2019
2019-03-15 15:17:58,937 INFO  Initialising service address for VerifySolution
2019-03-15 15:17:58,938 INFO  Time before invoking service In SUPER:Fri Mar 15 15:17:58 IST 2019
2019-03-15 15:17:59,824 INFO  Time after invoking service In SUPER:Fri Mar 15 15:17:59 IST 2019
2019-03-15 15:17:59,824 INFO  Service responded successfully with required details
2019-03-15 15:17:59,825 INFO  Time after invoking service:Fri Mar 15 15:17:59 IST 2019
2019-03-15 15:17:59,825 INFO  User solution successfully verified
2019-03-15 15:17:59,825 INFO  Processing the response from verify service
2019-03-15 15:17:59,826 INFO  Starting to parse JSON response
2019-03-15 15:17:59,827 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:59,827 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:17:59,828 INFO  Successfully parsed JSON response
2019-03-15 15:17:59,828 INFO  In the process of generating verify response in HTML
2019-03-15 15:17:59,910 INFO  Successfully generated verify response in HTML
2019-03-15 15:17:59,910 INFO  Successfully processed the response from service
2019-03-15 15:18:20,415 INFO  Setting request parameters for VerifySolution
2019-03-15 15:18:20,415 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:18:20,415 INFO  Starting to parse the user solution
2019-03-15 15:18:20,416 INFO  Displaying user solution
2019-03-15 15:18:20,451 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1//(temp.get_max_size()-1)\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:18:20,451 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:18:20,451 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:18:20,451 INFO  Invoking the service to verify the user solution
2019-03-15 15:18:20,452 INFO  Time before invoking service:Fri Mar 15 15:18:20 IST 2019
2019-03-15 15:18:20,452 INFO  Initialising service address for VerifySolution
2019-03-15 15:18:20,452 INFO  Time before invoking service In SUPER:Fri Mar 15 15:18:20 IST 2019
2019-03-15 15:18:21,362 INFO  Time after invoking service In SUPER:Fri Mar 15 15:18:21 IST 2019
2019-03-15 15:18:21,362 INFO  Service responded successfully with required details
2019-03-15 15:18:21,362 INFO  Time after invoking service:Fri Mar 15 15:18:21 IST 2019
2019-03-15 15:18:21,363 INFO  User solution successfully verified
2019-03-15 15:18:21,363 INFO  Processing the response from verify service
2019-03-15 15:18:21,364 INFO  Starting to parse JSON response
2019-03-15 15:18:21,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:21,365 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:21,366 INFO  Successfully parsed JSON response
2019-03-15 15:18:21,366 INFO  In the process of generating verify response in HTML
2019-03-15 15:18:21,449 INFO  Successfully generated verify response in HTML
2019-03-15 15:18:21,449 INFO  Successfully processed the response from service
2019-03-15 15:18:34,517 INFO  Setting request parameters for VerifySolution
2019-03-15 15:18:34,517 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:18:34,517 INFO  Starting to parse the user solution
2019-03-15 15:18:34,518 INFO  Displaying user solution
2019-03-15 15:18:34,558 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1/(temp.get_max_size()-1)\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:18:34,559 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:18:34,559 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:18:34,559 INFO  Invoking the service to verify the user solution
2019-03-15 15:18:34,559 INFO  Time before invoking service:Fri Mar 15 15:18:34 IST 2019
2019-03-15 15:18:34,560 INFO  Initialising service address for VerifySolution
2019-03-15 15:18:34,560 INFO  Time before invoking service In SUPER:Fri Mar 15 15:18:34 IST 2019
2019-03-15 15:18:35,495 INFO  Time after invoking service In SUPER:Fri Mar 15 15:18:35 IST 2019
2019-03-15 15:18:35,496 INFO  Service responded successfully with required details
2019-03-15 15:18:35,496 INFO  Time after invoking service:Fri Mar 15 15:18:35 IST 2019
2019-03-15 15:18:35,496 INFO  User solution successfully verified
2019-03-15 15:18:35,497 INFO  Processing the response from verify service
2019-03-15 15:18:35,499 INFO  Starting to parse JSON response
2019-03-15 15:18:35,500 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:35,500 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:35,502 INFO  Successfully parsed JSON response
2019-03-15 15:18:35,502 INFO  In the process of generating verify response in HTML
2019-03-15 15:18:35,587 INFO  Successfully generated verify response in HTML
2019-03-15 15:18:35,587 INFO  Successfully processed the response from service
2019-03-15 15:18:56,752 INFO  Setting request parameters for VerifySolution
2019-03-15 15:18:56,752 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:18:56,752 INFO  Starting to parse the user solution
2019-03-15 15:18:56,753 INFO  Displaying user solution
2019-03-15 15:18:56,797 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    temp = num_list\r\n    list1=[]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        list1.append(temp.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1/(temp.get_max_size()-1)\r\n    list1 = list1[::-1]\r\n    for i in range(0,temp.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:18:56,797 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:18:56,797 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:18:56,797 INFO  Invoking the service to verify the user solution
2019-03-15 15:18:56,798 INFO  Time before invoking service:Fri Mar 15 15:18:56 IST 2019
2019-03-15 15:18:56,798 INFO  Initialising service address for VerifySolution
2019-03-15 15:18:56,799 INFO  Time before invoking service In SUPER:Fri Mar 15 15:18:56 IST 2019
2019-03-15 15:18:57,954 INFO  Time after invoking service In SUPER:Fri Mar 15 15:18:57 IST 2019
2019-03-15 15:18:57,955 INFO  Service responded successfully with required details
2019-03-15 15:18:57,955 INFO  Time after invoking service:Fri Mar 15 15:18:57 IST 2019
2019-03-15 15:18:57,955 INFO  User solution successfully verified
2019-03-15 15:18:57,955 INFO  Processing the response from verify service
2019-03-15 15:18:57,956 INFO  Starting to parse JSON response
2019-03-15 15:18:57,957 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:57,957 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:18:57,959 INFO  Successfully parsed JSON response
2019-03-15 15:18:57,959 INFO  In the process of generating verify response in HTML
2019-03-15 15:18:58,039 INFO  Successfully generated verify response in HTML
2019-03-15 15:18:58,039 INFO  Successfully processed the response from service
2019-03-15 15:35:12,056 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 15:35:12,057 INFO  Displaying user solution
2019-03-15 15:35:12,067 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 15:35:12,068 INFO  Invoking the service to submit the user solution
2019-03-15 15:35:12,068 INFO  Initialising service address for Submit
2019-03-15 15:35:12,071 INFO  Time before invoking service In SUPER:Fri Mar 15 15:35:12 IST 2019
2019-03-15 15:35:12,533 INFO  Time after invoking service In SUPER:Fri Mar 15 15:35:12 IST 2019
2019-03-15 15:35:12,533 INFO  Service responded successfully with required details
2019-03-15 15:35:12,533 INFO  User solution successfully submitted
2019-03-15 15:35:12,534 INFO  Displaying submission status
2019-03-15 15:35:12,534 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 15:35:15,131 INFO  Setting request parameters for VerifySolution
2019-03-15 15:35:15,131 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:35:15,131 INFO  Starting to parse the user solution
2019-03-15 15:35:15,132 INFO  Displaying user solution
2019-03-15 15:35:15,200 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n        \r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    #temp = num_list\r\n    list1=[]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        list1.append(num_list.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1/(num_list.get_max_size()-1)\r\n    print(num_list.__str__())\r\n    list1 = list1[::-1]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list.__str__()\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:35:15,201 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:35:15,201 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:35:15,201 INFO  Invoking the service to verify the user solution
2019-03-15 15:35:15,203 INFO  Time before invoking service:Fri Mar 15 15:35:15 IST 2019
2019-03-15 15:35:15,203 INFO  Initialising service address for VerifySolution
2019-03-15 15:35:15,204 INFO  Time before invoking service In SUPER:Fri Mar 15 15:35:15 IST 2019
2019-03-15 15:35:16,056 INFO  Time after invoking service In SUPER:Fri Mar 15 15:35:16 IST 2019
2019-03-15 15:35:16,056 INFO  Service responded successfully with required details
2019-03-15 15:35:16,056 INFO  Time after invoking service:Fri Mar 15 15:35:16 IST 2019
2019-03-15 15:35:16,057 INFO  User solution successfully verified
2019-03-15 15:35:16,057 INFO  Processing the response from verify service
2019-03-15 15:35:16,061 INFO  Starting to parse JSON response
2019-03-15 15:35:16,062 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:35:16,062 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:35:16,064 INFO  Successfully parsed JSON response
2019-03-15 15:35:16,064 INFO  In the process of generating verify response in HTML
2019-03-15 15:35:16,157 INFO  Successfully generated verify response in HTML
2019-03-15 15:35:16,157 INFO  Successfully processed the response from service
2019-03-15 15:35:28,003 INFO  Setting request parameters for VerifySolution
2019-03-15 15:35:28,003 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:35:28,003 INFO  Starting to parse the user solution
2019-03-15 15:35:28,004 INFO  Displaying user solution
2019-03-15 15:35:28,043 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n        \r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    #temp = num_list\r\n    list1=[]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        list1.append(num_list.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1/(num_list.get_max_size()-1)\r\n    \r\n    list1 = list1[::-1]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:35:28,044 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:35:28,044 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:35:28,044 INFO  Invoking the service to verify the user solution
2019-03-15 15:35:28,044 INFO  Time before invoking service:Fri Mar 15 15:35:28 IST 2019
2019-03-15 15:35:28,044 INFO  Initialising service address for VerifySolution
2019-03-15 15:35:28,046 INFO  Time before invoking service In SUPER:Fri Mar 15 15:35:28 IST 2019
2019-03-15 15:35:29,071 INFO  Time after invoking service In SUPER:Fri Mar 15 15:35:29 IST 2019
2019-03-15 15:35:29,072 INFO  Service responded successfully with required details
2019-03-15 15:35:29,072 INFO  Time after invoking service:Fri Mar 15 15:35:29 IST 2019
2019-03-15 15:35:29,073 INFO  User solution successfully verified
2019-03-15 15:35:29,073 INFO  Processing the response from verify service
2019-03-15 15:35:29,075 INFO  Starting to parse JSON response
2019-03-15 15:35:29,076 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:35:29,076 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:35:29,078 INFO  Successfully parsed JSON response
2019-03-15 15:35:29,078 INFO  In the process of generating verify response in HTML
2019-03-15 15:35:29,190 INFO  Successfully generated verify response in HTML
2019-03-15 15:35:29,190 INFO  Successfully processed the response from service
2019-03-15 15:35:34,569 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 15:35:34,570 INFO  Displaying user solution
2019-03-15 15:35:34,584 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 15:35:34,585 INFO  Invoking the service to submit the user solution
2019-03-15 15:35:34,585 INFO  Initialising service address for Submit
2019-03-15 15:35:34,585 INFO  Time before invoking service In SUPER:Fri Mar 15 15:35:34 IST 2019
2019-03-15 15:35:34,967 INFO  Time after invoking service In SUPER:Fri Mar 15 15:35:34 IST 2019
2019-03-15 15:35:34,967 INFO  Service responded successfully with required details
2019-03-15 15:35:34,967 INFO  User solution successfully submitted
2019-03-15 15:35:34,968 INFO  Displaying submission status
2019-03-15 15:35:34,968 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 15:35:37,681 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 15:35:37,683 INFO  Displaying user solution
2019-03-15 15:35:37,695 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 15:35:37,695 INFO  Invoking the service to submit the user solution
2019-03-15 15:35:37,695 INFO  Initialising service address for Submit
2019-03-15 15:35:37,696 INFO  Time before invoking service In SUPER:Fri Mar 15 15:35:37 IST 2019
2019-03-15 15:35:37,837 INFO  Time after invoking service In SUPER:Fri Mar 15 15:35:37 IST 2019
2019-03-15 15:35:37,838 INFO  Service responded successfully with required details
2019-03-15 15:35:37,838 INFO  User solution successfully submitted
2019-03-15 15:35:37,838 INFO  Displaying submission status
2019-03-15 15:35:37,838 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 15:51:42,425 INFO  Setting request parameters for VerifySolution
2019-03-15 15:51:42,425 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 15:51:42,425 INFO  Starting to parse the user solution
2019-03-15 15:51:42,426 INFO  Displaying user solution
2019-03-15 15:51:42,496 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-6\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                            \r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n        \r\n            return data\r\n    \r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n                                        \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\n\r\ndef find_average(num_list):\r\n    #write your logic here\r\n    sum1 = 0\r\n    #temp = num_list\r\n    list1=[]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        list1.append(num_list.pop())\r\n        sum1+=list1[i]\r\n        \r\n       \r\n    average = sum1/(num_list.get_max_size()-1)\r\n    \r\n    list1 = list1[::-1]\r\n    for i in range(0,num_list.get_max_size()-1):\r\n        num_list.push(list1[i])\r\n    num_list.push(average)\r\n    return num_list\r\n\r\n#Push different values to the stack and test your program\r\nnum_list=Stack(7)\r\nnum_list.push(78)\r\nnum_list.push(65)\r\nnum_list.push(92)\r\nnum_list.push(46)\r\nnum_list.push(89)\r\nnum_list.push(71)\r\nnew_stack=find_average(num_list)\r\nnew_stack.display()\r\n","asgnmtId":"6","SolutionFileName":"Excer6.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 15:51:42,497 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 15:51:42,498 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 15:51:42,498 INFO  Invoking the service to verify the user solution
2019-03-15 15:51:42,498 INFO  Time before invoking service:Fri Mar 15 15:51:42 IST 2019
2019-03-15 15:51:42,498 INFO  Initialising service address for VerifySolution
2019-03-15 15:51:42,499 INFO  Time before invoking service In SUPER:Fri Mar 15 15:51:42 IST 2019
2019-03-15 15:51:43,496 INFO  Time after invoking service In SUPER:Fri Mar 15 15:51:43 IST 2019
2019-03-15 15:51:43,496 INFO  Service responded successfully with required details
2019-03-15 15:51:43,497 INFO  Time after invoking service:Fri Mar 15 15:51:43 IST 2019
2019-03-15 15:51:43,497 INFO  User solution successfully verified
2019-03-15 15:51:43,497 INFO  Processing the response from verify service
2019-03-15 15:51:43,501 INFO  Starting to parse JSON response
2019-03-15 15:51:43,503 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:51:43,503 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 15:51:43,504 INFO  Successfully parsed JSON response
2019-03-15 15:51:43,504 INFO  In the process of generating verify response in HTML
2019-03-15 15:51:43,604 INFO  Successfully generated verify response in HTML
2019-03-15 15:51:43,604 INFO  Successfully processed the response from service
2019-03-15 15:51:47,092 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 15:51:47,093 INFO  Displaying user solution
2019-03-15 15:51:47,107 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 15:51:47,108 INFO  Invoking the service to submit the user solution
2019-03-15 15:51:47,108 INFO  Initialising service address for Submit
2019-03-15 15:51:47,108 INFO  Time before invoking service In SUPER:Fri Mar 15 15:51:47 IST 2019
2019-03-15 15:51:47,282 INFO  Time after invoking service In SUPER:Fri Mar 15 15:51:47 IST 2019
2019-03-15 15:51:47,282 INFO  Service responded successfully with required details
2019-03-15 15:51:47,282 INFO  User solution successfully submitted
2019-03-15 15:51:47,283 INFO  Displaying submission status
2019-03-15 15:51:47,283 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 16:13:46,725 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-15 16:13:59,861 INFO  Setting request parameters for VerifySolution
2019-03-15 16:13:59,861 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 16:13:59,861 INFO  Starting to parse the user solution
2019-03-15 16:13:59,861 INFO  Displaying user solution
2019-03-15 16:13:59,919 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        pass\r\n    def display_ball_details(self,manufacturer):\r\n        pass \r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 16:13:59,920 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 16:13:59,921 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 16:13:59,921 INFO  Invoking the service to verify the user solution
2019-03-15 16:13:59,921 INFO  Time before invoking service:Fri Mar 15 16:13:59 IST 2019
2019-03-15 16:13:59,921 INFO  Initialising service address for VerifySolution
2019-03-15 16:13:59,922 INFO  Time before invoking service In SUPER:Fri Mar 15 16:13:59 IST 2019
2019-03-15 16:14:00,863 INFO  Time after invoking service In SUPER:Fri Mar 15 16:14:00 IST 2019
2019-03-15 16:14:00,864 INFO  Service responded successfully with required details
2019-03-15 16:14:00,864 INFO  Time after invoking service:Fri Mar 15 16:14:00 IST 2019
2019-03-15 16:14:00,864 INFO  User solution successfully verified
2019-03-15 16:14:00,864 INFO  Processing the response from verify service
2019-03-15 16:14:00,870 INFO  Starting to parse JSON response
2019-03-15 16:14:00,872 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 16:14:00,872 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 16:14:00,873 INFO  Successfully parsed JSON response
2019-03-15 16:14:00,874 INFO  In the process of generating verify response in HTML
2019-03-15 16:14:00,958 INFO  Successfully generated verify response in HTML
2019-03-15 16:14:00,959 INFO  Successfully processed the response from service
2019-03-15 17:07:56,044 INFO  Setting request parameters for VerifySolution
2019-03-15 17:07:56,044 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:07:56,044 INFO  Starting to parse the user solution
2019-03-15 17:07:56,045 INFO  Displaying user solution
2019-03-15 17:07:56,197 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,ball_stack.get_max_size()):\r\n            list1.append(ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer. \r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:07:56,197 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:07:56,198 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:07:56,198 INFO  Invoking the service to verify the user solution
2019-03-15 17:07:56,198 INFO  Time before invoking service:Fri Mar 15 17:07:56 IST 2019
2019-03-15 17:07:56,198 INFO  Initialising service address for VerifySolution
2019-03-15 17:07:56,199 INFO  Time before invoking service In SUPER:Fri Mar 15 17:07:56 IST 2019
2019-03-15 17:07:58,893 INFO  Time after invoking service In SUPER:Fri Mar 15 17:07:58 IST 2019
2019-03-15 17:07:58,894 INFO  Service responded successfully with required details
2019-03-15 17:07:58,894 INFO  Time after invoking service:Fri Mar 15 17:07:58 IST 2019
2019-03-15 17:07:58,895 INFO  User solution successfully verified
2019-03-15 17:07:58,895 INFO  Processing the response from verify service
2019-03-15 17:07:58,897 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-15 17:08:06,419 INFO  Setting request parameters for VerifySolution
2019-03-15 17:08:06,419 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:08:06,419 INFO  Starting to parse the user solution
2019-03-15 17:08:06,420 INFO  Displaying user solution
2019-03-15 17:08:06,489 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,ball_stack.get_max_size()):\r\n            list1.append(ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:08:06,491 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:08:06,491 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:08:06,491 INFO  Invoking the service to verify the user solution
2019-03-15 17:08:06,492 INFO  Time before invoking service:Fri Mar 15 17:08:06 IST 2019
2019-03-15 17:08:06,492 INFO  Initialising service address for VerifySolution
2019-03-15 17:08:06,494 INFO  Time before invoking service In SUPER:Fri Mar 15 17:08:06 IST 2019
2019-03-15 17:08:07,664 INFO  Time after invoking service In SUPER:Fri Mar 15 17:08:07 IST 2019
2019-03-15 17:08:07,665 INFO  Service responded successfully with required details
2019-03-15 17:08:07,666 INFO  Time after invoking service:Fri Mar 15 17:08:07 IST 2019
2019-03-15 17:08:07,666 INFO  User solution successfully verified
2019-03-15 17:08:07,667 INFO  Processing the response from verify service
2019-03-15 17:08:07,673 INFO  Starting to parse JSON response
2019-03-15 17:08:07,676 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:07,676 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:07,678 INFO  Successfully parsed JSON response
2019-03-15 17:08:07,678 INFO  In the process of generating verify response in HTML
2019-03-15 17:08:07,807 INFO  Successfully generated verify response in HTML
2019-03-15 17:08:07,808 INFO  Successfully processed the response from service
2019-03-15 17:08:34,254 INFO  Setting request parameters for VerifySolution
2019-03-15 17:08:34,254 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:08:34,254 INFO  Starting to parse the user solution
2019-03-15 17:08:34,255 INFO  Displaying user solution
2019-03-15 17:08:34,319 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,ball_stack.get_max_size()):\r\n            list1.append(ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:08:34,319 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:08:34,320 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:08:34,320 INFO  Invoking the service to verify the user solution
2019-03-15 17:08:34,321 INFO  Time before invoking service:Fri Mar 15 17:08:34 IST 2019
2019-03-15 17:08:34,321 INFO  Initialising service address for VerifySolution
2019-03-15 17:08:34,322 INFO  Time before invoking service In SUPER:Fri Mar 15 17:08:34 IST 2019
2019-03-15 17:08:35,437 INFO  Time after invoking service In SUPER:Fri Mar 15 17:08:35 IST 2019
2019-03-15 17:08:35,438 INFO  Service responded successfully with required details
2019-03-15 17:08:35,438 INFO  Time after invoking service:Fri Mar 15 17:08:35 IST 2019
2019-03-15 17:08:35,439 INFO  User solution successfully verified
2019-03-15 17:08:35,439 INFO  Processing the response from verify service
2019-03-15 17:08:35,441 INFO  Starting to parse JSON response
2019-03-15 17:08:35,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:35,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:35,445 INFO  Successfully parsed JSON response
2019-03-15 17:08:35,445 INFO  In the process of generating verify response in HTML
2019-03-15 17:08:35,542 INFO  Successfully generated verify response in HTML
2019-03-15 17:08:35,542 INFO  Successfully processed the response from service
2019-03-15 17:08:54,719 INFO  Setting request parameters for VerifySolution
2019-03-15 17:08:54,719 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:08:54,719 INFO  Starting to parse the user solution
2019-03-15 17:08:54,720 INFO  Displaying user solution
2019-03-15 17:08:54,776 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:08:54,776 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:08:54,777 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:08:54,777 INFO  Invoking the service to verify the user solution
2019-03-15 17:08:54,777 INFO  Time before invoking service:Fri Mar 15 17:08:54 IST 2019
2019-03-15 17:08:54,777 INFO  Initialising service address for VerifySolution
2019-03-15 17:08:54,778 INFO  Time before invoking service In SUPER:Fri Mar 15 17:08:54 IST 2019
2019-03-15 17:08:55,823 INFO  Time after invoking service In SUPER:Fri Mar 15 17:08:55 IST 2019
2019-03-15 17:08:55,823 INFO  Service responded successfully with required details
2019-03-15 17:08:55,824 INFO  Time after invoking service:Fri Mar 15 17:08:55 IST 2019
2019-03-15 17:08:55,824 INFO  User solution successfully verified
2019-03-15 17:08:55,824 INFO  Processing the response from verify service
2019-03-15 17:08:55,827 INFO  Starting to parse JSON response
2019-03-15 17:08:55,829 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:55,829 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:08:55,831 INFO  Successfully parsed JSON response
2019-03-15 17:08:55,831 INFO  In the process of generating verify response in HTML
2019-03-15 17:08:55,933 INFO  Successfully generated verify response in HTML
2019-03-15 17:08:55,934 INFO  Successfully processed the response from service
2019-03-15 17:09:46,808 INFO  Setting request parameters for VerifySolution
2019-03-15 17:09:46,808 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:09:46,808 INFO  Starting to parse the user solution
2019-03-15 17:09:46,810 INFO  Displaying user solution
2019-03-15 17:09:46,862 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:09:46,862 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:09:46,863 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:09:46,863 INFO  Invoking the service to verify the user solution
2019-03-15 17:09:46,863 INFO  Time before invoking service:Fri Mar 15 17:09:46 IST 2019
2019-03-15 17:09:46,863 INFO  Initialising service address for VerifySolution
2019-03-15 17:09:46,864 INFO  Time before invoking service In SUPER:Fri Mar 15 17:09:46 IST 2019
2019-03-15 17:09:47,804 INFO  Time after invoking service In SUPER:Fri Mar 15 17:09:47 IST 2019
2019-03-15 17:09:47,804 INFO  Service responded successfully with required details
2019-03-15 17:09:47,804 INFO  Time after invoking service:Fri Mar 15 17:09:47 IST 2019
2019-03-15 17:09:47,805 INFO  User solution successfully verified
2019-03-15 17:09:47,805 INFO  Processing the response from verify service
2019-03-15 17:09:47,807 INFO  Starting to parse JSON response
2019-03-15 17:09:47,808 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:09:47,809 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:09:47,810 INFO  Successfully parsed JSON response
2019-03-15 17:09:47,811 INFO  In the process of generating verify response in HTML
2019-03-15 17:09:47,932 INFO  Successfully generated verify response in HTML
2019-03-15 17:09:47,932 INFO  Successfully processed the response from service
2019-03-15 17:09:57,366 INFO  Setting request parameters for VerifySolution
2019-03-15 17:09:57,366 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:09:57,367 INFO  Starting to parse the user solution
2019-03-15 17:09:57,368 INFO  Displaying user solution
2019-03-15 17:09:57,435 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        \r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:09:57,435 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:09:57,436 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:09:57,436 INFO  Invoking the service to verify the user solution
2019-03-15 17:09:57,437 INFO  Time before invoking service:Fri Mar 15 17:09:57 IST 2019
2019-03-15 17:09:57,437 INFO  Initialising service address for VerifySolution
2019-03-15 17:09:57,438 INFO  Time before invoking service In SUPER:Fri Mar 15 17:09:57 IST 2019
2019-03-15 17:09:58,403 INFO  Time after invoking service In SUPER:Fri Mar 15 17:09:58 IST 2019
2019-03-15 17:09:58,404 INFO  Service responded successfully with required details
2019-03-15 17:09:58,404 INFO  Time after invoking service:Fri Mar 15 17:09:58 IST 2019
2019-03-15 17:09:58,404 INFO  User solution successfully verified
2019-03-15 17:09:58,405 INFO  Processing the response from verify service
2019-03-15 17:09:58,408 INFO  Starting to parse JSON response
2019-03-15 17:09:58,410 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:09:58,410 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:09:58,413 INFO  Successfully parsed JSON response
2019-03-15 17:09:58,413 INFO  In the process of generating verify response in HTML
2019-03-15 17:09:58,510 INFO  Successfully generated verify response in HTML
2019-03-15 17:09:58,510 INFO  Successfully processed the response from service
2019-03-15 17:10:45,493 INFO  Setting request parameters for VerifySolution
2019-03-15 17:10:45,493 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:10:45,493 INFO  Starting to parse the user solution
2019-03-15 17:10:45,494 INFO  Displaying user solution
2019-03-15 17:10:45,533 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:10:45,534 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:10:45,534 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:10:45,534 INFO  Invoking the service to verify the user solution
2019-03-15 17:10:45,534 INFO  Time before invoking service:Fri Mar 15 17:10:45 IST 2019
2019-03-15 17:10:45,534 INFO  Initialising service address for VerifySolution
2019-03-15 17:10:45,535 INFO  Time before invoking service In SUPER:Fri Mar 15 17:10:45 IST 2019
2019-03-15 17:10:46,471 INFO  Time after invoking service In SUPER:Fri Mar 15 17:10:46 IST 2019
2019-03-15 17:10:46,471 INFO  Service responded successfully with required details
2019-03-15 17:10:46,471 INFO  Time after invoking service:Fri Mar 15 17:10:46 IST 2019
2019-03-15 17:10:46,472 INFO  User solution successfully verified
2019-03-15 17:10:46,472 INFO  Processing the response from verify service
2019-03-15 17:10:46,474 INFO  Starting to parse JSON response
2019-03-15 17:10:46,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:10:46,475 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:10:46,476 INFO  Successfully parsed JSON response
2019-03-15 17:10:46,476 INFO  In the process of generating verify response in HTML
2019-03-15 17:10:46,554 INFO  Successfully generated verify response in HTML
2019-03-15 17:10:46,554 INFO  Successfully processed the response from service
2019-03-15 17:11:45,594 INFO  Setting request parameters for VerifySolution
2019-03-15 17:11:45,594 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:11:45,594 INFO  Starting to parse the user solution
2019-03-15 17:11:45,594 INFO  Displaying user solution
2019-03-15 17:11:45,641 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n            list2 = list2\r\n            list3=list3\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:11:45,642 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:11:45,643 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:11:45,643 INFO  Invoking the service to verify the user solution
2019-03-15 17:11:45,643 INFO  Time before invoking service:Fri Mar 15 17:11:45 IST 2019
2019-03-15 17:11:45,643 INFO  Initialising service address for VerifySolution
2019-03-15 17:11:45,644 INFO  Time before invoking service In SUPER:Fri Mar 15 17:11:45 IST 2019
2019-03-15 17:11:46,584 INFO  Time after invoking service In SUPER:Fri Mar 15 17:11:46 IST 2019
2019-03-15 17:11:46,584 INFO  Service responded successfully with required details
2019-03-15 17:11:46,584 INFO  Time after invoking service:Fri Mar 15 17:11:46 IST 2019
2019-03-15 17:11:46,584 INFO  User solution successfully verified
2019-03-15 17:11:46,585 INFO  Processing the response from verify service
2019-03-15 17:11:46,588 INFO  Starting to parse JSON response
2019-03-15 17:11:46,589 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:11:46,589 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:11:46,590 INFO  Successfully parsed JSON response
2019-03-15 17:11:46,591 INFO  In the process of generating verify response in HTML
2019-03-15 17:11:46,671 INFO  Successfully generated verify response in HTML
2019-03-15 17:11:46,671 INFO  Successfully processed the response from service
2019-03-15 17:11:53,852 INFO  Setting request parameters for VerifySolution
2019-03-15 17:11:53,852 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:11:53,853 INFO  Starting to parse the user solution
2019-03-15 17:11:53,853 INFO  Displaying user solution
2019-03-15 17:11:53,890 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n            list2 = list2\r\n            list3=list3\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:11:53,891 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:11:53,891 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:11:53,891 INFO  Invoking the service to verify the user solution
2019-03-15 17:11:53,891 INFO  Time before invoking service:Fri Mar 15 17:11:53 IST 2019
2019-03-15 17:11:53,891 INFO  Initialising service address for VerifySolution
2019-03-15 17:11:53,892 INFO  Time before invoking service In SUPER:Fri Mar 15 17:11:53 IST 2019
2019-03-15 17:11:54,842 INFO  Time after invoking service In SUPER:Fri Mar 15 17:11:54 IST 2019
2019-03-15 17:11:54,842 INFO  Service responded successfully with required details
2019-03-15 17:11:54,844 INFO  Time after invoking service:Fri Mar 15 17:11:54 IST 2019
2019-03-15 17:11:54,845 INFO  User solution successfully verified
2019-03-15 17:11:54,845 INFO  Processing the response from verify service
2019-03-15 17:11:54,851 INFO  Starting to parse JSON response
2019-03-15 17:11:54,852 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:11:54,852 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:11:54,853 INFO  Successfully parsed JSON response
2019-03-15 17:11:54,854 INFO  In the process of generating verify response in HTML
2019-03-15 17:11:54,931 INFO  Successfully generated verify response in HTML
2019-03-15 17:11:54,931 INFO  Successfully processed the response from service
2019-03-15 17:12:06,220 INFO  Setting request parameters for VerifySolution
2019-03-15 17:12:06,221 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:12:06,221 INFO  Starting to parse the user solution
2019-03-15 17:12:06,221 INFO  Displaying user solution
2019-03-15 17:12:06,262 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n            list2 = list2\r\n            list3=list3\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:12:06,262 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:12:06,262 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:12:06,262 INFO  Invoking the service to verify the user solution
2019-03-15 17:12:06,263 INFO  Time before invoking service:Fri Mar 15 17:12:06 IST 2019
2019-03-15 17:12:06,263 INFO  Initialising service address for VerifySolution
2019-03-15 17:12:06,264 INFO  Time before invoking service In SUPER:Fri Mar 15 17:12:06 IST 2019
2019-03-15 17:12:08,010 INFO  Time after invoking service In SUPER:Fri Mar 15 17:12:08 IST 2019
2019-03-15 17:12:08,011 INFO  Service responded successfully with required details
2019-03-15 17:12:08,011 INFO  Time after invoking service:Fri Mar 15 17:12:08 IST 2019
2019-03-15 17:12:08,011 INFO  User solution successfully verified
2019-03-15 17:12:08,012 INFO  Processing the response from verify service
2019-03-15 17:12:08,013 INFO  Starting to parse JSON response
2019-03-15 17:12:08,014 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:08,014 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:08,016 INFO  Successfully parsed JSON response
2019-03-15 17:12:08,017 INFO  In the process of generating verify response in HTML
2019-03-15 17:12:08,090 INFO  Successfully generated verify response in HTML
2019-03-15 17:12:08,090 INFO  Successfully processed the response from service
2019-03-15 17:12:46,473 INFO  Setting request parameters for VerifySolution
2019-03-15 17:12:46,473 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:12:46,473 INFO  Starting to parse the user solution
2019-03-15 17:12:46,474 INFO  Displaying user solution
2019-03-15 17:12:46,509 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n            list2 = list2\r\n            list3=list3\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:12:46,509 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:12:46,509 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:12:46,509 INFO  Invoking the service to verify the user solution
2019-03-15 17:12:46,510 INFO  Time before invoking service:Fri Mar 15 17:12:46 IST 2019
2019-03-15 17:12:46,510 INFO  Initialising service address for VerifySolution
2019-03-15 17:12:46,511 INFO  Time before invoking service In SUPER:Fri Mar 15 17:12:46 IST 2019
2019-03-15 17:12:47,551 INFO  Time after invoking service In SUPER:Fri Mar 15 17:12:47 IST 2019
2019-03-15 17:12:47,551 INFO  Service responded successfully with required details
2019-03-15 17:12:47,551 INFO  Time after invoking service:Fri Mar 15 17:12:47 IST 2019
2019-03-15 17:12:47,551 INFO  User solution successfully verified
2019-03-15 17:12:47,552 INFO  Processing the response from verify service
2019-03-15 17:12:47,553 INFO  Starting to parse JSON response
2019-03-15 17:12:47,554 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:47,554 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:47,555 INFO  Successfully parsed JSON response
2019-03-15 17:12:47,555 INFO  In the process of generating verify response in HTML
2019-03-15 17:12:47,647 INFO  Successfully generated verify response in HTML
2019-03-15 17:12:47,647 INFO  Successfully processed the response from service
2019-03-15 17:12:56,504 INFO  Setting request parameters for VerifySolution
2019-03-15 17:12:56,505 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:12:56,505 INFO  Starting to parse the user solution
2019-03-15 17:12:56,508 INFO  Displaying user solution
2019-03-15 17:12:56,556 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n            list2 = list2\r\n            list3=list3\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:12:56,557 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:12:56,558 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:12:56,558 INFO  Invoking the service to verify the user solution
2019-03-15 17:12:56,559 INFO  Time before invoking service:Fri Mar 15 17:12:56 IST 2019
2019-03-15 17:12:56,559 INFO  Initialising service address for VerifySolution
2019-03-15 17:12:56,559 INFO  Time before invoking service In SUPER:Fri Mar 15 17:12:56 IST 2019
2019-03-15 17:12:57,579 INFO  Time after invoking service In SUPER:Fri Mar 15 17:12:57 IST 2019
2019-03-15 17:12:57,580 INFO  Service responded successfully with required details
2019-03-15 17:12:57,580 INFO  Time after invoking service:Fri Mar 15 17:12:57 IST 2019
2019-03-15 17:12:57,580 INFO  User solution successfully verified
2019-03-15 17:12:57,580 INFO  Processing the response from verify service
2019-03-15 17:12:57,582 INFO  Starting to parse JSON response
2019-03-15 17:12:57,583 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:57,583 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:12:57,584 INFO  Successfully parsed JSON response
2019-03-15 17:12:57,584 INFO  In the process of generating verify response in HTML
2019-03-15 17:12:57,663 INFO  Successfully generated verify response in HTML
2019-03-15 17:12:57,663 INFO  Successfully processed the response from service
2019-03-15 17:13:24,647 INFO  Setting request parameters for VerifySolution
2019-03-15 17:13:24,647 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:13:24,647 INFO  Starting to parse the user solution
2019-03-15 17:13:24,648 INFO  Displaying user solution
2019-03-15 17:13:24,686 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:13:24,687 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:13:24,687 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:13:24,687 INFO  Invoking the service to verify the user solution
2019-03-15 17:13:24,687 INFO  Time before invoking service:Fri Mar 15 17:13:24 IST 2019
2019-03-15 17:13:24,688 INFO  Initialising service address for VerifySolution
2019-03-15 17:13:24,688 INFO  Time before invoking service In SUPER:Fri Mar 15 17:13:24 IST 2019
2019-03-15 17:13:25,751 INFO  Time after invoking service In SUPER:Fri Mar 15 17:13:25 IST 2019
2019-03-15 17:13:25,751 INFO  Service responded successfully with required details
2019-03-15 17:13:25,751 INFO  Time after invoking service:Fri Mar 15 17:13:25 IST 2019
2019-03-15 17:13:25,751 INFO  User solution successfully verified
2019-03-15 17:13:25,752 INFO  Processing the response from verify service
2019-03-15 17:13:25,753 INFO  Starting to parse JSON response
2019-03-15 17:13:25,754 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:13:25,754 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:13:25,755 INFO  Successfully parsed JSON response
2019-03-15 17:13:25,755 INFO  In the process of generating verify response in HTML
2019-03-15 17:13:25,839 INFO  Successfully generated verify response in HTML
2019-03-15 17:13:25,839 INFO  Successfully processed the response from service
2019-03-15 17:14:09,390 INFO  Setting request parameters for VerifySolution
2019-03-15 17:14:09,390 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:14:09,390 INFO  Starting to parse the user solution
2019-03-15 17:14:09,391 INFO  Displaying user solution
2019-03-15 17:14:09,450 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        manufacturer.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:14:09,451 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:14:09,451 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:14:09,451 INFO  Invoking the service to verify the user solution
2019-03-15 17:14:09,451 INFO  Time before invoking service:Fri Mar 15 17:14:09 IST 2019
2019-03-15 17:14:09,452 INFO  Initialising service address for VerifySolution
2019-03-15 17:14:09,453 INFO  Time before invoking service In SUPER:Fri Mar 15 17:14:09 IST 2019
2019-03-15 17:14:10,595 INFO  Time after invoking service In SUPER:Fri Mar 15 17:14:10 IST 2019
2019-03-15 17:14:10,596 INFO  Service responded successfully with required details
2019-03-15 17:14:10,596 INFO  Time after invoking service:Fri Mar 15 17:14:10 IST 2019
2019-03-15 17:14:10,596 INFO  User solution successfully verified
2019-03-15 17:14:10,597 INFO  Processing the response from verify service
2019-03-15 17:14:10,599 INFO  Starting to parse JSON response
2019-03-15 17:14:10,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:14:10,600 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:14:10,602 INFO  Successfully parsed JSON response
2019-03-15 17:14:10,602 INFO  In the process of generating verify response in HTML
2019-03-15 17:14:10,692 INFO  Successfully generated verify response in HTML
2019-03-15 17:14:10,693 INFO  Successfully processed the response from service
2019-03-15 17:17:34,484 INFO  Setting request parameters for VerifySolution
2019-03-15 17:17:34,484 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:17:34,484 INFO  Starting to parse the user solution
2019-03-15 17:17:34,485 INFO  Displaying user solution
2019-03-15 17:17:34,525 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:17:34,525 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:17:34,526 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:17:34,526 INFO  Invoking the service to verify the user solution
2019-03-15 17:17:34,526 INFO  Time before invoking service:Fri Mar 15 17:17:34 IST 2019
2019-03-15 17:17:34,526 INFO  Initialising service address for VerifySolution
2019-03-15 17:17:34,527 INFO  Time before invoking service In SUPER:Fri Mar 15 17:17:34 IST 2019
2019-03-15 17:17:35,465 INFO  Time after invoking service In SUPER:Fri Mar 15 17:17:35 IST 2019
2019-03-15 17:17:35,466 INFO  Service responded successfully with required details
2019-03-15 17:17:35,466 INFO  Time after invoking service:Fri Mar 15 17:17:35 IST 2019
2019-03-15 17:17:35,466 INFO  User solution successfully verified
2019-03-15 17:17:35,467 INFO  Processing the response from verify service
2019-03-15 17:17:35,471 INFO  Starting to parse JSON response
2019-03-15 17:17:35,474 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:17:35,474 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:17:35,477 INFO  Successfully parsed JSON response
2019-03-15 17:17:35,478 INFO  In the process of generating verify response in HTML
2019-03-15 17:17:35,570 INFO  Successfully generated verify response in HTML
2019-03-15 17:17:35,571 INFO  Successfully processed the response from service
2019-03-15 17:19:05,734 INFO  Setting request parameters for VerifySolution
2019-03-15 17:19:05,734 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:19:05,734 INFO  Starting to parse the user solution
2019-03-15 17:19:05,734 INFO  Displaying user solution
2019-03-15 17:19:05,776 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:19:05,776 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:19:05,776 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:19:05,776 INFO  Invoking the service to verify the user solution
2019-03-15 17:19:05,777 INFO  Time before invoking service:Fri Mar 15 17:19:05 IST 2019
2019-03-15 17:19:05,777 INFO  Initialising service address for VerifySolution
2019-03-15 17:19:05,777 INFO  Time before invoking service In SUPER:Fri Mar 15 17:19:05 IST 2019
2019-03-15 17:19:06,761 INFO  Time after invoking service In SUPER:Fri Mar 15 17:19:06 IST 2019
2019-03-15 17:19:06,763 INFO  Service responded successfully with required details
2019-03-15 17:19:06,764 INFO  Time after invoking service:Fri Mar 15 17:19:06 IST 2019
2019-03-15 17:19:06,764 INFO  User solution successfully verified
2019-03-15 17:19:06,764 INFO  Processing the response from verify service
2019-03-15 17:19:06,766 INFO  Starting to parse JSON response
2019-03-15 17:19:06,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:06,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:06,768 INFO  Successfully parsed JSON response
2019-03-15 17:19:06,769 INFO  In the process of generating verify response in HTML
2019-03-15 17:19:06,838 INFO  Successfully generated verify response in HTML
2019-03-15 17:19:06,838 INFO  Successfully processed the response from service
2019-03-15 17:19:10,963 INFO  Setting request parameters for VerifySolution
2019-03-15 17:19:10,963 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:19:10,963 INFO  Starting to parse the user solution
2019-03-15 17:19:10,963 INFO  Displaying user solution
2019-03-15 17:19:10,997 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::1]\r\n        list3 = list3[::1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:19:10,997 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:19:10,998 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:19:10,998 INFO  Invoking the service to verify the user solution
2019-03-15 17:19:10,998 INFO  Time before invoking service:Fri Mar 15 17:19:10 IST 2019
2019-03-15 17:19:10,998 INFO  Initialising service address for VerifySolution
2019-03-15 17:19:10,999 INFO  Time before invoking service In SUPER:Fri Mar 15 17:19:10 IST 2019
2019-03-15 17:19:11,875 INFO  Time after invoking service In SUPER:Fri Mar 15 17:19:11 IST 2019
2019-03-15 17:19:11,876 INFO  Service responded successfully with required details
2019-03-15 17:19:11,876 INFO  Time after invoking service:Fri Mar 15 17:19:11 IST 2019
2019-03-15 17:19:11,876 INFO  User solution successfully verified
2019-03-15 17:19:11,876 INFO  Processing the response from verify service
2019-03-15 17:19:11,878 INFO  Starting to parse JSON response
2019-03-15 17:19:11,879 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:11,879 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:11,880 INFO  Successfully parsed JSON response
2019-03-15 17:19:11,880 INFO  In the process of generating verify response in HTML
2019-03-15 17:19:11,962 INFO  Successfully generated verify response in HTML
2019-03-15 17:19:11,962 INFO  Successfully processed the response from service
2019-03-15 17:19:24,845 INFO  Setting request parameters for VerifySolution
2019-03-15 17:19:24,846 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:19:24,846 INFO  Starting to parse the user solution
2019-03-15 17:19:24,846 INFO  Displaying user solution
2019-03-15 17:19:24,884 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:19:24,884 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:19:24,884 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:19:24,884 INFO  Invoking the service to verify the user solution
2019-03-15 17:19:24,884 INFO  Time before invoking service:Fri Mar 15 17:19:24 IST 2019
2019-03-15 17:19:24,885 INFO  Initialising service address for VerifySolution
2019-03-15 17:19:24,885 INFO  Time before invoking service In SUPER:Fri Mar 15 17:19:24 IST 2019
2019-03-15 17:19:25,842 INFO  Time after invoking service In SUPER:Fri Mar 15 17:19:25 IST 2019
2019-03-15 17:19:25,842 INFO  Service responded successfully with required details
2019-03-15 17:19:25,843 INFO  Time after invoking service:Fri Mar 15 17:19:25 IST 2019
2019-03-15 17:19:25,843 INFO  User solution successfully verified
2019-03-15 17:19:25,843 INFO  Processing the response from verify service
2019-03-15 17:19:25,845 INFO  Starting to parse JSON response
2019-03-15 17:19:25,846 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:25,846 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:19:25,848 INFO  Successfully parsed JSON response
2019-03-15 17:19:25,849 INFO  In the process of generating verify response in HTML
2019-03-15 17:19:25,928 INFO  Successfully generated verify response in HTML
2019-03-15 17:19:25,928 INFO  Successfully processed the response from service
2019-03-15 17:21:23,918 INFO  Setting request parameters for VerifySolution
2019-03-15 17:21:23,918 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:21:23,918 INFO  Starting to parse the user solution
2019-03-15 17:21:23,919 INFO  Displaying user solution
2019-03-15 17:21:23,966 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        \r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:21:23,967 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:21:23,967 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:21:23,967 INFO  Invoking the service to verify the user solution
2019-03-15 17:21:23,967 INFO  Time before invoking service:Fri Mar 15 17:21:23 IST 2019
2019-03-15 17:21:23,967 INFO  Initialising service address for VerifySolution
2019-03-15 17:21:23,968 INFO  Time before invoking service In SUPER:Fri Mar 15 17:21:23 IST 2019
2019-03-15 17:21:24,952 INFO  Time after invoking service In SUPER:Fri Mar 15 17:21:24 IST 2019
2019-03-15 17:21:24,953 INFO  Service responded successfully with required details
2019-03-15 17:21:24,953 INFO  Time after invoking service:Fri Mar 15 17:21:24 IST 2019
2019-03-15 17:21:24,953 INFO  User solution successfully verified
2019-03-15 17:21:24,953 INFO  Processing the response from verify service
2019-03-15 17:21:24,955 INFO  Starting to parse JSON response
2019-03-15 17:21:24,955 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:21:24,955 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:21:24,957 INFO  Successfully parsed JSON response
2019-03-15 17:21:24,957 INFO  In the process of generating verify response in HTML
2019-03-15 17:21:25,035 INFO  Successfully generated verify response in HTML
2019-03-15 17:21:25,036 INFO  Successfully processed the response from service
2019-03-15 17:26:12,364 INFO  Setting request parameters for VerifySolution
2019-03-15 17:26:12,367 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:26:12,367 INFO  Starting to parse the user solution
2019-03-15 17:26:12,368 INFO  Displaying user solution
2019-03-15 17:26:12,414 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer().lower()==\"penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer().lower()==\"wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:26:12,415 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:26:12,415 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:26:12,415 INFO  Invoking the service to verify the user solution
2019-03-15 17:26:12,415 INFO  Time before invoking service:Fri Mar 15 17:26:12 IST 2019
2019-03-15 17:26:12,415 INFO  Initialising service address for VerifySolution
2019-03-15 17:26:12,416 INFO  Time before invoking service In SUPER:Fri Mar 15 17:26:12 IST 2019
2019-03-15 17:26:13,461 INFO  Time after invoking service In SUPER:Fri Mar 15 17:26:13 IST 2019
2019-03-15 17:26:13,461 INFO  Service responded successfully with required details
2019-03-15 17:26:13,461 INFO  Time after invoking service:Fri Mar 15 17:26:13 IST 2019
2019-03-15 17:26:13,461 INFO  User solution successfully verified
2019-03-15 17:26:13,462 INFO  Processing the response from verify service
2019-03-15 17:26:13,463 INFO  Starting to parse JSON response
2019-03-15 17:26:13,464 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:26:13,464 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:26:13,465 INFO  Successfully parsed JSON response
2019-03-15 17:26:13,466 INFO  In the process of generating verify response in HTML
2019-03-15 17:26:13,544 INFO  Successfully generated verify response in HTML
2019-03-15 17:26:13,545 INFO  Successfully processed the response from service
2019-03-15 17:27:37,992 INFO  Setting request parameters for VerifySolution
2019-03-15 17:27:37,992 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:27:37,992 INFO  Starting to parse the user solution
2019-03-15 17:27:37,993 INFO  Displaying user solution
2019-03-15 17:27:38,044 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n        list2 =list2[::-1]\r\n        list3 = list3[::-1]\r\n        for i in range(0,self.manufacturer1_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,self.manufacturer2_stack.get_max_size()):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:27:38,045 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:27:38,046 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:27:38,046 INFO  Invoking the service to verify the user solution
2019-03-15 17:27:38,046 INFO  Time before invoking service:Fri Mar 15 17:27:38 IST 2019
2019-03-15 17:27:38,046 INFO  Initialising service address for VerifySolution
2019-03-15 17:27:38,047 INFO  Time before invoking service In SUPER:Fri Mar 15 17:27:38 IST 2019
2019-03-15 17:27:39,003 INFO  Time after invoking service In SUPER:Fri Mar 15 17:27:39 IST 2019
2019-03-15 17:27:39,003 INFO  Service responded successfully with required details
2019-03-15 17:27:39,004 INFO  Time after invoking service:Fri Mar 15 17:27:39 IST 2019
2019-03-15 17:27:39,004 INFO  User solution successfully verified
2019-03-15 17:27:39,004 INFO  Processing the response from verify service
2019-03-15 17:27:39,012 INFO  Starting to parse JSON response
2019-03-15 17:27:39,015 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:27:39,015 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:27:39,017 INFO  Successfully parsed JSON response
2019-03-15 17:27:39,017 INFO  In the process of generating verify response in HTML
2019-03-15 17:27:39,116 INFO  Successfully generated verify response in HTML
2019-03-15 17:27:39,116 INFO  Successfully processed the response from service
2019-03-15 17:40:14,305 INFO  Setting request parameters for VerifySolution
2019-03-15 17:40:14,306 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:40:14,306 INFO  Starting to parse the user solution
2019-03-15 17:40:14,306 INFO  Displaying user solution
2019-03-15 17:40:14,368 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n      \r\n        \r\n        for i in range(0, len(list2)):\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,len(list3)):\r\n            self.manufacturer1_stack.push(list3[i])  \r\n            \r\n        self.manufacturer1_stack.display()\r\n        self.manufacturer2_stack.display()\r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:40:14,369 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:40:14,369 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:40:14,369 INFO  Invoking the service to verify the user solution
2019-03-15 17:40:14,370 INFO  Time before invoking service:Fri Mar 15 17:40:14 IST 2019
2019-03-15 17:40:14,370 INFO  Initialising service address for VerifySolution
2019-03-15 17:40:14,370 INFO  Time before invoking service In SUPER:Fri Mar 15 17:40:14 IST 2019
2019-03-15 17:40:15,305 INFO  Time after invoking service In SUPER:Fri Mar 15 17:40:15 IST 2019
2019-03-15 17:40:15,305 INFO  Service responded successfully with required details
2019-03-15 17:40:15,305 INFO  Time after invoking service:Fri Mar 15 17:40:15 IST 2019
2019-03-15 17:40:15,306 INFO  User solution successfully verified
2019-03-15 17:40:15,306 INFO  Processing the response from verify service
2019-03-15 17:40:15,312 INFO  Starting to parse JSON response
2019-03-15 17:40:15,313 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:40:15,313 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:40:15,315 INFO  Successfully parsed JSON response
2019-03-15 17:40:15,315 INFO  In the process of generating verify response in HTML
2019-03-15 17:40:15,394 INFO  Successfully generated verify response in HTML
2019-03-15 17:40:15,394 INFO  Successfully processed the response from service
2019-03-15 17:42:47,756 INFO  Setting request parameters for VerifySolution
2019-03-15 17:42:47,756 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:42:47,756 INFO  Starting to parse the user solution
2019-03-15 17:42:47,757 INFO  Displaying user solution
2019-03-15 17:42:47,816 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                list2.append(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                list3.append(i)\r\n                \r\n      \r\n      \r\n        \r\n        \r\n        for i in range(0, len(list2)):\r\n            print(list2[i].get_color())\r\n            self.manufacturer1_stack.push(list2[i]) \r\n        for i in range(0,len(list3)):\r\n            print(list3[i].get_color())\r\n            self.manufacturer1_stack.push(list3[i])  \r\n            \r\n        self.manufacturer1_stack.display()\r\n        self.manufacturer2_stack.display()\r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:42:47,817 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:42:47,817 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:42:47,817 INFO  Invoking the service to verify the user solution
2019-03-15 17:42:47,818 INFO  Time before invoking service:Fri Mar 15 17:42:47 IST 2019
2019-03-15 17:42:47,818 INFO  Initialising service address for VerifySolution
2019-03-15 17:42:47,819 INFO  Time before invoking service In SUPER:Fri Mar 15 17:42:47 IST 2019
2019-03-15 17:42:48,757 INFO  Time after invoking service In SUPER:Fri Mar 15 17:42:48 IST 2019
2019-03-15 17:42:48,757 INFO  Service responded successfully with required details
2019-03-15 17:42:48,758 INFO  Time after invoking service:Fri Mar 15 17:42:48 IST 2019
2019-03-15 17:42:48,758 INFO  User solution successfully verified
2019-03-15 17:42:48,758 INFO  Processing the response from verify service
2019-03-15 17:42:48,763 INFO  Starting to parse JSON response
2019-03-15 17:42:48,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:42:48,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:42:48,766 INFO  Successfully parsed JSON response
2019-03-15 17:42:48,767 INFO  In the process of generating verify response in HTML
2019-03-15 17:42:48,844 INFO  Successfully generated verify response in HTML
2019-03-15 17:42:48,844 INFO  Successfully processed the response from service
2019-03-15 17:44:19,409 INFO  Setting request parameters for VerifySolution
2019-03-15 17:44:19,409 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:44:19,409 INFO  Starting to parse the user solution
2019-03-15 17:44:19,410 INFO  Displaying user solution
2019-03-15 17:44:19,451 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1 =[]\r\n        list2 = []\r\n        list3 = []\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(i)\r\n                \r\n      \r\n      \r\n        \r\n        \r\n        \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:44:19,452 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:44:19,452 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:44:19,452 INFO  Invoking the service to verify the user solution
2019-03-15 17:44:19,452 INFO  Time before invoking service:Fri Mar 15 17:44:19 IST 2019
2019-03-15 17:44:19,452 INFO  Initialising service address for VerifySolution
2019-03-15 17:44:19,453 INFO  Time before invoking service In SUPER:Fri Mar 15 17:44:19 IST 2019
2019-03-15 17:44:20,414 INFO  Time after invoking service In SUPER:Fri Mar 15 17:44:20 IST 2019
2019-03-15 17:44:20,414 INFO  Service responded successfully with required details
2019-03-15 17:44:20,414 INFO  Time after invoking service:Fri Mar 15 17:44:20 IST 2019
2019-03-15 17:44:20,415 INFO  User solution successfully verified
2019-03-15 17:44:20,415 INFO  Processing the response from verify service
2019-03-15 17:44:20,418 INFO  Starting to parse JSON response
2019-03-15 17:44:20,420 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:44:20,420 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:44:20,422 INFO  Successfully parsed JSON response
2019-03-15 17:44:20,422 INFO  In the process of generating verify response in HTML
2019-03-15 17:44:20,498 INFO  Successfully generated verify response in HTML
2019-03-15 17:44:20,498 INFO  Successfully processed the response from service
2019-03-15 17:50:24,553 INFO  Setting request parameters for VerifySolution
2019-03-15 17:50:24,554 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:50:24,554 INFO  Starting to parse the user solution
2019-03-15 17:50:24,554 INFO  Displaying user solution
2019-03-15 17:50:24,603 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1=[]\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(i)\r\n                \r\n      \r\n      \r\n        \r\n        \r\n        \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:50:24,604 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:50:24,604 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:50:24,604 INFO  Invoking the service to verify the user solution
2019-03-15 17:50:24,605 INFO  Time before invoking service:Fri Mar 15 17:50:24 IST 2019
2019-03-15 17:50:24,605 INFO  Initialising service address for VerifySolution
2019-03-15 17:50:24,605 INFO  Time before invoking service In SUPER:Fri Mar 15 17:50:24 IST 2019
2019-03-15 17:50:25,630 INFO  Time after invoking service In SUPER:Fri Mar 15 17:50:25 IST 2019
2019-03-15 17:50:25,630 INFO  Service responded successfully with required details
2019-03-15 17:50:25,630 INFO  Time after invoking service:Fri Mar 15 17:50:25 IST 2019
2019-03-15 17:50:25,630 INFO  User solution successfully verified
2019-03-15 17:50:25,632 INFO  Processing the response from verify service
2019-03-15 17:50:25,637 INFO  Starting to parse JSON response
2019-03-15 17:50:25,639 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:50:25,640 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:50:25,641 INFO  Successfully parsed JSON response
2019-03-15 17:50:25,641 INFO  In the process of generating verify response in HTML
2019-03-15 17:50:25,734 INFO  Successfully generated verify response in HTML
2019-03-15 17:50:25,734 INFO  Successfully processed the response from service
2019-03-15 17:50:47,925 INFO  Setting request parameters for VerifySolution
2019-03-15 17:50:47,925 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:50:47,926 INFO  Starting to parse the user solution
2019-03-15 17:50:47,926 INFO  Displaying user solution
2019-03-15 17:50:47,969 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) # consider \"Penn\" to be manufacturer1\r\n        self.manufacturer2_stack=Stack(2) # consider \"Wilson\" to be manufacturer2\r\n\r\n        # Write your logic here\r\n    def group_balls(self):\r\n        list1=[]\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(i)\r\n                \r\n\r\n      \r\n        \r\n        \r\n        \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:50:47,970 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:50:47,970 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:50:47,970 INFO  Invoking the service to verify the user solution
2019-03-15 17:50:47,970 INFO  Time before invoking service:Fri Mar 15 17:50:47 IST 2019
2019-03-15 17:50:47,970 INFO  Initialising service address for VerifySolution
2019-03-15 17:50:47,971 INFO  Time before invoking service In SUPER:Fri Mar 15 17:50:47 IST 2019
2019-03-15 17:50:48,950 INFO  Time after invoking service In SUPER:Fri Mar 15 17:50:48 IST 2019
2019-03-15 17:50:48,950 INFO  Service responded successfully with required details
2019-03-15 17:50:48,950 INFO  Time after invoking service:Fri Mar 15 17:50:48 IST 2019
2019-03-15 17:50:48,950 INFO  User solution successfully verified
2019-03-15 17:50:48,950 INFO  Processing the response from verify service
2019-03-15 17:50:48,952 INFO  Starting to parse JSON response
2019-03-15 17:50:48,953 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:50:48,953 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:50:48,955 INFO  Successfully parsed JSON response
2019-03-15 17:50:48,955 INFO  In the process of generating verify response in HTML
2019-03-15 17:50:49,026 INFO  Successfully generated verify response in HTML
2019-03-15 17:50:49,026 INFO  Successfully processed the response from service
2019-03-15 17:51:45,253 INFO  Setting request parameters for VerifySolution
2019-03-15 17:51:45,253 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 17:51:45,253 INFO  Starting to parse the user solution
2019-03-15 17:51:45,254 INFO  Displaying user solution
2019-03-15 17:51:45,291 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) \r\n        self.manufacturer2_stack=Stack(2) \r\n\r\n    def group_balls(self):\r\n        list1=[]\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            list1.append(self.ball_stack.pop())\r\n        for i in list1:\r\n            if(i.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(i)\r\n                \r\n            elif(i.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(i)\r\n                       \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 17:51:45,291 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 17:51:45,292 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 17:51:45,292 INFO  Invoking the service to verify the user solution
2019-03-15 17:51:45,293 INFO  Time before invoking service:Fri Mar 15 17:51:45 IST 2019
2019-03-15 17:51:45,293 INFO  Initialising service address for VerifySolution
2019-03-15 17:51:45,293 INFO  Time before invoking service In SUPER:Fri Mar 15 17:51:45 IST 2019
2019-03-15 17:51:46,232 INFO  Time after invoking service In SUPER:Fri Mar 15 17:51:46 IST 2019
2019-03-15 17:51:46,232 INFO  Service responded successfully with required details
2019-03-15 17:51:46,232 INFO  Time after invoking service:Fri Mar 15 17:51:46 IST 2019
2019-03-15 17:51:46,232 INFO  User solution successfully verified
2019-03-15 17:51:46,233 INFO  Processing the response from verify service
2019-03-15 17:51:46,236 INFO  Starting to parse JSON response
2019-03-15 17:51:46,237 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:51:46,237 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 17:51:46,240 INFO  Successfully parsed JSON response
2019-03-15 17:51:46,240 INFO  In the process of generating verify response in HTML
2019-03-15 17:51:46,322 INFO  Successfully generated verify response in HTML
2019-03-15 17:51:46,322 INFO  Successfully processed the response from service
2019-03-15 17:51:49,839 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 17:51:49,840 INFO  Displaying user solution
2019-03-15 17:51:49,849 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 17:51:49,849 INFO  Invoking the service to submit the user solution
2019-03-15 17:51:49,849 INFO  Initialising service address for Submit
2019-03-15 17:51:49,850 INFO  Time before invoking service In SUPER:Fri Mar 15 17:51:49 IST 2019
2019-03-15 17:51:50,192 INFO  Time after invoking service In SUPER:Fri Mar 15 17:51:50 IST 2019
2019-03-15 17:51:50,193 INFO  Service responded successfully with required details
2019-03-15 17:51:50,193 INFO  User solution successfully submitted
2019-03-15 17:51:50,193 INFO  Displaying submission status
2019-03-15 17:51:50,193 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 18:03:11,085 INFO  Setting request parameters for VerifySolution
2019-03-15 18:03:11,085 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 18:03:11,085 INFO  Starting to parse the user solution
2019-03-15 18:03:11,085 INFO  Displaying user solution
2019-03-15 18:03:11,147 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) \r\n        self.manufacturer2_stack=Stack(2) \r\n\r\n    def group_balls(self):\r\n#         for i in range(0,self.ball_stack.get_max_size()):\r\n#             list1.append(self.ball_stack.pop())\r\n#         for i in list1:\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            a=self.ball_stack.pop()\r\n            if(a.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(a)\r\n                    \r\n            elif(a.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(a)\r\n                       \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 18:03:11,148 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 18:03:11,149 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 18:03:11,149 INFO  Invoking the service to verify the user solution
2019-03-15 18:03:11,149 INFO  Time before invoking service:Fri Mar 15 18:03:11 IST 2019
2019-03-15 18:03:11,149 INFO  Initialising service address for VerifySolution
2019-03-15 18:03:11,149 INFO  Time before invoking service In SUPER:Fri Mar 15 18:03:11 IST 2019
2019-03-15 18:03:12,127 INFO  Time after invoking service In SUPER:Fri Mar 15 18:03:12 IST 2019
2019-03-15 18:03:12,127 INFO  Service responded successfully with required details
2019-03-15 18:03:12,128 INFO  Time after invoking service:Fri Mar 15 18:03:12 IST 2019
2019-03-15 18:03:12,128 INFO  User solution successfully verified
2019-03-15 18:03:12,128 INFO  Processing the response from verify service
2019-03-15 18:03:12,133 INFO  Starting to parse JSON response
2019-03-15 18:03:12,135 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 18:03:12,135 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 18:03:12,135 INFO  Successfully parsed JSON response
2019-03-15 18:03:12,135 INFO  In the process of generating verify response in HTML
2019-03-15 18:03:12,224 INFO  Successfully generated verify response in HTML
2019-03-15 18:03:12,224 INFO  Successfully processed the response from service
2019-03-15 18:03:49,730 INFO  Setting request parameters for VerifySolution
2019-03-15 18:03:49,730 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 18:03:49,730 INFO  Starting to parse the user solution
2019-03-15 18:03:49,732 INFO  Displaying user solution
2019-03-15 18:03:49,772 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-7\r\n\r\nclass Stack:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__top=-1\r\n    \r\n    def is_full(self):\r\n        if(self.__top==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__top==-1):\r\n            return True\r\n        return False\r\n    \r\n    def push(self,data):\r\n        if(self.is_full()):\r\n            print(\"The stack is full!!\")\r\n        else:\r\n            self.__top+=1\r\n            self.__elements[self.__top]=data\r\n    \r\n    def pop(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty!!\")\r\n        else:\r\n            data= self.__elements[self.__top]\r\n            self.__top-=1\r\n            return data\r\n    def display(self):\r\n        if(self.is_empty()):\r\n            print(\"The stack is empty\")\r\n        else:\r\n            index=self.__top\r\n            while(index>=0):\r\n                print(self.__elements[index])\r\n                index-=1\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n                                                   \r\n    \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__top\r\n        while(index>=0):\r\n            msg.append((str)(self.__elements[index]))\r\n            index-=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Stack data(Top to Bottom): \"+msg\r\n        return msg\r\n\r\nclass Ball:\r\n    def __init__(self,manufacturer,color):\r\n        self.__color=color\r\n        self.__manufacturer=manufacturer\r\n    \r\n    def __str__(self):\r\n        return(self.__color+\" \"+self.__manufacturer)\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_manufacturer(self):\r\n        return self.__manufacturer\r\n    \r\nclass Box:\r\n    def __init__(self,ball_stack):\r\n        self.ball_stack=ball_stack\r\n        self.manufacturer1_stack=Stack(2) \r\n        self.manufacturer2_stack=Stack(2) \r\n\r\n    def group_balls(self):\r\n#         for i in range(0,self.ball_stack.get_max_size()):\r\n#             list1.append(self.ball_stack.pop())\r\n#         for i in list1:\r\n        for i in range(0,self.ball_stack.get_max_size()):\r\n            a=self.ball_stack.pop()\r\n            if(a.get_manufacturer()==\"Penn\"):\r\n                self.manufacturer1_stack.push(a)\r\n                    \r\n            elif(a.get_manufacturer()==\"Wilson\"):\r\n                self.manufacturer2_stack.push(a)\r\n                       \r\n    def display_ball_details(self,manufacturer):\r\n        if(manufacturer==\"Penn\"):\r\n            return self.manufacturer1_stack.__str__()\r\n        elif(manufacturer==\"Wilson\"):\r\n            return self.manufacturer2_stack.__str__()\r\n    \r\nball1=Ball(\"Penn\",\"Yellow\")\r\nball2=Ball(\"Wilson\",\"White\")\r\nball3=Ball(\"Penn\",\"Red\")\r\nball4=Ball(\"Wilson\",\"Yellow\")\r\n\r\nball_stack=Stack(4)\r\nball_stack.push(ball1)\r\nball_stack.push(ball2)\r\nball_stack.push(ball3)\r\nball_stack.push(ball4)\r\n\r\nbox=Box(ball_stack)\r\nbox.group_balls()\r\nbox.display_ball_details(\"Penn\")\r\n","asgnmtId":"7","SolutionFileName":"Excer7.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 18:03:49,773 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 18:03:49,773 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 18:03:49,773 INFO  Invoking the service to verify the user solution
2019-03-15 18:03:49,773 INFO  Time before invoking service:Fri Mar 15 18:03:49 IST 2019
2019-03-15 18:03:49,773 INFO  Initialising service address for VerifySolution
2019-03-15 18:03:49,774 INFO  Time before invoking service In SUPER:Fri Mar 15 18:03:49 IST 2019
2019-03-15 18:03:50,643 INFO  Time after invoking service In SUPER:Fri Mar 15 18:03:50 IST 2019
2019-03-15 18:03:50,644 INFO  Service responded successfully with required details
2019-03-15 18:03:50,644 INFO  Time after invoking service:Fri Mar 15 18:03:50 IST 2019
2019-03-15 18:03:50,644 INFO  User solution successfully verified
2019-03-15 18:03:50,645 INFO  Processing the response from verify service
2019-03-15 18:03:50,648 INFO  Starting to parse JSON response
2019-03-15 18:03:50,649 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 18:03:50,649 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 18:03:50,651 INFO  Successfully parsed JSON response
2019-03-15 18:03:50,651 INFO  In the process of generating verify response in HTML
2019-03-15 18:03:50,727 INFO  Successfully generated verify response in HTML
2019-03-15 18:03:50,727 INFO  Successfully processed the response from service
2019-03-15 19:01:26,692 INFO  Setting request parameters for VerifySolution
2019-03-15 19:01:26,692 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:01:26,692 INFO  Starting to parse the user solution
2019-03-15 19:01:26,693 INFO  Displaying user solution
2019-03-15 19:01:26,776 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    even_queue_list=[]\r\n    odd_queue_list = []\r\n    queue_list = []\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue_list.append(a)\r\n        else:\r\n            odd_queue_list.append(a)\r\n    queue_list.append(even_queue_list)\r\n    queue_list.append(odd_queue_list)\r\n    return queue_list\r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:01:26,776 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:01:26,777 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:01:26,777 INFO  Invoking the service to verify the user solution
2019-03-15 19:01:26,777 INFO  Time before invoking service:Fri Mar 15 19:01:26 IST 2019
2019-03-15 19:01:26,777 INFO  Initialising service address for VerifySolution
2019-03-15 19:01:26,778 INFO  Time before invoking service In SUPER:Fri Mar 15 19:01:26 IST 2019
2019-03-15 19:01:27,778 INFO  Time after invoking service In SUPER:Fri Mar 15 19:01:27 IST 2019
2019-03-15 19:01:27,778 INFO  Service responded successfully with required details
2019-03-15 19:01:27,778 INFO  Time after invoking service:Fri Mar 15 19:01:27 IST 2019
2019-03-15 19:01:27,778 INFO  User solution successfully verified
2019-03-15 19:01:27,778 INFO  Processing the response from verify service
2019-03-15 19:01:27,782 INFO  Starting to parse JSON response
2019-03-15 19:01:27,783 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:01:27,783 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:01:27,785 INFO  Successfully parsed JSON response
2019-03-15 19:01:27,786 INFO  In the process of generating verify response in HTML
2019-03-15 19:01:27,864 INFO  Successfully generated verify response in HTML
2019-03-15 19:01:27,864 INFO  Successfully processed the response from service
2019-03-15 19:02:08,204 INFO  Setting request parameters for VerifySolution
2019-03-15 19:02:08,205 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:02:08,205 INFO  Starting to parse the user solution
2019-03-15 19:02:08,205 INFO  Displaying user solution
2019-03-15 19:02:08,249 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    even_queue_list=[]\r\n    odd_queue_list = []\r\n    queue_list = []\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue_list.append(a)\r\n        else:\r\n            odd_queue_list.append(a)\r\n    queue_list.append(even_queue_list)\r\n    queue_list.append(odd_queue_list)\r\n    return queue_list\r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nprint(q_list)\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:02:08,249 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:02:08,250 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:02:08,250 INFO  Invoking the service to verify the user solution
2019-03-15 19:02:08,250 INFO  Time before invoking service:Fri Mar 15 19:02:08 IST 2019
2019-03-15 19:02:08,250 INFO  Initialising service address for VerifySolution
2019-03-15 19:02:08,251 INFO  Time before invoking service In SUPER:Fri Mar 15 19:02:08 IST 2019
2019-03-15 19:02:09,157 INFO  Time after invoking service In SUPER:Fri Mar 15 19:02:09 IST 2019
2019-03-15 19:02:09,158 INFO  Service responded successfully with required details
2019-03-15 19:02:09,158 INFO  Time after invoking service:Fri Mar 15 19:02:09 IST 2019
2019-03-15 19:02:09,158 INFO  User solution successfully verified
2019-03-15 19:02:09,158 INFO  Processing the response from verify service
2019-03-15 19:02:09,161 INFO  Starting to parse JSON response
2019-03-15 19:02:09,165 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:02:09,165 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:02:09,166 INFO  Successfully parsed JSON response
2019-03-15 19:02:09,166 INFO  In the process of generating verify response in HTML
2019-03-15 19:02:09,253 INFO  Successfully generated verify response in HTML
2019-03-15 19:02:09,253 INFO  Successfully processed the response from service
2019-03-15 19:02:55,500 INFO  Setting request parameters for VerifySolution
2019-03-15 19:02:55,501 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:02:55,501 INFO  Starting to parse the user solution
2019-03-15 19:02:55,501 INFO  Displaying user solution
2019-03-15 19:02:55,551 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    even_queue_list=[]\r\n    odd_queue_list = []\r\n    queue_list = Queue(2)\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue_list.append(a)\r\n        else:\r\n            odd_queue_list.append(a)\r\n    queue_list.enqueue(even_queue_list)\r\n    queue_list.enqueue(odd_queue_list)\r\n    return queue_list\r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:02:55,554 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:02:55,554 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:02:55,554 INFO  Invoking the service to verify the user solution
2019-03-15 19:02:55,555 INFO  Time before invoking service:Fri Mar 15 19:02:55 IST 2019
2019-03-15 19:02:55,555 INFO  Initialising service address for VerifySolution
2019-03-15 19:02:55,555 INFO  Time before invoking service In SUPER:Fri Mar 15 19:02:55 IST 2019
2019-03-15 19:02:56,439 INFO  Time after invoking service In SUPER:Fri Mar 15 19:02:56 IST 2019
2019-03-15 19:02:56,439 INFO  Service responded successfully with required details
2019-03-15 19:02:56,439 INFO  Time after invoking service:Fri Mar 15 19:02:56 IST 2019
2019-03-15 19:02:56,439 INFO  User solution successfully verified
2019-03-15 19:02:56,439 INFO  Processing the response from verify service
2019-03-15 19:02:56,440 INFO  Starting to parse JSON response
2019-03-15 19:02:56,441 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:02:56,441 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:02:56,442 INFO  Successfully parsed JSON response
2019-03-15 19:02:56,442 INFO  In the process of generating verify response in HTML
2019-03-15 19:02:56,522 INFO  Successfully generated verify response in HTML
2019-03-15 19:02:56,522 INFO  Successfully processed the response from service
2019-03-15 19:04:41,662 INFO  Setting request parameters for VerifySolution
2019-03-15 19:04:41,662 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:04:41,662 INFO  Starting to parse the user solution
2019-03-15 19:04:41,663 INFO  Displaying user solution
2019-03-15 19:04:41,706 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    even_queue_list=[]\r\n    odd_queue_list = []\r\n    queue_list = Queue(2)\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue_list.append(a)\r\n        else:\r\n            odd_queue_list.append(a)\r\n    queue_list.enqueue(even_queue_list)\r\n    queue_list.enqueue(odd_queue_list)\r\n    return queue_list\r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list.__str__()\r\nq_list.__str__()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:04:41,706 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:04:41,706 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:04:41,706 INFO  Invoking the service to verify the user solution
2019-03-15 19:04:41,707 INFO  Time before invoking service:Fri Mar 15 19:04:41 IST 2019
2019-03-15 19:04:41,707 INFO  Initialising service address for VerifySolution
2019-03-15 19:04:41,707 INFO  Time before invoking service In SUPER:Fri Mar 15 19:04:41 IST 2019
2019-03-15 19:04:42,656 INFO  Time after invoking service In SUPER:Fri Mar 15 19:04:42 IST 2019
2019-03-15 19:04:42,656 INFO  Service responded successfully with required details
2019-03-15 19:04:42,656 INFO  Time after invoking service:Fri Mar 15 19:04:42 IST 2019
2019-03-15 19:04:42,657 INFO  User solution successfully verified
2019-03-15 19:04:42,657 INFO  Processing the response from verify service
2019-03-15 19:04:42,658 INFO  Starting to parse JSON response
2019-03-15 19:04:42,659 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:04:42,659 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:04:42,660 INFO  Successfully parsed JSON response
2019-03-15 19:04:42,660 INFO  In the process of generating verify response in HTML
2019-03-15 19:04:42,731 INFO  Successfully generated verify response in HTML
2019-03-15 19:04:42,732 INFO  Successfully processed the response from service
2019-03-15 19:06:15,076 INFO  Setting request parameters for VerifySolution
2019-03-15 19:06:15,078 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:06:15,078 INFO  Starting to parse the user solution
2019-03-15 19:06:15,079 INFO  Displaying user solution
2019-03-15 19:06:15,125 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    even_queue_list=[]\r\n    odd_queue_list = []\r\n    queue_list = Queue(2)\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            queue_list.enqueue(even_queue_list)\r\n        else:\r\n            queue_list.enqueue(odd_queue_list)\r\n    \r\n    \r\n    return queue_list\r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:06:15,126 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:06:15,127 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:06:15,127 INFO  Invoking the service to verify the user solution
2019-03-15 19:06:15,127 INFO  Time before invoking service:Fri Mar 15 19:06:15 IST 2019
2019-03-15 19:06:15,127 INFO  Initialising service address for VerifySolution
2019-03-15 19:06:15,127 INFO  Time before invoking service In SUPER:Fri Mar 15 19:06:15 IST 2019
2019-03-15 19:06:15,978 INFO  Time after invoking service In SUPER:Fri Mar 15 19:06:15 IST 2019
2019-03-15 19:06:15,979 INFO  Service responded successfully with required details
2019-03-15 19:06:15,979 INFO  Time after invoking service:Fri Mar 15 19:06:15 IST 2019
2019-03-15 19:06:15,979 INFO  User solution successfully verified
2019-03-15 19:06:15,979 INFO  Processing the response from verify service
2019-03-15 19:06:15,983 INFO  Starting to parse JSON response
2019-03-15 19:06:15,984 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:06:15,984 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:06:15,985 INFO  Successfully parsed JSON response
2019-03-15 19:06:15,985 INFO  In the process of generating verify response in HTML
2019-03-15 19:06:16,057 INFO  Successfully generated verify response in HTML
2019-03-15 19:06:16,057 INFO  Successfully processed the response from service
2019-03-15 19:22:52,839 INFO  Setting request parameters for VerifySolution
2019-03-15 19:22:52,839 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:22:52,839 INFO  Starting to parse the user solution
2019-03-15 19:22:52,840 INFO  Displaying user solution
2019-03-15 19:22:52,906 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    q = Queue(1)\r\n    r = Queue(1)\r\n    queue_list = [r,q]\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            q.enqueue(a)\r\n        else:\r\n            r.enqueue(a)\r\n    return queue_list \r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:22:52,907 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:22:52,907 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:22:52,907 INFO  Invoking the service to verify the user solution
2019-03-15 19:22:52,908 INFO  Time before invoking service:Fri Mar 15 19:22:52 IST 2019
2019-03-15 19:22:52,908 INFO  Initialising service address for VerifySolution
2019-03-15 19:22:52,908 INFO  Time before invoking service In SUPER:Fri Mar 15 19:22:52 IST 2019
2019-03-15 19:22:53,830 INFO  Time after invoking service In SUPER:Fri Mar 15 19:22:53 IST 2019
2019-03-15 19:22:53,830 INFO  Service responded successfully with required details
2019-03-15 19:22:53,830 INFO  Time after invoking service:Fri Mar 15 19:22:53 IST 2019
2019-03-15 19:22:53,830 INFO  User solution successfully verified
2019-03-15 19:22:53,831 INFO  Processing the response from verify service
2019-03-15 19:22:53,835 INFO  Starting to parse JSON response
2019-03-15 19:22:53,836 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:22:53,836 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:22:53,837 INFO  Successfully parsed JSON response
2019-03-15 19:22:53,838 INFO  In the process of generating verify response in HTML
2019-03-15 19:22:53,909 INFO  Successfully generated verify response in HTML
2019-03-15 19:22:53,910 INFO  Successfully processed the response from service
2019-03-15 19:33:00,319 INFO  Setting request parameters for VerifySolution
2019-03-15 19:33:00,319 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:33:00,319 INFO  Starting to parse the user solution
2019-03-15 19:33:00,320 INFO  Displaying user solution
2019-03-15 19:33:00,386 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    odd_queue = Queue(num_queue.get_max_size())\r\n    even_queue= Queue(num_queue.get_max_size())\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue.enqueue(a)\r\n        else:\r\n            odd_queue.enqueue(a)\r\n    queue_list =[odd_queue,even_queue]        \r\n    return queue_list \r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:33:00,387 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:33:00,387 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:33:00,387 INFO  Invoking the service to verify the user solution
2019-03-15 19:33:00,388 INFO  Time before invoking service:Fri Mar 15 19:33:00 IST 2019
2019-03-15 19:33:00,388 INFO  Initialising service address for VerifySolution
2019-03-15 19:33:00,390 INFO  Time before invoking service In SUPER:Fri Mar 15 19:33:00 IST 2019
2019-03-15 19:33:01,354 INFO  Time after invoking service In SUPER:Fri Mar 15 19:33:01 IST 2019
2019-03-15 19:33:01,354 INFO  Service responded successfully with required details
2019-03-15 19:33:01,355 INFO  Time after invoking service:Fri Mar 15 19:33:01 IST 2019
2019-03-15 19:33:01,355 INFO  User solution successfully verified
2019-03-15 19:33:01,355 INFO  Processing the response from verify service
2019-03-15 19:33:01,357 INFO  Starting to parse JSON response
2019-03-15 19:33:01,359 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:33:01,359 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:33:01,360 INFO  Successfully parsed JSON response
2019-03-15 19:33:01,360 INFO  In the process of generating verify response in HTML
2019-03-15 19:33:01,438 INFO  Successfully generated verify response in HTML
2019-03-15 19:33:01,438 INFO  Successfully processed the response from service
2019-03-15 19:34:16,918 INFO  Setting request parameters for VerifySolution
2019-03-15 19:34:16,918 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:34:16,918 INFO  Starting to parse the user solution
2019-03-15 19:34:16,919 INFO  Displaying user solution
2019-03-15 19:34:16,973 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    odd_queue = Queue(num_queue.get_max_size())\r\n    even_queue= Queue(num_queue.get_max_size())\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue.enqueue(a)\r\n        else:\r\n            odd_queue.enqueue(a)\r\n    queue_list =[odd_queue,even_queue]        \r\n    return queue_list \r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:34:16,973 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:34:16,973 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:34:16,973 INFO  Invoking the service to verify the user solution
2019-03-15 19:34:16,974 INFO  Time before invoking service:Fri Mar 15 19:34:16 IST 2019
2019-03-15 19:34:16,974 INFO  Initialising service address for VerifySolution
2019-03-15 19:34:16,974 INFO  Time before invoking service In SUPER:Fri Mar 15 19:34:16 IST 2019
2019-03-15 19:34:17,888 INFO  Time after invoking service In SUPER:Fri Mar 15 19:34:17 IST 2019
2019-03-15 19:34:17,888 INFO  Service responded successfully with required details
2019-03-15 19:34:17,888 INFO  Time after invoking service:Fri Mar 15 19:34:17 IST 2019
2019-03-15 19:34:17,889 INFO  User solution successfully verified
2019-03-15 19:34:17,889 INFO  Processing the response from verify service
2019-03-15 19:34:17,890 INFO  Starting to parse JSON response
2019-03-15 19:34:17,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:34:17,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:34:17,893 INFO  Successfully parsed JSON response
2019-03-15 19:34:17,893 INFO  In the process of generating verify response in HTML
2019-03-15 19:34:17,959 INFO  Successfully generated verify response in HTML
2019-03-15 19:34:17,959 INFO  Successfully processed the response from service
2019-03-15 19:34:23,962 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 19:34:23,963 INFO  Displaying user solution
2019-03-15 19:34:23,973 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 19:34:23,974 INFO  Invoking the service to submit the user solution
2019-03-15 19:34:23,974 INFO  Initialising service address for Submit
2019-03-15 19:34:23,974 INFO  Time before invoking service In SUPER:Fri Mar 15 19:34:23 IST 2019
2019-03-15 19:34:24,308 INFO  Time after invoking service In SUPER:Fri Mar 15 19:34:24 IST 2019
2019-03-15 19:34:24,308 INFO  Service responded successfully with required details
2019-03-15 19:34:24,308 INFO  User solution successfully submitted
2019-03-15 19:34:24,309 INFO  Displaying submission status
2019-03-15 19:34:24,309 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 19:36:57,212 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 19:36:57,213 INFO  Displaying user solution
2019-03-15 19:36:57,221 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 19:36:57,221 INFO  Invoking the service to submit the user solution
2019-03-15 19:36:57,221 INFO  Initialising service address for Submit
2019-03-15 19:36:57,222 INFO  Time before invoking service In SUPER:Fri Mar 15 19:36:57 IST 2019
2019-03-15 19:36:57,551 INFO  Time after invoking service In SUPER:Fri Mar 15 19:36:57 IST 2019
2019-03-15 19:36:57,551 INFO  Service responded successfully with required details
2019-03-15 19:36:57,551 INFO  User solution successfully submitted
2019-03-15 19:36:57,551 INFO  Displaying submission status
2019-03-15 19:36:57,552 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 19:37:00,770 INFO  Setting request parameters for VerifySolution
2019-03-15 19:37:00,770 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:37:00,770 INFO  Starting to parse the user solution
2019-03-15 19:37:00,773 INFO  Displaying user solution
2019-03-15 19:37:00,835 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-8\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n                                        \r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n    \r\n    def get_max_size(self):\r\n        return self.__max_size\r\n    \r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n    \r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n    \r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n    \r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n    \r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                       \r\n   \r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\n    \r\ndef split_queue(num_queue):\r\n    #Populate queue_list with odd_queue and even_queue\r\n    odd_queue = Queue(num_queue.get_max_size())\r\n    even_queue= Queue(num_queue.get_max_size())\r\n    for i in range(0,num_queue.get_max_size()):\r\n        a = num_queue.dequeue()\r\n        if(a%2==0):\r\n            even_queue.enqueue(a)\r\n        else:\r\n            odd_queue.enqueue(a)\r\n    queue_list =[odd_queue,even_queue]        \r\n    return queue_list \r\n    #write your logic here\r\n\r\n\r\n\r\n# Enqueue different values to the queue and test your program\r\n\r\nnum_queue=Queue(7)\r\nnum_queue.enqueue(2)\r\nnum_queue.enqueue(7)\r\nnum_queue.enqueue(9)\r\nnum_queue.enqueue(4)\r\nnum_queue.enqueue(6)\r\nnum_queue.enqueue(5)\r\nnum_queue.enqueue(10)\r\n\r\nq_list=split_queue(num_queue)\r\nq_list[0].display()\r\nq_list[1].display()\r\n","asgnmtId":"8","SolutionFileName":"Excer8.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:37:00,836 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:37:00,836 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:37:00,836 INFO  Invoking the service to verify the user solution
2019-03-15 19:37:00,837 INFO  Time before invoking service:Fri Mar 15 19:37:00 IST 2019
2019-03-15 19:37:00,837 INFO  Initialising service address for VerifySolution
2019-03-15 19:37:00,838 INFO  Time before invoking service In SUPER:Fri Mar 15 19:37:00 IST 2019
2019-03-15 19:37:01,688 INFO  Time after invoking service In SUPER:Fri Mar 15 19:37:01 IST 2019
2019-03-15 19:37:01,688 INFO  Service responded successfully with required details
2019-03-15 19:37:01,688 INFO  Time after invoking service:Fri Mar 15 19:37:01 IST 2019
2019-03-15 19:37:01,688 INFO  User solution successfully verified
2019-03-15 19:37:01,688 INFO  Processing the response from verify service
2019-03-15 19:37:01,689 INFO  Starting to parse JSON response
2019-03-15 19:37:01,690 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:37:01,690 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:37:01,691 INFO  Successfully parsed JSON response
2019-03-15 19:37:01,691 INFO  In the process of generating verify response in HTML
2019-03-15 19:37:01,754 INFO  Successfully generated verify response in HTML
2019-03-15 19:37:01,754 INFO  Successfully processed the response from service
2019-03-15 19:38:30,328 INFO  Setting request parameters for VerifySolution
2019-03-15 19:38:30,328 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:38:30,328 INFO  Starting to parse the user solution
2019-03-15 19:38:30,329 INFO  Displaying user solution
2019-03-15 19:38:30,390 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:38:30,391 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:38:30,391 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:38:30,391 INFO  Invoking the service to verify the user solution
2019-03-15 19:38:30,392 INFO  Time before invoking service:Fri Mar 15 19:38:30 IST 2019
2019-03-15 19:38:30,392 INFO  Initialising service address for VerifySolution
2019-03-15 19:38:30,392 INFO  Time before invoking service In SUPER:Fri Mar 15 19:38:30 IST 2019
2019-03-15 19:38:31,311 INFO  Time after invoking service In SUPER:Fri Mar 15 19:38:31 IST 2019
2019-03-15 19:38:31,312 INFO  Service responded successfully with required details
2019-03-15 19:38:31,312 INFO  Time after invoking service:Fri Mar 15 19:38:31 IST 2019
2019-03-15 19:38:31,312 INFO  User solution successfully verified
2019-03-15 19:38:31,312 INFO  Processing the response from verify service
2019-03-15 19:38:31,315 INFO  Starting to parse JSON response
2019-03-15 19:38:31,317 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:38:31,317 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:38:31,319 INFO  Successfully parsed JSON response
2019-03-15 19:38:31,319 INFO  In the process of generating verify response in HTML
2019-03-15 19:38:31,389 INFO  Successfully generated verify response in HTML
2019-03-15 19:38:31,389 INFO  Successfully processed the response from service
2019-03-15 19:51:28,948 INFO  Setting request parameters for VerifySolution
2019-03-15 19:51:28,949 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:51:28,949 INFO  Starting to parse the user solution
2019-03-15 19:51:28,949 INFO  Displaying user solution
2019-03-15 19:51:29,018 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue = Queue(people_queue.get_max_size())\r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==\"Male\"):\r\n                new_queue.enqueue(a)\r\n            elif(a.get_gender()==\"Female\"):\r\n                new_queue.enqueue(a)\r\n        return new_queue       \r\n\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:51:29,019 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:51:29,019 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:51:29,019 INFO  Invoking the service to verify the user solution
2019-03-15 19:51:29,019 INFO  Time before invoking service:Fri Mar 15 19:51:29 IST 2019
2019-03-15 19:51:29,019 INFO  Initialising service address for VerifySolution
2019-03-15 19:51:29,020 INFO  Time before invoking service In SUPER:Fri Mar 15 19:51:29 IST 2019
2019-03-15 19:51:29,906 INFO  Time after invoking service In SUPER:Fri Mar 15 19:51:29 IST 2019
2019-03-15 19:51:29,906 INFO  Service responded successfully with required details
2019-03-15 19:51:29,907 INFO  Time after invoking service:Fri Mar 15 19:51:29 IST 2019
2019-03-15 19:51:29,907 INFO  User solution successfully verified
2019-03-15 19:51:29,907 INFO  Processing the response from verify service
2019-03-15 19:51:29,910 INFO  Starting to parse JSON response
2019-03-15 19:51:29,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:51:29,912 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:51:29,913 INFO  Successfully parsed JSON response
2019-03-15 19:51:29,913 INFO  In the process of generating verify response in HTML
2019-03-15 19:51:29,991 INFO  Successfully generated verify response in HTML
2019-03-15 19:51:29,991 INFO  Successfully processed the response from service
2019-03-15 19:53:41,578 INFO  Setting request parameters for VerifySolution
2019-03-15 19:53:41,579 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:53:41,579 INFO  Starting to parse the user solution
2019-03-15 19:53:41,579 INFO  Displaying user solution
2019-03-15 19:53:41,632 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue1 = Queue(people_queue.get_max_size())\r\n        new_queue2 = Queue(people_queue.get_max_size())\r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==\"Male\"):\r\n                new_queue1.enqueue(a)\r\n            elif(a.get_gender()==\"Female\"):\r\n                new_queue2.enqueue(a)\r\n               \r\n\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:53:41,633 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:53:41,634 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:53:41,634 INFO  Invoking the service to verify the user solution
2019-03-15 19:53:41,634 INFO  Time before invoking service:Fri Mar 15 19:53:41 IST 2019
2019-03-15 19:53:41,634 INFO  Initialising service address for VerifySolution
2019-03-15 19:53:41,635 INFO  Time before invoking service In SUPER:Fri Mar 15 19:53:41 IST 2019
2019-03-15 19:53:42,620 INFO  Time after invoking service In SUPER:Fri Mar 15 19:53:42 IST 2019
2019-03-15 19:53:42,621 INFO  Service responded successfully with required details
2019-03-15 19:53:42,621 INFO  Time after invoking service:Fri Mar 15 19:53:42 IST 2019
2019-03-15 19:53:42,621 INFO  User solution successfully verified
2019-03-15 19:53:42,621 INFO  Processing the response from verify service
2019-03-15 19:53:42,623 INFO  Starting to parse JSON response
2019-03-15 19:53:42,624 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:53:42,624 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:53:42,625 INFO  Successfully parsed JSON response
2019-03-15 19:53:42,626 INFO  In the process of generating verify response in HTML
2019-03-15 19:53:42,694 INFO  Successfully generated verify response in HTML
2019-03-15 19:53:42,694 INFO  Successfully processed the response from service
2019-03-15 19:58:15,708 INFO  Setting request parameters for VerifySolution
2019-03-15 19:58:15,708 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:58:15,708 INFO  Starting to parse the user solution
2019-03-15 19:58:15,708 INFO  Displaying user solution
2019-03-15 19:58:15,777 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue = Queue(people_queue.get_max_size())\r\n        \r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==\"Male\"):\r\n                new_queue.enqueue(a)\r\n            elif(a.get_gender()==\"Female\"):\r\n                new_queue.enqueue(a)\r\n                \r\n\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:58:15,778 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:58:15,778 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:58:15,778 INFO  Invoking the service to verify the user solution
2019-03-15 19:58:15,779 INFO  Time before invoking service:Fri Mar 15 19:58:15 IST 2019
2019-03-15 19:58:15,779 INFO  Initialising service address for VerifySolution
2019-03-15 19:58:15,779 INFO  Time before invoking service In SUPER:Fri Mar 15 19:58:15 IST 2019
2019-03-15 19:58:16,688 INFO  Time after invoking service In SUPER:Fri Mar 15 19:58:16 IST 2019
2019-03-15 19:58:16,688 INFO  Service responded successfully with required details
2019-03-15 19:58:16,688 INFO  Time after invoking service:Fri Mar 15 19:58:16 IST 2019
2019-03-15 19:58:16,689 INFO  User solution successfully verified
2019-03-15 19:58:16,689 INFO  Processing the response from verify service
2019-03-15 19:58:16,692 INFO  Starting to parse JSON response
2019-03-15 19:58:16,693 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:58:16,693 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:58:16,694 INFO  Successfully parsed JSON response
2019-03-15 19:58:16,694 INFO  In the process of generating verify response in HTML
2019-03-15 19:58:16,787 INFO  Successfully generated verify response in HTML
2019-03-15 19:58:16,787 INFO  Successfully processed the response from service
2019-03-15 19:58:37,398 INFO  Setting request parameters for VerifySolution
2019-03-15 19:58:37,398 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 19:58:37,398 INFO  Starting to parse the user solution
2019-03-15 19:58:37,399 INFO  Displaying user solution
2019-03-15 19:58:37,453 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue = Queue(people_queue.get_max_size())\r\n        \r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==\"Male\"):\r\n                new_queue.enqueue(a)\r\n            elif(a.get_gender()==\"Female\"):\r\n                new_queue.enqueue(a)\r\n                \r\n        return new_queue\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 19:58:37,453 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 19:58:37,453 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 19:58:37,453 INFO  Invoking the service to verify the user solution
2019-03-15 19:58:37,454 INFO  Time before invoking service:Fri Mar 15 19:58:37 IST 2019
2019-03-15 19:58:37,454 INFO  Initialising service address for VerifySolution
2019-03-15 19:58:37,454 INFO  Time before invoking service In SUPER:Fri Mar 15 19:58:37 IST 2019
2019-03-15 19:58:38,393 INFO  Time after invoking service In SUPER:Fri Mar 15 19:58:38 IST 2019
2019-03-15 19:58:38,393 INFO  Service responded successfully with required details
2019-03-15 19:58:38,394 INFO  Time after invoking service:Fri Mar 15 19:58:38 IST 2019
2019-03-15 19:58:38,394 INFO  User solution successfully verified
2019-03-15 19:58:38,394 INFO  Processing the response from verify service
2019-03-15 19:58:38,397 INFO  Starting to parse JSON response
2019-03-15 19:58:38,398 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:58:38,398 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 19:58:38,399 INFO  Successfully parsed JSON response
2019-03-15 19:58:38,399 INFO  In the process of generating verify response in HTML
2019-03-15 19:58:38,474 INFO  Successfully generated verify response in HTML
2019-03-15 19:58:38,474 INFO  Successfully processed the response from service
2019-03-15 20:02:22,203 INFO  Setting request parameters for VerifySolution
2019-03-15 20:02:22,203 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:02:22,203 INFO  Starting to parse the user solution
2019-03-15 20:02:22,203 INFO  Displaying user solution
2019-03-15 20:02:22,269 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue1 = Queue(people_queue.get_max_size())\r\n        new_queue2 = Queue(people_queue.get_max_size())\r\n        new_queue= Queue(people_queue.get_max_size())\r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==\"Male\"):\r\n                new_queue1.enqueue(a)\r\n            elif(a.get_gender()==\"Female\"):\r\n                new_queue2.enqueue(a)\r\n                \r\n        if(gender==\"Male\"):\r\n            new_queue= new_queue1\r\n        elif(gender==\"Female\"):\r\n            new_queue= new_queue2\r\n                \r\n        return new_queue\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 20:02:22,269 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:02:22,270 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:02:22,270 INFO  Invoking the service to verify the user solution
2019-03-15 20:02:22,271 INFO  Time before invoking service:Fri Mar 15 20:02:22 IST 2019
2019-03-15 20:02:22,271 INFO  Initialising service address for VerifySolution
2019-03-15 20:02:22,271 INFO  Time before invoking service In SUPER:Fri Mar 15 20:02:22 IST 2019
2019-03-15 20:02:23,225 INFO  Time after invoking service In SUPER:Fri Mar 15 20:02:23 IST 2019
2019-03-15 20:02:23,225 INFO  Service responded successfully with required details
2019-03-15 20:02:23,225 INFO  Time after invoking service:Fri Mar 15 20:02:23 IST 2019
2019-03-15 20:02:23,226 INFO  User solution successfully verified
2019-03-15 20:02:23,226 INFO  Processing the response from verify service
2019-03-15 20:02:23,230 INFO  Starting to parse JSON response
2019-03-15 20:02:23,232 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:02:23,232 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:02:23,233 INFO  Successfully parsed JSON response
2019-03-15 20:02:23,233 INFO  In the process of generating verify response in HTML
2019-03-15 20:02:23,335 INFO  Successfully generated verify response in HTML
2019-03-15 20:02:23,335 INFO  Successfully processed the response from service
2019-03-15 20:02:34,146 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:02:34,146 INFO  Displaying user solution
2019-03-15 20:02:34,158 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:02:34,159 INFO  Invoking the service to submit the user solution
2019-03-15 20:02:34,159 INFO  Initialising service address for Submit
2019-03-15 20:02:34,159 INFO  Time before invoking service In SUPER:Fri Mar 15 20:02:34 IST 2019
2019-03-15 20:02:34,532 INFO  Time after invoking service In SUPER:Fri Mar 15 20:02:34 IST 2019
2019-03-15 20:02:34,532 INFO  Service responded successfully with required details
2019-03-15 20:02:34,532 INFO  User solution successfully submitted
2019-03-15 20:02:34,533 INFO  Displaying submission status
2019-03-15 20:02:34,533 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:02:37,738 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:02:37,739 INFO  Displaying user solution
2019-03-15 20:02:37,748 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:02:37,748 INFO  Invoking the service to submit the user solution
2019-03-15 20:02:37,748 INFO  Initialising service address for Submit
2019-03-15 20:02:37,749 INFO  Time before invoking service In SUPER:Fri Mar 15 20:02:37 IST 2019
2019-03-15 20:02:37,959 INFO  Time after invoking service In SUPER:Fri Mar 15 20:02:37 IST 2019
2019-03-15 20:02:37,959 INFO  Service responded successfully with required details
2019-03-15 20:02:37,959 INFO  User solution successfully submitted
2019-03-15 20:02:37,960 INFO  Displaying submission status
2019-03-15 20:02:37,960 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:03:23,761 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:03:23,762 INFO  Displaying user solution
2019-03-15 20:03:23,770 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:03:23,770 INFO  Invoking the service to submit the user solution
2019-03-15 20:03:23,770 INFO  Initialising service address for Submit
2019-03-15 20:03:23,771 INFO  Time before invoking service In SUPER:Fri Mar 15 20:03:23 IST 2019
2019-03-15 20:03:23,929 INFO  Time after invoking service In SUPER:Fri Mar 15 20:03:23 IST 2019
2019-03-15 20:03:23,929 INFO  Service responded successfully with required details
2019-03-15 20:03:23,929 INFO  User solution successfully submitted
2019-03-15 20:03:23,929 INFO  Displaying submission status
2019-03-15 20:03:23,929 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:15:29,128 INFO  Setting request parameters for VerifySolution
2019-03-15 20:15:29,128 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:15:29,128 INFO  Starting to parse the user solution
2019-03-15 20:15:29,129 INFO  Displaying user solution
2019-03-15 20:15:29,188 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-9\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\nclass Queue:\r\n    def __init__(self,max_size):\r\n        self.__max_size=max_size\r\n        self.__elements=[None]*self.__max_size\r\n        self.__rear=-1\r\n        self.__front=0\r\n\r\n    def get_max_size(self):\r\n        return self.__max_size\r\n\r\n    def is_full(self):\r\n        if(self.__rear==self.__max_size-1):\r\n            return True\r\n        return False\r\n\r\n    def is_empty(self):\r\n        if(self.__front>self.__rear):\r\n            return True\r\n        return False\r\n\r\n    def enqueue(self,data):\r\n        if(self.is_full()):\r\n            print(\"Queue is full!!!\")\r\n        else:\r\n            self.__rear+=1\r\n            self.__elements[self.__rear]=data\r\n\r\n    def dequeue(self):\r\n        if(self.is_empty()):\r\n            print(\"Queue is empty!!!\")\r\n        else:\r\n            data=self.__elements[self.__front]\r\n            self.__front+=1\r\n            return data\r\n\r\n    def display(self):\r\n        for index in range(self.__front, self.__rear+1):\r\n            print(self.__elements[index])\r\n                                              \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        msg=[]\r\n        index=self.__front\r\n        while(index<=self.__rear):\r\n            msg.append((str)(self.__elements[index]))\r\n            index+=1\r\n        msg=\" \".join(msg)\r\n        msg=\"Queue data(Front to Rear): \"+msg\r\n        return msg\r\n\r\nclass People:\r\n    def __init__(self,name,age,gender):\r\n        self.__name=name\r\n        self.__age=age\r\n        self.__gender=gender\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_age(self):\r\n        return self.__age\r\n\r\n\r\n    def get_gender(self):\r\n        return self.__gender\r\n\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+str(self.__age)+\" \"+self.__gender)\r\n    @staticmethod\r\n    def check_gender(people_queue,gender):\r\n        new_queue= Queue(people_queue.get_max_size())\r\n        for i in range(0,people_queue.get_max_size()):\r\n            a = people_queue.dequeue()\r\n            if(a.get_gender()==gender):\r\n                new_queue.enqueue(a)        \r\n        return new_queue\r\n    # Write the remaining methods of People class here\r\n\r\npeople1=People(\"Jack\",25,\"Male\")\r\npeople2=People(\"Tom\",30,\"Male\")\r\npeople3=People(\"Asha\",27,\"Female\")\r\npeople4=People(\"Henry\",27,\"Male\")\r\npeople5=People(\"Tina\",27,\"Female\")\r\n\r\npeople_queue=Queue(5)\r\npeople_queue.enqueue(people1)\r\npeople_queue.enqueue(people2)\r\npeople_queue.enqueue(people3)\r\npeople_queue.enqueue(people4)\r\npeople_queue.enqueue(people5)\r\n\r\nresult_queue=People.check_gender(people_queue, \"Male\")\r\nresult_queue.display()\r\n","asgnmtId":"9","SolutionFileName":"Excer9.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-15 20:15:29,188 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:15:29,189 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:15:29,189 INFO  Invoking the service to verify the user solution
2019-03-15 20:15:29,189 INFO  Time before invoking service:Fri Mar 15 20:15:29 IST 2019
2019-03-15 20:15:29,189 INFO  Initialising service address for VerifySolution
2019-03-15 20:15:29,190 INFO  Time before invoking service In SUPER:Fri Mar 15 20:15:29 IST 2019
2019-03-15 20:15:30,053 INFO  Time after invoking service In SUPER:Fri Mar 15 20:15:30 IST 2019
2019-03-15 20:15:30,053 INFO  Service responded successfully with required details
2019-03-15 20:15:30,053 INFO  Time after invoking service:Fri Mar 15 20:15:30 IST 2019
2019-03-15 20:15:30,053 INFO  User solution successfully verified
2019-03-15 20:15:30,053 INFO  Processing the response from verify service
2019-03-15 20:15:30,057 INFO  Starting to parse JSON response
2019-03-15 20:15:30,058 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:15:30,059 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:15:30,060 INFO  Successfully parsed JSON response
2019-03-15 20:15:30,060 INFO  In the process of generating verify response in HTML
2019-03-15 20:15:30,141 INFO  Successfully generated verify response in HTML
2019-03-15 20:15:30,142 INFO  Successfully processed the response from service
2019-03-15 20:15:33,751 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:15:33,752 INFO  Displaying user solution
2019-03-15 20:15:33,762 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:15:33,762 INFO  Invoking the service to submit the user solution
2019-03-15 20:15:33,762 INFO  Initialising service address for Submit
2019-03-15 20:15:33,763 INFO  Time before invoking service In SUPER:Fri Mar 15 20:15:33 IST 2019
2019-03-15 20:15:33,888 INFO  Time after invoking service In SUPER:Fri Mar 15 20:15:33 IST 2019
2019-03-15 20:15:33,888 INFO  Service responded successfully with required details
2019-03-15 20:15:33,888 INFO  User solution successfully submitted
2019-03-15 20:15:33,888 INFO  Displaying submission status
2019-03-15 20:15:33,888 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:15:36,833 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:15:36,833 INFO  Displaying user solution
2019-03-15 20:15:36,842 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:15:36,843 INFO  Invoking the service to submit the user solution
2019-03-15 20:15:36,843 INFO  Initialising service address for Submit
2019-03-15 20:15:36,843 INFO  Time before invoking service In SUPER:Fri Mar 15 20:15:36 IST 2019
2019-03-15 20:15:36,922 INFO  Time after invoking service In SUPER:Fri Mar 15 20:15:36 IST 2019
2019-03-15 20:15:36,923 INFO  Service responded successfully with required details
2019-03-15 20:15:36,923 INFO  User solution successfully submitted
2019-03-15 20:15:36,923 INFO  Displaying submission status
2019-03-15 20:15:36,923 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:15:52,096 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:15:52,097 INFO  Displaying user solution
2019-03-15 20:15:52,106 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:15:52,106 INFO  Invoking the service to submit the user solution
2019-03-15 20:15:52,106 INFO  Initialising service address for Submit
2019-03-15 20:15:52,107 INFO  Time before invoking service In SUPER:Fri Mar 15 20:15:52 IST 2019
2019-03-15 20:15:52,238 INFO  Time after invoking service In SUPER:Fri Mar 15 20:15:52 IST 2019
2019-03-15 20:15:52,238 INFO  Service responded successfully with required details
2019-03-15 20:15:52,238 INFO  User solution successfully submitted
2019-03-15 20:15:52,238 INFO  Displaying submission status
2019-03-15 20:15:52,238 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:22:53,028 INFO  Setting request parameters for VerifySolution
2019-03-15 20:22:53,028 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:22:53,028 INFO  Starting to parse the user solution
2019-03-15 20:22:53,029 INFO  Displaying user solution
2019-03-15 20:22:53,097 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-11\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Queue\r\n\r\ndef merge_queue(queue1,queue2):\r\n    #write your logic here\r\n    queue_size = queue1.get_max_size()+queue2.get_max_size()\r\n    merged_queue = Queue(queue_size)\r\n    for i in range(0,queue_size):\r\n        a = queue1.dequeue()\r\n        b = queue2.dequeue()\r\n    \r\n    return merged_queue\r\n\r\n#Enqueue different values to both the queues and test your program\r\n\r\nqueue1=Queue(3)\r\nqueue2=Queue(6)\r\nqueue1.enqueue(3)\r\nqueue1.enqueue(6)\r\nqueue1.enqueue(8)\r\nqueue2.enqueue('b')\r\nqueue2.enqueue('y')\r\nqueue2.enqueue('u')\r\nqueue2.enqueue('t')\r\nqueue2.enqueue('r')\r\nqueue2.enqueue('o')\r\n\r\nmerged_queue=merge_queue(queue1, queue2)\r\nprint(\"The elements in the merged queue are:\")\r\nmerged_queue.display()\r\n","asgnmtId":"11","SolutionFileName":"Assign11.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:22:53,103 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:22:53,103 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:22:53,103 INFO  Invoking the service to verify the user solution
2019-03-15 20:22:53,103 INFO  Time before invoking service:Fri Mar 15 20:22:53 IST 2019
2019-03-15 20:22:53,103 INFO  Initialising service address for VerifySolution
2019-03-15 20:22:53,104 INFO  Time before invoking service In SUPER:Fri Mar 15 20:22:53 IST 2019
2019-03-15 20:22:53,990 INFO  Time after invoking service In SUPER:Fri Mar 15 20:22:53 IST 2019
2019-03-15 20:22:53,991 INFO  Service responded successfully with required details
2019-03-15 20:22:53,991 INFO  Time after invoking service:Fri Mar 15 20:22:53 IST 2019
2019-03-15 20:22:53,991 INFO  User solution successfully verified
2019-03-15 20:22:53,991 INFO  Processing the response from verify service
2019-03-15 20:22:53,994 INFO  Starting to parse JSON response
2019-03-15 20:22:53,995 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:22:53,995 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:22:53,996 INFO  Successfully parsed JSON response
2019-03-15 20:22:53,996 INFO  In the process of generating verify response in HTML
2019-03-15 20:22:54,072 INFO  Successfully generated verify response in HTML
2019-03-15 20:22:54,072 INFO  Successfully processed the response from service
2019-03-15 20:31:06,401 INFO  Setting request parameters for VerifySolution
2019-03-15 20:31:06,401 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:31:06,401 INFO  Starting to parse the user solution
2019-03-15 20:31:06,402 INFO  Displaying user solution
2019-03-15 20:31:06,483 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-11\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Queue\r\n\r\ndef merge_queue(queue1,queue2):\r\n    #write your logic here\r\n    queue_size = queue1.get_max_size()+queue2.get_max_size()\r\n    merged_queue = Queue(queue_size)\r\n    for i in range(0,queue_size):\r\n        a = queue1.dequeue()\r\n        if(a is not None):\r\n            merged_queue.enqueue(a)\r\n        b = queue2.dequeue()\r\n        if(b is not None):\r\n            merged_queue.enqueue(b)\r\n    \r\n    return merged_queue\r\n\r\n#Enqueue different values to both the queues and test your program\r\n\r\nqueue1=Queue(3)\r\nqueue2=Queue(6)\r\nqueue1.enqueue(3)\r\nqueue1.enqueue(6)\r\nqueue1.enqueue(8)\r\nqueue2.enqueue('b')\r\nqueue2.enqueue('y')\r\nqueue2.enqueue('u')\r\nqueue2.enqueue('t')\r\nqueue2.enqueue('r')\r\nqueue2.enqueue('o')\r\n\r\nmerged_queue=merge_queue(queue1, queue2)\r\nprint(\"The elements in the merged queue are:\")\r\nmerged_queue.display()\r\n","asgnmtId":"11","SolutionFileName":"Assign11.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:31:06,484 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:31:06,484 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:31:06,484 INFO  Invoking the service to verify the user solution
2019-03-15 20:31:06,485 INFO  Time before invoking service:Fri Mar 15 20:31:06 IST 2019
2019-03-15 20:31:06,485 INFO  Initialising service address for VerifySolution
2019-03-15 20:31:06,485 INFO  Time before invoking service In SUPER:Fri Mar 15 20:31:06 IST 2019
2019-03-15 20:31:07,385 INFO  Time after invoking service In SUPER:Fri Mar 15 20:31:07 IST 2019
2019-03-15 20:31:07,385 INFO  Service responded successfully with required details
2019-03-15 20:31:07,385 INFO  Time after invoking service:Fri Mar 15 20:31:07 IST 2019
2019-03-15 20:31:07,386 INFO  User solution successfully verified
2019-03-15 20:31:07,386 INFO  Processing the response from verify service
2019-03-15 20:31:07,388 INFO  Starting to parse JSON response
2019-03-15 20:31:07,390 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:31:07,390 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:31:07,391 INFO  Successfully parsed JSON response
2019-03-15 20:31:07,391 INFO  In the process of generating verify response in HTML
2019-03-15 20:31:07,468 INFO  Successfully generated verify response in HTML
2019-03-15 20:31:07,468 INFO  Successfully processed the response from service
2019-03-15 20:31:42,233 INFO  Setting request parameters for VerifySolution
2019-03-15 20:31:42,233 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:31:42,233 INFO  Starting to parse the user solution
2019-03-15 20:31:42,234 INFO  Displaying user solution
2019-03-15 20:31:42,284 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-11\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef merge_queue(queue1,queue2):\r\n    #write your logic here\r\n    queue_size = queue1.get_max_size()+queue2.get_max_size()\r\n    merged_queue = Queue(queue_size)\r\n    for i in range(0,queue_size):\r\n        a = queue1.dequeue()\r\n        if(a is not None):\r\n            merged_queue.enqueue(a)\r\n        b = queue2.dequeue()\r\n        if(b is not None):\r\n            merged_queue.enqueue(b)\r\n    \r\n    return merged_queue\r\n\r\n#Enqueue different values to both the queues and test your program\r\n\r\nqueue1=Queue(3)\r\nqueue2=Queue(6)\r\nqueue1.enqueue(3)\r\nqueue1.enqueue(6)\r\nqueue1.enqueue(8)\r\nqueue2.enqueue('b')\r\nqueue2.enqueue('y')\r\nqueue2.enqueue('u')\r\nqueue2.enqueue('t')\r\nqueue2.enqueue('r')\r\nqueue2.enqueue('o')\r\n\r\nmerged_queue=merge_queue(queue1, queue2)\r\nprint(\"The elements in the merged queue are:\")\r\nmerged_queue.display()\r\n","asgnmtId":"11","SolutionFileName":"Assign11.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:31:42,284 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:31:42,284 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:31:42,284 INFO  Invoking the service to verify the user solution
2019-03-15 20:31:42,285 INFO  Time before invoking service:Fri Mar 15 20:31:42 IST 2019
2019-03-15 20:31:42,285 INFO  Initialising service address for VerifySolution
2019-03-15 20:31:42,285 INFO  Time before invoking service In SUPER:Fri Mar 15 20:31:42 IST 2019
2019-03-15 20:31:43,687 INFO  Time after invoking service In SUPER:Fri Mar 15 20:31:43 IST 2019
2019-03-15 20:31:43,687 INFO  Service responded successfully with required details
2019-03-15 20:31:43,687 INFO  Time after invoking service:Fri Mar 15 20:31:43 IST 2019
2019-03-15 20:31:43,687 INFO  User solution successfully verified
2019-03-15 20:31:43,687 INFO  Processing the response from verify service
2019-03-15 20:31:43,689 INFO  Starting to parse JSON response
2019-03-15 20:31:43,689 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:31:43,689 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:31:43,690 INFO  Successfully parsed JSON response
2019-03-15 20:31:43,691 INFO  In the process of generating verify response in HTML
2019-03-15 20:31:43,756 INFO  Successfully generated verify response in HTML
2019-03-15 20:31:43,756 INFO  Successfully processed the response from service
2019-03-15 20:32:08,132 INFO  Setting request parameters for VerifySolution
2019-03-15 20:32:08,132 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:32:08,132 INFO  Starting to parse the user solution
2019-03-15 20:32:08,132 INFO  Displaying user solution
2019-03-15 20:32:08,210 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-11\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef merge_queue(queue1,queue2):\r\n    #write your logic here\r\n    queue_size = queue1.get_max_size()+queue2.get_max_size()\r\n    merged_queue = Queue(queue_size)\r\n    for i in range(0,queue_size):\r\n        a = queue1.dequeue()\r\n        if(a is not None):\r\n            merged_queue.enqueue(a)\r\n        b = queue2.dequeue()\r\n        if(b is not None):\r\n            merged_queue.enqueue(b)\r\n    \r\n    return merged_queue\r\n\r\n#Enqueue different values to both the queues and test your program\r\n\r\nqueue1=Queue(3)\r\nqueue2=Queue(6)\r\nqueue1.enqueue(3)\r\nqueue1.enqueue(6)\r\nqueue1.enqueue(8)\r\nqueue2.enqueue('b')\r\nqueue2.enqueue('y')\r\nqueue2.enqueue('u')\r\nqueue2.enqueue('t')\r\nqueue2.enqueue('r')\r\nqueue2.enqueue('o')\r\n\r\nmerged_queue=merge_queue(queue1, queue2)\r\nprint(\"The elements in the merged queue are:\")\r\nmerged_queue.display()\r\n","asgnmtId":"11","SolutionFileName":"Assign11.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:32:08,211 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:32:08,211 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:32:08,214 INFO  Invoking the service to verify the user solution
2019-03-15 20:32:08,214 INFO  Time before invoking service:Fri Mar 15 20:32:08 IST 2019
2019-03-15 20:32:08,214 INFO  Initialising service address for VerifySolution
2019-03-15 20:32:08,217 INFO  Time before invoking service In SUPER:Fri Mar 15 20:32:08 IST 2019
2019-03-15 20:32:09,030 INFO  Time after invoking service In SUPER:Fri Mar 15 20:32:09 IST 2019
2019-03-15 20:32:09,030 INFO  Service responded successfully with required details
2019-03-15 20:32:09,030 INFO  Time after invoking service:Fri Mar 15 20:32:09 IST 2019
2019-03-15 20:32:09,031 INFO  User solution successfully verified
2019-03-15 20:32:09,031 INFO  Processing the response from verify service
2019-03-15 20:32:09,032 INFO  Starting to parse JSON response
2019-03-15 20:32:09,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:32:09,033 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:32:09,033 INFO  Successfully parsed JSON response
2019-03-15 20:32:09,034 INFO  In the process of generating verify response in HTML
2019-03-15 20:32:09,097 INFO  Successfully generated verify response in HTML
2019-03-15 20:32:09,098 INFO  Successfully processed the response from service
2019-03-15 20:32:11,955 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:32:11,956 INFO  Displaying user solution
2019-03-15 20:32:11,964 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:32:11,964 INFO  Invoking the service to submit the user solution
2019-03-15 20:32:11,964 INFO  Initialising service address for Submit
2019-03-15 20:32:11,965 INFO  Time before invoking service In SUPER:Fri Mar 15 20:32:11 IST 2019
2019-03-15 20:32:12,295 INFO  Time after invoking service In SUPER:Fri Mar 15 20:32:12 IST 2019
2019-03-15 20:32:12,295 INFO  Service responded successfully with required details
2019-03-15 20:32:12,295 INFO  User solution successfully submitted
2019-03-15 20:32:12,295 INFO  Displaying submission status
2019-03-15 20:32:12,295 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:32:14,594 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:32:14,595 INFO  Displaying user solution
2019-03-15 20:32:14,603 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:32:14,603 INFO  Invoking the service to submit the user solution
2019-03-15 20:32:14,603 INFO  Initialising service address for Submit
2019-03-15 20:32:14,604 INFO  Time before invoking service In SUPER:Fri Mar 15 20:32:14 IST 2019
2019-03-15 20:32:14,829 INFO  Time after invoking service In SUPER:Fri Mar 15 20:32:14 IST 2019
2019-03-15 20:32:14,829 INFO  Service responded successfully with required details
2019-03-15 20:32:14,829 INFO  User solution successfully submitted
2019-03-15 20:32:14,829 INFO  Displaying submission status
2019-03-15 20:32:14,829 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:32:49,822 INFO  Setting request parameters for VerifySolution
2019-03-15 20:32:49,822 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:32:49,822 INFO  Starting to parse the user solution
2019-03-15 20:32:49,823 INFO  Displaying user solution
2019-03-15 20:32:49,885 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-11\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef merge_queue(queue1,queue2):\r\n    #write your logic here\r\n    queue_size = queue1.get_max_size()+queue2.get_max_size()\r\n    merged_queue = Queue(queue_size)\r\n    for i in range(0,queue_size):\r\n        a = queue1.dequeue()\r\n        if(a is not None):\r\n            merged_queue.enqueue(a)\r\n        b = queue2.dequeue()\r\n        if(b is not None):\r\n            merged_queue.enqueue(b)\r\n    \r\n    return merged_queue\r\n\r\n#Enqueue different values to both the queues and test your program\r\n\r\nqueue1=Queue(3)\r\nqueue2=Queue(6)\r\nqueue1.enqueue(3)\r\nqueue1.enqueue(6)\r\nqueue1.enqueue(8)\r\nqueue2.enqueue('b')\r\nqueue2.enqueue('y')\r\nqueue2.enqueue('u')\r\nqueue2.enqueue('t')\r\nqueue2.enqueue('r')\r\nqueue2.enqueue('o')\r\n\r\nmerged_queue=merge_queue(queue1, queue2)\r\nprint(\"The elements in the merged queue are:\")\r\nmerged_queue.display()\r\n","asgnmtId":"11","SolutionFileName":"Assign11.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:32:49,886 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:32:49,886 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:32:49,886 INFO  Invoking the service to verify the user solution
2019-03-15 20:32:49,886 INFO  Time before invoking service:Fri Mar 15 20:32:49 IST 2019
2019-03-15 20:32:49,886 INFO  Initialising service address for VerifySolution
2019-03-15 20:32:49,887 INFO  Time before invoking service In SUPER:Fri Mar 15 20:32:49 IST 2019
2019-03-15 20:32:50,790 INFO  Time after invoking service In SUPER:Fri Mar 15 20:32:50 IST 2019
2019-03-15 20:32:50,790 INFO  Service responded successfully with required details
2019-03-15 20:32:50,790 INFO  Time after invoking service:Fri Mar 15 20:32:50 IST 2019
2019-03-15 20:32:50,791 INFO  User solution successfully verified
2019-03-15 20:32:50,791 INFO  Processing the response from verify service
2019-03-15 20:32:50,792 INFO  Starting to parse JSON response
2019-03-15 20:32:50,793 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:32:50,793 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:32:50,794 INFO  Successfully parsed JSON response
2019-03-15 20:32:50,794 INFO  In the process of generating verify response in HTML
2019-03-15 20:32:50,858 INFO  Successfully generated verify response in HTML
2019-03-15 20:32:50,858 INFO  Successfully processed the response from service
2019-03-15 20:33:04,043 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 20:33:04,045 INFO  Displaying user solution
2019-03-15 20:33:04,051 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 20:33:04,052 INFO  Invoking the service to submit the user solution
2019-03-15 20:33:04,052 INFO  Initialising service address for Submit
2019-03-15 20:33:04,052 INFO  Time before invoking service In SUPER:Fri Mar 15 20:33:04 IST 2019
2019-03-15 20:33:04,216 INFO  Time after invoking service In SUPER:Fri Mar 15 20:33:04 IST 2019
2019-03-15 20:33:04,216 INFO  Service responded successfully with required details
2019-03-15 20:33:04,216 INFO  User solution successfully submitted
2019-03-15 20:33:04,216 INFO  Displaying submission status
2019-03-15 20:33:04,216 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 20:40:59,957 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-15 20:41:13,076 INFO  Setting request parameters for VerifySolution
2019-03-15 20:41:13,076 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 20:41:13,076 INFO  Starting to parse the user solution
2019-03-15 20:41:13,077 INFO  Displaying user solution
2019-03-15 20:41:13,149 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-12\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom <packagename>.DataStructures import Stack, Queue\r\n\r\nclass Ball:\r\n    def __init__(self,color,name):\r\n        self.__color=color\r\n        self.__name=name\r\n\r\n    def __str__(self):\r\n        return (self.__color+\" \"+self.__name)\r\n\r\n    def get_color(self):\r\n        return self.__color\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n#Implement Game class here\r\nclass Game:\r\n    def __init__(self,ball_stack):\r\n        self.ball_container=None\r\n        self.red_balls_container=None\r\n        self.green_balls_container = None\r\n        self.blue_balls_container = None\r\n        self.yellow_balls_container = None\r\n    def grouping_based_on_color(self):\r\n        pass\r\n    def rearrange_balls(self,color):\r\n        pass\r\n    def display_ball_details(self,color):\r\n        pass\r\n\r\n#Use different values to test your program\r\nball1=Ball(\"Red\",\"A\")\r\nball2=Ball(\"Blue\",\"B\")\r\nball3=Ball(\"Yellow\",\"B\")\r\nball4=Ball(\"Blue\",\"A\")\r\nball5=Ball(\"Yellow\",\"A\")\r\nball6=Ball(\"Green\",\"B\")\r\nball7=Ball(\"Green\",\"A\")\r\nball8=Ball(\"Red\",\"B\")\r\nball_list=Stack(8)\r\nball_list.push(ball1)\r\nball_list.push(ball2)\r\nball_list.push(ball3)\r\nball_list.push(ball4)\r\nball_list.push(ball5)\r\nball_list.push(ball6)\r\nball_list.push(ball7)\r\nball_list.push(ball8)\r\n\r\n#Create objects of Game class, invoke the methods and test the program\r\n","asgnmtId":"12","SolutionFileName":"Assign12.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 20:41:13,149 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 20:41:13,150 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 20:41:13,150 INFO  Invoking the service to verify the user solution
2019-03-15 20:41:13,150 INFO  Time before invoking service:Fri Mar 15 20:41:13 IST 2019
2019-03-15 20:41:13,150 INFO  Initialising service address for VerifySolution
2019-03-15 20:41:13,151 INFO  Time before invoking service In SUPER:Fri Mar 15 20:41:13 IST 2019
2019-03-15 20:41:14,364 INFO  Time after invoking service In SUPER:Fri Mar 15 20:41:14 IST 2019
2019-03-15 20:41:14,364 INFO  Service responded successfully with required details
2019-03-15 20:41:14,364 INFO  Time after invoking service:Fri Mar 15 20:41:14 IST 2019
2019-03-15 20:41:14,365 INFO  User solution successfully verified
2019-03-15 20:41:14,365 INFO  Processing the response from verify service
2019-03-15 20:41:14,370 INFO  Starting to parse JSON response
2019-03-15 20:41:14,372 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,372 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,372 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,372 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,372 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,373 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 20:41:14,374 INFO  Successfully parsed JSON response
2019-03-15 20:41:14,374 INFO  In the process of generating verify response in HTML
2019-03-15 20:41:14,457 INFO  Successfully generated verify response in HTML
2019-03-15 20:41:14,457 INFO  Successfully processed the response from service
2019-03-15 21:23:06,787 INFO  Setting request parameters for VerifySolution
2019-03-15 21:23:06,787 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:23:06,787 INFO  Starting to parse the user solution
2019-03-15 21:23:06,787 INFO  Displaying user solution
2019-03-15 21:23:06,885 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-13\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Stack\r\n\r\ndef change_smallest_value(number_stack):\r\n    #write your logic here\r\n    list1 = []\r\n    while(not(number_stack.is_empty())):\r\n        a = number_stack.pop()\r\n        list1.append(a)\r\n    min_value = min(list1)\r\n    for i in range(0,list1.count(min_value)):\r\n        list1.remove(min_value)\r\n        number_stack.push(min_value)\r\n    for i in list1[::-1]:\r\n        number_stack.push(i)\r\n\r\n    return number_stack\r\n\r\n#Add different values to the stack and test your program\r\nnumber_stack=Stack(8)\r\nnumber_stack.push(7)\r\nnumber_stack.push(8)\r\nnumber_stack.push(5)\r\nnumber_stack.push(66)\r\nnumber_stack.push(5)\r\nprint(\"Initial Stack:\")\r\nnumber_stack.display()\r\nchange_smallest_value(number_stack)\r\nprint(\"After the change:\")\r\nnumber_stack.display()\r\n","asgnmtId":"13","SolutionFileName":"Assign13.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:23:06,886 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:23:06,886 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:23:06,886 INFO  Invoking the service to verify the user solution
2019-03-15 21:23:06,886 INFO  Time before invoking service:Fri Mar 15 21:23:06 IST 2019
2019-03-15 21:23:06,887 INFO  Initialising service address for VerifySolution
2019-03-15 21:23:06,888 INFO  Time before invoking service In SUPER:Fri Mar 15 21:23:06 IST 2019
2019-03-15 21:23:07,762 INFO  Time after invoking service In SUPER:Fri Mar 15 21:23:07 IST 2019
2019-03-15 21:23:07,762 INFO  Service responded successfully with required details
2019-03-15 21:23:07,762 INFO  Time after invoking service:Fri Mar 15 21:23:07 IST 2019
2019-03-15 21:23:07,762 INFO  User solution successfully verified
2019-03-15 21:23:07,763 INFO  Processing the response from verify service
2019-03-15 21:23:07,766 INFO  Starting to parse JSON response
2019-03-15 21:23:07,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:23:07,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:23:07,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:23:07,767 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:23:07,768 INFO  Successfully parsed JSON response
2019-03-15 21:23:07,768 INFO  In the process of generating verify response in HTML
2019-03-15 21:23:07,871 INFO  Successfully generated verify response in HTML
2019-03-15 21:23:07,871 INFO  Successfully processed the response from service
2019-03-15 21:24:32,595 INFO  Setting request parameters for VerifySolution
2019-03-15 21:24:32,595 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:24:32,595 INFO  Starting to parse the user solution
2019-03-15 21:24:32,596 INFO  Displaying user solution
2019-03-15 21:24:32,671 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-13\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import Stack\r\n\r\ndef change_smallest_value(number_stack):\r\n    #write your logic here\r\n    list1 = []\r\n    while(not(number_stack.is_empty())):\r\n        a = number_stack.pop()\r\n        list1.append(a)\r\n    min_value = min(list1)\r\n    \r\n    for i in range(0,list1.count(min_value)):\r\n        list1.remove(min_value)\r\n        number_stack.push(min_value)\r\n    for i in list1[::-1]:\r\n        number_stack.push(i)\r\n\r\n    return number_stack\r\n\r\n#Add different values to the stack and test your program\r\nnumber_stack=Stack(8)\r\nnumber_stack.push(7)\r\nnumber_stack.push(8)\r\nnumber_stack.push(5)\r\nnumber_stack.push(66)\r\nnumber_stack.push(5)\r\nprint(\"Initial Stack:\")\r\nnumber_stack.display()\r\nchange_smallest_value(number_stack)\r\nprint(\"After the change:\")\r\nnumber_stack.display()\r\n","asgnmtId":"13","SolutionFileName":"Assign13.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:24:32,672 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:24:32,672 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:24:32,672 INFO  Invoking the service to verify the user solution
2019-03-15 21:24:32,672 INFO  Time before invoking service:Fri Mar 15 21:24:32 IST 2019
2019-03-15 21:24:32,672 INFO  Initialising service address for VerifySolution
2019-03-15 21:24:32,673 INFO  Time before invoking service In SUPER:Fri Mar 15 21:24:32 IST 2019
2019-03-15 21:24:33,605 INFO  Time after invoking service In SUPER:Fri Mar 15 21:24:33 IST 2019
2019-03-15 21:24:33,606 INFO  Service responded successfully with required details
2019-03-15 21:24:33,606 INFO  Time after invoking service:Fri Mar 15 21:24:33 IST 2019
2019-03-15 21:24:33,607 INFO  User solution successfully verified
2019-03-15 21:24:33,607 INFO  Processing the response from verify service
2019-03-15 21:24:33,609 INFO  Starting to parse JSON response
2019-03-15 21:24:33,611 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:24:33,611 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:24:33,611 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:24:33,611 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:24:33,612 INFO  Successfully parsed JSON response
2019-03-15 21:24:33,613 INFO  In the process of generating verify response in HTML
2019-03-15 21:24:33,679 INFO  Successfully generated verify response in HTML
2019-03-15 21:24:33,679 INFO  Successfully processed the response from service
2019-03-15 21:24:36,558 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:24:36,559 INFO  Displaying user solution
2019-03-15 21:24:36,569 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:24:36,569 INFO  Invoking the service to submit the user solution
2019-03-15 21:24:36,569 INFO  Initialising service address for Submit
2019-03-15 21:24:36,569 INFO  Time before invoking service In SUPER:Fri Mar 15 21:24:36 IST 2019
2019-03-15 21:24:36,843 INFO  Time after invoking service In SUPER:Fri Mar 15 21:24:36 IST 2019
2019-03-15 21:24:36,843 INFO  Service responded successfully with required details
2019-03-15 21:24:36,843 INFO  User solution successfully submitted
2019-03-15 21:24:36,843 INFO  Displaying submission status
2019-03-15 21:24:36,843 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:24:39,207 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:24:39,208 INFO  Displaying user solution
2019-03-15 21:24:39,216 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:24:39,216 INFO  Invoking the service to submit the user solution
2019-03-15 21:24:39,217 INFO  Initialising service address for Submit
2019-03-15 21:24:39,217 INFO  Time before invoking service In SUPER:Fri Mar 15 21:24:39 IST 2019
2019-03-15 21:24:39,701 INFO  Time after invoking service In SUPER:Fri Mar 15 21:24:39 IST 2019
2019-03-15 21:24:39,702 INFO  Service responded successfully with required details
2019-03-15 21:24:39,702 INFO  User solution successfully submitted
2019-03-15 21:24:39,702 INFO  Displaying submission status
2019-03-15 21:24:39,702 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:26:15,793 INFO  Setting request parameters for VerifySolution
2019-03-15 21:26:15,793 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:26:15,793 INFO  Starting to parse the user solution
2019-03-15 21:26:15,793 INFO  Displaying user solution
2019-03-15 21:26:15,862 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-12\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Stack, Queue\r\n\r\nclass Ball:\r\n    def __init__(self,color,name):\r\n        self.__color=color\r\n        self.__name=name\r\n\r\n    def __str__(self):\r\n        return (self.__color+\" \"+self.__name)\r\n\r\n    def get_color(self):\r\n        return self.__color\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n#Implement Game class here\r\nclass Game:\r\n    def __init__(self,ball_stack):\r\n        self.ball_container=ball_stack\r\n        self.red_balls_container=Stack(2)\r\n        self.green_balls_container = Stack(2)\r\n        self.blue_balls_container = Stack(2)\r\n        self.yellow_balls_container = Stack(2)\r\n    def grouping_based_on_color(self):\r\n        for i in range(0,self.ball_container.get_max_size()):\r\n            a = self.ball_container.pop()\r\n            if(a.get_color()==\"Red\"):\r\n                self.red_balls_container.push(a)\r\n            elif(a.get_color()==\"Blue\"):\r\n                self.blue_balls_container.push(a)\r\n            elif(a.get_color()==\"Yellow\"):\r\n                self.yellow_balls_container.push(a)\r\n            elif(a.get_color()==\"Green\"):\r\n                self.green_balls_container.push(a)\r\n    def rearrange_balls(self,color):\r\n        if color == \"Red\":\r\n            for x in range (2):\r\n                ball =self.red_balls_container.pop()\r\n                if ball.get_name() == \"A\":\r\n                    a = ball\r\n                else:\r\n                    b = ball\r\n            self.red_balls_container.push(b)\r\n            self.red_balls_container.push(a)\r\n        elif color == \"Blue\":\r\n            for x in range (2):\r\n                ball =self.blue_balls_container.pop()\r\n                if ball.get_name() == \"A\":\r\n                    a = ball\r\n                else:\r\n                    b = ball\r\n            self.blue_balls_container.push(b)\r\n            self.blue_balls_container.push(a)\r\n    def display_ball_details(self,color):\r\n        pass\r\n\r\n#Use different values to test your program\r\nball1=Ball(\"Red\",\"A\")\r\nball2=Ball(\"Blue\",\"B\")\r\nball3=Ball(\"Yellow\",\"B\")\r\nball4=Ball(\"Blue\",\"A\")\r\nball5=Ball(\"Yellow\",\"A\")\r\nball6=Ball(\"Green\",\"B\")\r\nball7=Ball(\"Green\",\"A\")\r\nball8=Ball(\"Red\",\"B\")\r\nball_list=Stack(8)\r\nball_list.push(ball1)\r\nball_list.push(ball2)\r\nball_list.push(ball3)\r\nball_list.push(ball4)\r\nball_list.push(ball5)\r\nball_list.push(ball6)\r\nball_list.push(ball7)\r\nball_list.push(ball8)\r\n\r\n#Create objects of Game class, invoke the methods and test the program\r\ng1 = Game(ball_list)\r\ng1.grouping_based_on_color()\r\ng1.display_ball_details(\"Green\")\r\n","asgnmtId":"12","SolutionFileName":"Assign12.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:26:15,864 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:26:15,864 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:26:15,864 INFO  Invoking the service to verify the user solution
2019-03-15 21:26:15,864 INFO  Time before invoking service:Fri Mar 15 21:26:15 IST 2019
2019-03-15 21:26:15,864 INFO  Initialising service address for VerifySolution
2019-03-15 21:26:15,865 INFO  Time before invoking service In SUPER:Fri Mar 15 21:26:15 IST 2019
2019-03-15 21:26:17,057 INFO  Time after invoking service In SUPER:Fri Mar 15 21:26:17 IST 2019
2019-03-15 21:26:17,057 INFO  Service responded successfully with required details
2019-03-15 21:26:17,057 INFO  Time after invoking service:Fri Mar 15 21:26:17 IST 2019
2019-03-15 21:26:17,057 INFO  User solution successfully verified
2019-03-15 21:26:17,058 INFO  Processing the response from verify service
2019-03-15 21:26:17,060 INFO  Starting to parse JSON response
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,062 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,062 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:26:17,063 INFO  Successfully parsed JSON response
2019-03-15 21:26:17,063 INFO  In the process of generating verify response in HTML
2019-03-15 21:26:17,125 INFO  Successfully generated verify response in HTML
2019-03-15 21:26:17,125 INFO  Successfully processed the response from service
2019-03-15 21:28:26,561 INFO  Setting request parameters for VerifySolution
2019-03-15 21:28:26,561 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:28:26,561 INFO  Starting to parse the user solution
2019-03-15 21:28:26,562 INFO  Displaying user solution
2019-03-15 21:28:26,624 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-12\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Stack, Queue\r\n\r\nclass Ball:\r\n    def __init__(self,color,name):\r\n        self.__color=color\r\n        self.__name=name\r\n\r\n    def __str__(self):\r\n        return (self.__color+\" \"+self.__name)\r\n\r\n    def get_color(self):\r\n        return self.__color\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n#Implement Game class here\r\nclass Game:\r\n    def __init__(self,ball_stack):\r\n        self.ball_container=ball_stack\r\n        self.red_balls_container=Stack(2)\r\n        self.green_balls_container = Stack(2)\r\n        self.blue_balls_container = Stack(2)\r\n        self.yellow_balls_container = Stack(2)\r\n    def grouping_based_on_color(self):\r\n        for i in range(0,self.ball_container.get_max_size()):\r\n            a = self.ball_container.pop()\r\n            if(a.get_color()==\"Red\"):\r\n                self.red_balls_container.push(a)\r\n            elif(a.get_color()==\"Blue\"):\r\n                self.blue_balls_container.push(a)\r\n            elif(a.get_color()==\"Yellow\"):\r\n                self.yellow_balls_container.push(a)\r\n            elif(a.get_color()==\"Green\"):\r\n                self.green_balls_container.push(a)\r\n    def rearrange_balls(self,color):\r\n        if(color==\"Red\"):\r\n            for x in range (2):\r\n                ball =self.red_balls_container.pop()\r\n                if(ball.get_name()==\"A\"):\r\n                    a = ball\r\n                else:\r\n                    b = ball\r\n            self.red_balls_container.push(b)\r\n            self.red_balls_container.push(a)\r\n        elif(color == \"Blue\"):\r\n            for x in range (2):\r\n                ball =self.blue_balls_container.pop()\r\n                if(ball.get_name()==\"A\"):\r\n                    a = ball\r\n                else:\r\n                    b = ball\r\n            self.blue_balls_container.push(b)\r\n            self.blue_balls_container.push(a)\r\n    def display_ball_details(self,color):\r\n        pass\r\n\r\n#Use different values to test your program\r\nball1=Ball(\"Red\",\"A\")\r\nball2=Ball(\"Blue\",\"B\")\r\nball3=Ball(\"Yellow\",\"B\")\r\nball4=Ball(\"Blue\",\"A\")\r\nball5=Ball(\"Yellow\",\"A\")\r\nball6=Ball(\"Green\",\"B\")\r\nball7=Ball(\"Green\",\"A\")\r\nball8=Ball(\"Red\",\"B\")\r\nball_list=Stack(8)\r\nball_list.push(ball1)\r\nball_list.push(ball2)\r\nball_list.push(ball3)\r\nball_list.push(ball4)\r\nball_list.push(ball5)\r\nball_list.push(ball6)\r\nball_list.push(ball7)\r\nball_list.push(ball8)\r\n\r\n#Create objects of Game class, invoke the methods and test the program\r\ng1 = Game(ball_list)\r\ng1.grouping_based_on_color()\r\ng1.display_ball_details(\"Green\")\r\n","asgnmtId":"12","SolutionFileName":"Assign12.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:28:26,624 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:28:26,625 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:28:26,625 INFO  Invoking the service to verify the user solution
2019-03-15 21:28:26,625 INFO  Time before invoking service:Fri Mar 15 21:28:26 IST 2019
2019-03-15 21:28:26,625 INFO  Initialising service address for VerifySolution
2019-03-15 21:28:26,626 INFO  Time before invoking service In SUPER:Fri Mar 15 21:28:26 IST 2019
2019-03-15 21:28:27,919 INFO  Time after invoking service In SUPER:Fri Mar 15 21:28:27 IST 2019
2019-03-15 21:28:27,919 INFO  Service responded successfully with required details
2019-03-15 21:28:27,920 INFO  Time after invoking service:Fri Mar 15 21:28:27 IST 2019
2019-03-15 21:28:27,920 INFO  User solution successfully verified
2019-03-15 21:28:27,920 INFO  Processing the response from verify service
2019-03-15 21:28:27,926 INFO  Starting to parse JSON response
2019-03-15 21:28:27,927 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,927 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,927 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,927 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,928 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:28:27,929 INFO  Successfully parsed JSON response
2019-03-15 21:28:27,929 INFO  In the process of generating verify response in HTML
2019-03-15 21:28:28,004 INFO  Successfully generated verify response in HTML
2019-03-15 21:28:28,004 INFO  Successfully processed the response from service
2019-03-15 21:28:31,507 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:28:31,508 INFO  Displaying user solution
2019-03-15 21:28:31,516 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:28:31,516 INFO  Invoking the service to submit the user solution
2019-03-15 21:28:31,516 INFO  Initialising service address for Submit
2019-03-15 21:28:31,516 INFO  Time before invoking service In SUPER:Fri Mar 15 21:28:31 IST 2019
2019-03-15 21:28:31,711 INFO  Time after invoking service In SUPER:Fri Mar 15 21:28:31 IST 2019
2019-03-15 21:28:31,711 INFO  Service responded successfully with required details
2019-03-15 21:28:31,711 INFO  User solution successfully submitted
2019-03-15 21:28:31,712 INFO  Displaying submission status
2019-03-15 21:28:31,712 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:28:33,963 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:28:33,964 INFO  Displaying user solution
2019-03-15 21:28:33,973 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:28:33,974 INFO  Invoking the service to submit the user solution
2019-03-15 21:28:33,974 INFO  Initialising service address for Submit
2019-03-15 21:28:33,974 INFO  Time before invoking service In SUPER:Fri Mar 15 21:28:33 IST 2019
2019-03-15 21:28:34,108 INFO  Time after invoking service In SUPER:Fri Mar 15 21:28:34 IST 2019
2019-03-15 21:28:34,108 INFO  Service responded successfully with required details
2019-03-15 21:28:34,108 INFO  User solution successfully submitted
2019-03-15 21:28:34,108 INFO  Displaying submission status
2019-03-15 21:28:34,108 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:34:09,235 INFO  Setting request parameters for VerifySolution
2019-03-15 21:34:09,235 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:34:09,235 INFO  Starting to parse the user solution
2019-03-15 21:34:09,236 INFO  Displaying user solution
2019-03-15 21:34:09,316 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-14\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import Queue\r\n\r\ndef check_numbers(number_queue):\r\n    #write your logic here\r\n\r\n    new_queue = Queue(number_queue.get_max_size())\r\n    while(not(number_queue.is_empty())):\r\n        pop = number_queue.dequeue()\r\n        count = 0\r\n        for x in range (1,11):\r\n            if(pop%x == 0):\r\n                count+=1\r\n        if(count == 10):\r\n            new_queue.enqueue(pop)\r\n    return new_queue\r\n\r\n#Add different values to the queue and test your program\r\nnumber_queue=Queue(5)\r\nnumber_queue.enqueue(13983)\r\nnumber_queue.enqueue(10080)\r\nnumber_queue.enqueue(7113)\r\nnumber_queue.enqueue(2520)\r\nnumber_queue.enqueue(2500)\r\ncheck_numbers(number_queue)\r\n","asgnmtId":"14","SolutionFileName":"Assign14.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:34:09,317 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:34:09,317 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:34:09,317 INFO  Invoking the service to verify the user solution
2019-03-15 21:34:09,318 INFO  Time before invoking service:Fri Mar 15 21:34:09 IST 2019
2019-03-15 21:34:09,318 INFO  Initialising service address for VerifySolution
2019-03-15 21:34:09,318 INFO  Time before invoking service In SUPER:Fri Mar 15 21:34:09 IST 2019
2019-03-15 21:34:10,194 INFO  Time after invoking service In SUPER:Fri Mar 15 21:34:10 IST 2019
2019-03-15 21:34:10,194 INFO  Service responded successfully with required details
2019-03-15 21:34:10,194 INFO  Time after invoking service:Fri Mar 15 21:34:10 IST 2019
2019-03-15 21:34:10,195 INFO  User solution successfully verified
2019-03-15 21:34:10,195 INFO  Processing the response from verify service
2019-03-15 21:34:10,198 INFO  Starting to parse JSON response
2019-03-15 21:34:10,198 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:10,198 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:10,199 INFO  Successfully parsed JSON response
2019-03-15 21:34:10,199 INFO  In the process of generating verify response in HTML
2019-03-15 21:34:10,290 INFO  Successfully generated verify response in HTML
2019-03-15 21:34:10,290 INFO  Successfully processed the response from service
2019-03-15 21:34:42,485 INFO  Setting request parameters for VerifySolution
2019-03-15 21:34:42,486 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:34:42,486 INFO  Starting to parse the user solution
2019-03-15 21:34:42,486 INFO  Displaying user solution
2019-03-15 21:34:42,547 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-14\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef check_numbers(number_queue):\r\n    #write your logic here\r\n\r\n    new_queue = Queue(number_queue.get_max_size())\r\n    while(not(number_queue.is_empty())):\r\n        pop = number_queue.dequeue()\r\n        count = 0\r\n        for x in range (1,11):\r\n            if(pop%x == 0):\r\n                count+=1\r\n        if(count == 10):\r\n            new_queue.enqueue(pop)\r\n    return new_queue\r\n\r\n#Add different values to the queue and test your program\r\nnumber_queue=Queue(5)\r\nnumber_queue.enqueue(13983)\r\nnumber_queue.enqueue(10080)\r\nnumber_queue.enqueue(7113)\r\nnumber_queue.enqueue(2520)\r\nnumber_queue.enqueue(2500)\r\ncheck_numbers(number_queue)\r\n","asgnmtId":"14","SolutionFileName":"Assign14.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:34:42,548 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:34:42,548 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:34:42,548 INFO  Invoking the service to verify the user solution
2019-03-15 21:34:42,548 INFO  Time before invoking service:Fri Mar 15 21:34:42 IST 2019
2019-03-15 21:34:42,548 INFO  Initialising service address for VerifySolution
2019-03-15 21:34:42,549 INFO  Time before invoking service In SUPER:Fri Mar 15 21:34:42 IST 2019
2019-03-15 21:34:43,494 INFO  Time after invoking service In SUPER:Fri Mar 15 21:34:43 IST 2019
2019-03-15 21:34:43,495 INFO  Service responded successfully with required details
2019-03-15 21:34:43,495 INFO  Time after invoking service:Fri Mar 15 21:34:43 IST 2019
2019-03-15 21:34:43,495 INFO  User solution successfully verified
2019-03-15 21:34:43,495 INFO  Processing the response from verify service
2019-03-15 21:34:43,497 INFO  Starting to parse JSON response
2019-03-15 21:34:43,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:43,498 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:43,499 INFO  Successfully parsed JSON response
2019-03-15 21:34:43,499 INFO  In the process of generating verify response in HTML
2019-03-15 21:34:43,574 INFO  Successfully generated verify response in HTML
2019-03-15 21:34:43,575 INFO  Successfully processed the response from service
2019-03-15 21:34:46,594 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:34:46,594 INFO  Displaying user solution
2019-03-15 21:34:46,603 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:34:46,603 INFO  Invoking the service to submit the user solution
2019-03-15 21:34:46,603 INFO  Initialising service address for Submit
2019-03-15 21:34:46,604 INFO  Time before invoking service In SUPER:Fri Mar 15 21:34:46 IST 2019
2019-03-15 21:34:46,912 INFO  Time after invoking service In SUPER:Fri Mar 15 21:34:46 IST 2019
2019-03-15 21:34:46,912 INFO  Service responded successfully with required details
2019-03-15 21:34:46,912 INFO  User solution successfully submitted
2019-03-15 21:34:46,913 INFO  Displaying submission status
2019-03-15 21:34:46,913 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:34:52,869 INFO  Setting request parameters for VerifySolution
2019-03-15 21:34:52,869 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:34:52,869 INFO  Starting to parse the user solution
2019-03-15 21:34:52,870 INFO  Displaying user solution
2019-03-15 21:34:52,952 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-14\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef check_numbers(number_queue):\r\n    #write your logic here\r\n\r\n    new_queue = Queue(number_queue.get_max_size())\r\n    while(not(number_queue.is_empty())):\r\n        pop = number_queue.dequeue()\r\n        count = 0\r\n        for x in range (1,11):\r\n            if(pop%x == 0):\r\n                count+=1\r\n        if(count == 10):\r\n            new_queue.enqueue(pop)\r\n    return new_queue\r\n\r\n#Add different values to the queue and test your program\r\nnumber_queue=Queue(5)\r\nnumber_queue.enqueue(13983)\r\nnumber_queue.enqueue(10080)\r\nnumber_queue.enqueue(7113)\r\nnumber_queue.enqueue(2520)\r\nnumber_queue.enqueue(2500)\r\ncheck_numbers(number_queue)\r\n","asgnmtId":"14","SolutionFileName":"Assign14.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:34:52,952 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:34:52,952 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:34:52,952 INFO  Invoking the service to verify the user solution
2019-03-15 21:34:52,953 INFO  Time before invoking service:Fri Mar 15 21:34:52 IST 2019
2019-03-15 21:34:52,953 INFO  Initialising service address for VerifySolution
2019-03-15 21:34:52,953 INFO  Time before invoking service In SUPER:Fri Mar 15 21:34:52 IST 2019
2019-03-15 21:34:53,743 INFO  Time after invoking service In SUPER:Fri Mar 15 21:34:53 IST 2019
2019-03-15 21:34:53,743 INFO  Service responded successfully with required details
2019-03-15 21:34:53,743 INFO  Time after invoking service:Fri Mar 15 21:34:53 IST 2019
2019-03-15 21:34:53,744 INFO  User solution successfully verified
2019-03-15 21:34:53,744 INFO  Processing the response from verify service
2019-03-15 21:34:53,745 INFO  Starting to parse JSON response
2019-03-15 21:34:53,746 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:53,746 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:34:53,747 INFO  Successfully parsed JSON response
2019-03-15 21:34:53,747 INFO  In the process of generating verify response in HTML
2019-03-15 21:34:53,822 INFO  Successfully generated verify response in HTML
2019-03-15 21:34:53,822 INFO  Successfully processed the response from service
2019-03-15 21:34:58,737 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:34:58,738 INFO  Displaying user solution
2019-03-15 21:34:58,747 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:34:58,747 INFO  Invoking the service to submit the user solution
2019-03-15 21:34:58,747 INFO  Initialising service address for Submit
2019-03-15 21:34:58,747 INFO  Time before invoking service In SUPER:Fri Mar 15 21:34:58 IST 2019
2019-03-15 21:34:58,999 INFO  Time after invoking service In SUPER:Fri Mar 15 21:34:58 IST 2019
2019-03-15 21:34:59,000 INFO  Service responded successfully with required details
2019-03-15 21:34:59,000 INFO  User solution successfully submitted
2019-03-15 21:34:59,000 INFO  Displaying submission status
2019-03-15 21:34:59,000 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:35:44,230 INFO  Setting request parameters for VerifySolution
2019-03-15 21:35:44,230 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:35:44,230 INFO  Starting to parse the user solution
2019-03-15 21:35:44,232 INFO  Displaying user solution
2019-03-15 21:35:44,315 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-14\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\n\r\ndef check_numbers(number_queue):\r\n    #write your logic here\r\n\r\n    new_queue = Queue(number_queue.get_max_size())\r\n    while(not(number_queue.is_empty())):\r\n        pop = number_queue.dequeue()\r\n        count = 0\r\n        for x in range (1,11):\r\n            if(pop%x == 0):\r\n                count+=1\r\n        if(count == 10):\r\n            new_queue.enqueue(pop)\r\n    return new_queue\r\n\r\n#Add different values to the queue and test your program\r\nnumber_queue=Queue(5)\r\nnumber_queue.enqueue(13983)\r\nnumber_queue.enqueue(10080)\r\nnumber_queue.enqueue(7113)\r\nnumber_queue.enqueue(2520)\r\nnumber_queue.enqueue(2500)\r\ncheck_numbers(number_queue)\r\n","asgnmtId":"14","SolutionFileName":"Assign14.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:35:44,316 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:35:44,316 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:35:44,316 INFO  Invoking the service to verify the user solution
2019-03-15 21:35:44,316 INFO  Time before invoking service:Fri Mar 15 21:35:44 IST 2019
2019-03-15 21:35:44,317 INFO  Initialising service address for VerifySolution
2019-03-15 21:35:44,317 INFO  Time before invoking service In SUPER:Fri Mar 15 21:35:44 IST 2019
2019-03-15 21:35:45,156 INFO  Time after invoking service In SUPER:Fri Mar 15 21:35:45 IST 2019
2019-03-15 21:35:45,156 INFO  Service responded successfully with required details
2019-03-15 21:35:45,156 INFO  Time after invoking service:Fri Mar 15 21:35:45 IST 2019
2019-03-15 21:35:45,157 INFO  User solution successfully verified
2019-03-15 21:35:45,157 INFO  Processing the response from verify service
2019-03-15 21:35:45,158 INFO  Starting to parse JSON response
2019-03-15 21:35:45,159 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:35:45,159 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:35:45,160 INFO  Successfully parsed JSON response
2019-03-15 21:35:45,160 INFO  In the process of generating verify response in HTML
2019-03-15 21:35:45,239 INFO  Successfully generated verify response in HTML
2019-03-15 21:35:45,239 INFO  Successfully processed the response from service
2019-03-15 21:36:42,696 INFO  Setting request parameters for VerifySolution
2019-03-15 21:36:42,696 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:36:42,697 INFO  Starting to parse the user solution
2019-03-15 21:36:42,697 INFO  Displaying user solution
2019-03-15 21:36:42,777 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for employee in self.__employees:\r\n            \r\n            if employee.get_allocated_job() is None:\r\n                employee.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if in_job == len(self.__employees):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n        pass \r\n    def elapsed_time(self,no_of_mins):\r\n        completed_list = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                completed_list.append(job_status)\r\n        \r\n        if len(completed_list)!=0:\r\n            return completed_list\r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:36:42,778 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:36:42,778 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:36:42,778 INFO  Invoking the service to verify the user solution
2019-03-15 21:36:42,778 INFO  Time before invoking service:Fri Mar 15 21:36:42 IST 2019
2019-03-15 21:36:42,778 INFO  Initialising service address for VerifySolution
2019-03-15 21:36:42,779 INFO  Time before invoking service In SUPER:Fri Mar 15 21:36:42 IST 2019
2019-03-15 21:36:44,306 INFO  Time after invoking service In SUPER:Fri Mar 15 21:36:44 IST 2019
2019-03-15 21:36:44,307 INFO  Service responded successfully with required details
2019-03-15 21:36:44,307 INFO  Time after invoking service:Fri Mar 15 21:36:44 IST 2019
2019-03-15 21:36:44,307 INFO  User solution successfully verified
2019-03-15 21:36:44,307 INFO  Processing the response from verify service
2019-03-15 21:36:44,310 INFO  Starting to parse JSON response
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,311 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,312 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:36:44,313 INFO  Successfully parsed JSON response
2019-03-15 21:36:44,314 INFO  In the process of generating verify response in HTML
2019-03-15 21:36:44,385 INFO  Successfully generated verify response in HTML
2019-03-15 21:36:44,385 INFO  Successfully processed the response from service
2019-03-15 21:38:43,863 INFO  Setting request parameters for VerifySolution
2019-03-15 21:38:43,863 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:38:43,863 INFO  Starting to parse the user solution
2019-03-15 21:38:43,864 INFO  Displaying user solution
2019-03-15 21:38:43,934 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for employee in self.__employees:\r\n            \r\n            if employee.get_allocated_job() is None:\r\n                employee.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if in_job == len(self.__employees):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n        pass \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1 .append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:38:43,935 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:38:43,935 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:38:43,935 INFO  Invoking the service to verify the user solution
2019-03-15 21:38:43,936 INFO  Time before invoking service:Fri Mar 15 21:38:43 IST 2019
2019-03-15 21:38:43,936 INFO  Initialising service address for VerifySolution
2019-03-15 21:38:43,936 INFO  Time before invoking service In SUPER:Fri Mar 15 21:38:43 IST 2019
2019-03-15 21:38:45,653 INFO  Time after invoking service In SUPER:Fri Mar 15 21:38:45 IST 2019
2019-03-15 21:38:45,654 INFO  Service responded successfully with required details
2019-03-15 21:38:45,654 INFO  Time after invoking service:Fri Mar 15 21:38:45 IST 2019
2019-03-15 21:38:45,654 INFO  User solution successfully verified
2019-03-15 21:38:45,655 INFO  Processing the response from verify service
2019-03-15 21:38:45,662 INFO  Starting to parse JSON response
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,665 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:45,666 INFO  Successfully parsed JSON response
2019-03-15 21:38:45,667 INFO  In the process of generating verify response in HTML
2019-03-15 21:38:45,750 INFO  Successfully generated verify response in HTML
2019-03-15 21:38:45,750 INFO  Successfully processed the response from service
2019-03-15 21:38:57,770 INFO  Setting request parameters for VerifySolution
2019-03-15 21:38:57,770 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:38:57,770 INFO  Starting to parse the user solution
2019-03-15 21:38:57,777 INFO  Displaying user solution
2019-03-15 21:38:57,854 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for employee in self.__employees:\r\n            \r\n            if employee.get_allocated_job() is None:\r\n                employee.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if in_job == len(self.__employees):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n        pass \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:38:57,854 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:38:57,855 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:38:57,855 INFO  Invoking the service to verify the user solution
2019-03-15 21:38:57,855 INFO  Time before invoking service:Fri Mar 15 21:38:57 IST 2019
2019-03-15 21:38:57,855 INFO  Initialising service address for VerifySolution
2019-03-15 21:38:57,856 INFO  Time before invoking service In SUPER:Fri Mar 15 21:38:57 IST 2019
2019-03-15 21:38:59,503 INFO  Time after invoking service In SUPER:Fri Mar 15 21:38:59 IST 2019
2019-03-15 21:38:59,503 INFO  Service responded successfully with required details
2019-03-15 21:38:59,503 INFO  Time after invoking service:Fri Mar 15 21:38:59 IST 2019
2019-03-15 21:38:59,503 INFO  User solution successfully verified
2019-03-15 21:38:59,504 INFO  Processing the response from verify service
2019-03-15 21:38:59,506 INFO  Starting to parse JSON response
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,507 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:38:59,508 INFO  Successfully parsed JSON response
2019-03-15 21:38:59,509 INFO  In the process of generating verify response in HTML
2019-03-15 21:38:59,578 INFO  Successfully generated verify response in HTML
2019-03-15 21:38:59,579 INFO  Successfully processed the response from service
2019-03-15 21:40:23,203 INFO  Setting request parameters for VerifySolution
2019-03-15 21:40:23,203 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:40:23,203 INFO  Starting to parse the user solution
2019-03-15 21:40:23,204 INFO  Displaying user solution
2019-03-15 21:40:23,277 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if(in_job == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n        pass \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:40:23,277 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:40:23,277 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:40:23,277 INFO  Invoking the service to verify the user solution
2019-03-15 21:40:23,278 INFO  Time before invoking service:Fri Mar 15 21:40:23 IST 2019
2019-03-15 21:40:23,278 INFO  Initialising service address for VerifySolution
2019-03-15 21:40:23,278 INFO  Time before invoking service In SUPER:Fri Mar 15 21:40:23 IST 2019
2019-03-15 21:40:24,834 INFO  Time after invoking service In SUPER:Fri Mar 15 21:40:24 IST 2019
2019-03-15 21:40:24,835 INFO  Service responded successfully with required details
2019-03-15 21:40:24,835 INFO  Time after invoking service:Fri Mar 15 21:40:24 IST 2019
2019-03-15 21:40:24,835 INFO  User solution successfully verified
2019-03-15 21:40:24,835 INFO  Processing the response from verify service
2019-03-15 21:40:24,838 INFO  Starting to parse JSON response
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,839 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:24,841 INFO  Successfully parsed JSON response
2019-03-15 21:40:24,842 INFO  In the process of generating verify response in HTML
2019-03-15 21:40:24,904 INFO  Successfully generated verify response in HTML
2019-03-15 21:40:24,904 INFO  Successfully processed the response from service
2019-03-15 21:40:32,972 INFO  Setting request parameters for VerifySolution
2019-03-15 21:40:32,972 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:40:32,972 INFO  Starting to parse the user solution
2019-03-15 21:40:32,973 INFO  Displaying user solution
2019-03-15 21:40:33,043 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if(in_job == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:40:33,043 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:40:33,043 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:40:33,044 INFO  Invoking the service to verify the user solution
2019-03-15 21:40:33,044 INFO  Time before invoking service:Fri Mar 15 21:40:33 IST 2019
2019-03-15 21:40:33,044 INFO  Initialising service address for VerifySolution
2019-03-15 21:40:33,045 INFO  Time before invoking service In SUPER:Fri Mar 15 21:40:33 IST 2019
2019-03-15 21:40:34,662 INFO  Time after invoking service In SUPER:Fri Mar 15 21:40:34 IST 2019
2019-03-15 21:40:34,662 INFO  Service responded successfully with required details
2019-03-15 21:40:34,662 INFO  Time after invoking service:Fri Mar 15 21:40:34 IST 2019
2019-03-15 21:40:34,662 INFO  User solution successfully verified
2019-03-15 21:40:34,663 INFO  Processing the response from verify service
2019-03-15 21:40:34,665 INFO  Starting to parse JSON response
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,666 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:34,668 INFO  Successfully parsed JSON response
2019-03-15 21:40:34,669 INFO  In the process of generating verify response in HTML
2019-03-15 21:40:34,731 INFO  Successfully generated verify response in HTML
2019-03-15 21:40:34,731 INFO  Successfully processed the response from service
2019-03-15 21:40:38,919 INFO  Setting request parameters for VerifySolution
2019-03-15 21:40:38,919 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:40:38,919 INFO  Starting to parse the user solution
2019-03-15 21:40:38,920 INFO  Displaying user solution
2019-03-15 21:40:39,002 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        in_job=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                in_job+=1\r\n            \r\n            if(in_job == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for employe in self.__employees:\r\n            job_status = employe.elapsed_time(no_of_mins)\r\n            \r\n            if employe.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:40:39,002 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:40:39,002 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:40:39,002 INFO  Invoking the service to verify the user solution
2019-03-15 21:40:39,002 INFO  Time before invoking service:Fri Mar 15 21:40:39 IST 2019
2019-03-15 21:40:39,002 INFO  Initialising service address for VerifySolution
2019-03-15 21:40:39,003 INFO  Time before invoking service In SUPER:Fri Mar 15 21:40:39 IST 2019
2019-03-15 21:40:40,403 INFO  Time after invoking service In SUPER:Fri Mar 15 21:40:40 IST 2019
2019-03-15 21:40:40,404 INFO  Service responded successfully with required details
2019-03-15 21:40:40,404 INFO  Time after invoking service:Fri Mar 15 21:40:40 IST 2019
2019-03-15 21:40:40,404 INFO  User solution successfully verified
2019-03-15 21:40:40,405 INFO  Processing the response from verify service
2019-03-15 21:40:40,407 INFO  Starting to parse JSON response
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,408 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,409 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,409 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,409 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:40:40,411 INFO  Successfully parsed JSON response
2019-03-15 21:40:40,412 INFO  In the process of generating verify response in HTML
2019-03-15 21:40:40,475 INFO  Successfully generated verify response in HTML
2019-03-15 21:40:40,476 INFO  Successfully processed the response from service
2019-03-15 21:41:51,225 INFO  Setting request parameters for VerifySolution
2019-03-15 21:41:51,225 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:41:51,225 INFO  Starting to parse the user solution
2019-03-15 21:41:51,225 INFO  Displaying user solution
2019-03-15 21:41:51,303 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        count=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                count+=1\r\n            \r\n            if(count == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for i in self.__employees:\r\n            job_status = i.elapsed_time(no_of_mins)\r\n            \r\n            if i.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:41:51,304 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:41:51,305 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:41:51,305 INFO  Invoking the service to verify the user solution
2019-03-15 21:41:51,305 INFO  Time before invoking service:Fri Mar 15 21:41:51 IST 2019
2019-03-15 21:41:51,305 INFO  Initialising service address for VerifySolution
2019-03-15 21:41:51,305 INFO  Time before invoking service In SUPER:Fri Mar 15 21:41:51 IST 2019
2019-03-15 21:41:53,029 INFO  Time after invoking service In SUPER:Fri Mar 15 21:41:53 IST 2019
2019-03-15 21:41:53,029 INFO  Service responded successfully with required details
2019-03-15 21:41:53,029 INFO  Time after invoking service:Fri Mar 15 21:41:53 IST 2019
2019-03-15 21:41:53,030 INFO  User solution successfully verified
2019-03-15 21:41:53,030 INFO  Processing the response from verify service
2019-03-15 21:41:53,036 INFO  Starting to parse JSON response
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,038 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:53,040 INFO  Successfully parsed JSON response
2019-03-15 21:41:53,041 INFO  In the process of generating verify response in HTML
2019-03-15 21:41:53,114 INFO  Successfully generated verify response in HTML
2019-03-15 21:41:53,114 INFO  Successfully processed the response from service
2019-03-15 21:41:56,969 INFO  Setting request parameters for VerifySolution
2019-03-15 21:41:56,969 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:41:56,969 INFO  Starting to parse the user solution
2019-03-15 21:41:56,970 INFO  Displaying user solution
2019-03-15 21:41:57,049 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if self.__time_elapsed >= self.__time_needed:\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed():\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        count=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                count+=1\r\n            \r\n            if(count == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for i in self.__employees:\r\n            job_status = i.elapsed_time(no_of_mins)\r\n            \r\n            if i.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:41:57,050 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:41:57,050 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:41:57,050 INFO  Invoking the service to verify the user solution
2019-03-15 21:41:57,050 INFO  Time before invoking service:Fri Mar 15 21:41:57 IST 2019
2019-03-15 21:41:57,050 INFO  Initialising service address for VerifySolution
2019-03-15 21:41:57,051 INFO  Time before invoking service In SUPER:Fri Mar 15 21:41:57 IST 2019
2019-03-15 21:41:58,407 INFO  Time after invoking service In SUPER:Fri Mar 15 21:41:58 IST 2019
2019-03-15 21:41:58,407 INFO  Service responded successfully with required details
2019-03-15 21:41:58,408 INFO  Time after invoking service:Fri Mar 15 21:41:58 IST 2019
2019-03-15 21:41:58,408 INFO  User solution successfully verified
2019-03-15 21:41:58,408 INFO  Processing the response from verify service
2019-03-15 21:41:58,410 INFO  Starting to parse JSON response
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,411 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:41:58,413 INFO  Successfully parsed JSON response
2019-03-15 21:41:58,414 INFO  In the process of generating verify response in HTML
2019-03-15 21:41:58,484 INFO  Successfully generated verify response in HTML
2019-03-15 21:41:58,484 INFO  Successfully processed the response from service
2019-03-15 21:42:55,288 INFO  Setting request parameters for VerifySolution
2019-03-15 21:42:55,288 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:42:55,288 INFO  Starting to parse the user solution
2019-03-15 21:42:55,289 INFO  Displaying user solution
2019-03-15 21:42:55,365 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if(self.__time_elapsed >= self.__time_needed):\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if(self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed()):\r\n            ret = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return ret\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        count=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                count+=1\r\n            \r\n            if(count == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for i in self.__employees:\r\n            job_status = i.elapsed_time(no_of_mins)\r\n            \r\n            if i.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:42:55,366 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:42:55,366 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:42:55,366 INFO  Invoking the service to verify the user solution
2019-03-15 21:42:55,367 INFO  Time before invoking service:Fri Mar 15 21:42:55 IST 2019
2019-03-15 21:42:55,367 INFO  Initialising service address for VerifySolution
2019-03-15 21:42:55,367 INFO  Time before invoking service In SUPER:Fri Mar 15 21:42:55 IST 2019
2019-03-15 21:42:56,883 INFO  Time after invoking service In SUPER:Fri Mar 15 21:42:56 IST 2019
2019-03-15 21:42:56,883 INFO  Service responded successfully with required details
2019-03-15 21:42:56,884 INFO  Time after invoking service:Fri Mar 15 21:42:56 IST 2019
2019-03-15 21:42:56,884 INFO  User solution successfully verified
2019-03-15 21:42:56,884 INFO  Processing the response from verify service
2019-03-15 21:42:56,888 INFO  Starting to parse JSON response
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,890 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,891 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:42:56,893 INFO  Successfully parsed JSON response
2019-03-15 21:42:56,894 INFO  In the process of generating verify response in HTML
2019-03-15 21:42:56,960 INFO  Successfully generated verify response in HTML
2019-03-15 21:42:56,961 INFO  Successfully processed the response from service
2019-03-15 21:43:47,890 INFO  Setting request parameters for VerifySolution
2019-03-15 21:43:47,890 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:43:47,890 INFO  Starting to parse the user solution
2019-03-15 21:43:47,890 INFO  Displaying user solution
2019-03-15 21:43:47,956 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if(self.__time_elapsed >= self.__time_needed):\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if(self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed()):\r\n            new = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return new\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        count=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                count+=1\r\n            \r\n            if(count == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for i in self.__employees:\r\n            job_status = i.elapsed_time(no_of_mins)\r\n            \r\n            if i.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:43:47,956 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:43:47,956 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:43:47,956 INFO  Invoking the service to verify the user solution
2019-03-15 21:43:47,957 INFO  Time before invoking service:Fri Mar 15 21:43:47 IST 2019
2019-03-15 21:43:47,957 INFO  Initialising service address for VerifySolution
2019-03-15 21:43:47,957 INFO  Time before invoking service In SUPER:Fri Mar 15 21:43:47 IST 2019
2019-03-15 21:43:49,581 INFO  Time after invoking service In SUPER:Fri Mar 15 21:43:49 IST 2019
2019-03-15 21:43:49,582 INFO  Service responded successfully with required details
2019-03-15 21:43:49,582 INFO  Time after invoking service:Fri Mar 15 21:43:49 IST 2019
2019-03-15 21:43:49,582 INFO  User solution successfully verified
2019-03-15 21:43:49,582 INFO  Processing the response from verify service
2019-03-15 21:43:49,584 INFO  Starting to parse JSON response
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,586 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:43:49,587 INFO  Successfully parsed JSON response
2019-03-15 21:43:49,588 INFO  In the process of generating verify response in HTML
2019-03-15 21:43:49,653 INFO  Successfully generated verify response in HTML
2019-03-15 21:43:49,653 INFO  Successfully processed the response from service
2019-03-15 21:44:03,212 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:44:03,213 INFO  Displaying user solution
2019-03-15 21:44:03,221 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:44:03,222 INFO  Invoking the service to submit the user solution
2019-03-15 21:44:03,222 INFO  Initialising service address for Submit
2019-03-15 21:44:03,222 INFO  Time before invoking service In SUPER:Fri Mar 15 21:44:03 IST 2019
2019-03-15 21:44:03,551 INFO  Time after invoking service In SUPER:Fri Mar 15 21:44:03 IST 2019
2019-03-15 21:44:03,552 INFO  Service responded successfully with required details
2019-03-15 21:44:03,552 INFO  User solution successfully submitted
2019-03-15 21:44:03,552 INFO  Displaying submission status
2019-03-15 21:44:03,552 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:44:05,781 INFO  Initiating to process and prepare Input for the submit service
2019-03-15 21:44:05,781 INFO  Displaying user solution
2019-03-15 21:44:05,790 INFO  Successfully processed and prepared the input for the submit service
2019-03-15 21:44:05,790 INFO  Invoking the service to submit the user solution
2019-03-15 21:44:05,790 INFO  Initialising service address for Submit
2019-03-15 21:44:05,791 INFO  Time before invoking service In SUPER:Fri Mar 15 21:44:05 IST 2019
2019-03-15 21:44:05,973 INFO  Time after invoking service In SUPER:Fri Mar 15 21:44:05 IST 2019
2019-03-15 21:44:05,974 INFO  Service responded successfully with required details
2019-03-15 21:44:05,974 INFO  User solution successfully submitted
2019-03-15 21:44:05,974 INFO  Displaying submission status
2019-03-15 21:44:05,974 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-15 21:44:08,768 INFO  Setting request parameters for VerifySolution
2019-03-15 21:44:08,768 INFO  Initiating to process and prepare Input for the verify service
2019-03-15 21:44:08,768 INFO  Starting to parse the user solution
2019-03-15 21:44:08,768 INFO  Displaying user solution
2019-03-15 21:44:08,838 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-15\r\n'''\r\nCreated on Mar 15, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom src.DataStructures import Queue\r\nclass Job:\r\n    def __init__(self,name,time_needed):\r\n        self.__name = name\r\n        self.__time_needed = time_needed  \r\n        self.__time_elapsed = 0 \r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_time_needed(self):\r\n        return self.__time_needed\r\n\r\n\r\n    def get_time_elapsed(self):\r\n        return self.__time_elapsed\r\n\r\n\r\n    def __str__(self):\r\n        return self.__name+'  '+str(self.__time_needed)\r\n        \r\n    def elapsed_time(self,no_of_mins):\r\n        self.__time_elapsed += no_of_mins\r\n        \r\n        if(self.__time_elapsed >= self.__time_needed):\r\n            return True\r\n        \r\n        return False\r\n    \r\nclass Employee:\r\n    def __init__(self,name):\r\n        self.__name = name \r\n        self.__allocated_job = None\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n\r\n    def get_allocated_job(self):\r\n        return self.__allocated_job\r\n\r\n\r\n    def set_allocated_job(self, allocated_job):\r\n        self.__allocated_job = allocated_job\r\n\r\n\r\n    def elapsed_time(self,no_of_mins):\r\n        self.__allocated_job.elapsed_time(no_of_mins)\r\n        \r\n        if(self.__allocated_job.get_time_needed() <= self.__allocated_job.get_time_elapsed()):\r\n            new = self.__allocated_job\r\n            self.__allocated_job = None\r\n            return new\r\n        \r\n        else:\r\n            return None\r\n   \r\n\r\nclass Company:\r\n    def __init__(self,emp_list): \r\n        self.__employees = emp_list\r\n        self.__pending_jobs = Queue(10)\r\n\r\n    def get_employees(self):\r\n        return self.__employees\r\n\r\n\r\n    def get_pending_jobs(self):\r\n        return self.__pending_jobs\r\n\r\n        \r\n    def allocate_new_job(self,job):\r\n        count=0\r\n        \r\n        for i in self.__employees:\r\n            \r\n            if(i.get_allocated_job() is None):\r\n                i.set_allocated_job(job)\r\n                break\r\n            \r\n            else:\r\n                count+=1\r\n            \r\n            if(count == len(self.__employees)):\r\n                self.__pending_jobs.enqueue(job)\r\n            \r\n        \r\n       \r\n    def elapsed_time(self,no_of_mins):\r\n        list1 = []\r\n        \r\n        for i in self.__employees:\r\n            job_status = i.elapsed_time(no_of_mins)\r\n            \r\n            if i.get_allocated_job() is None:\r\n                self.allocate_new_job(self.get_pending_jobs().dequeue())\r\n            \r\n            if job_status is not None:\r\n                list1.append(job_status)\r\n        \r\n        if len(list1 )!=0:\r\n            return list1 \r\n        else:\r\n            return None\r\n\r\n#Implement Job, Employee and Company classes here\r\n\r\n#Change the values and test your programH\r\n\r\nemp1=Employee(\"Ken\")\r\nemp2=Employee(\"Henry\")\r\nemp3=Employee(\"Jack\")\r\nemp4=Employee(\"Hen\")\r\nemp5=Employee(\"Jill\")\r\nemp_list=[emp1,emp2,emp3,emp4,emp5]\r\ncompany=Company(emp_list)\r\njob1=Job(\"job1\",50)\r\njob2=Job(\"job2\",45)\r\njob3=Job(\"job3\",35)\r\njob4=Job(\"job4\",400)\r\njob5=Job(\"job5\",30)\r\njob6=Job(\"job6\",30)\r\njob7=Job(\"job7\",50)\r\njob8=Job(\"job8\",25)\r\ncompany.allocate_new_job(job1)\r\ncompany.allocate_new_job(job2)\r\ncompany.allocate_new_job(job3)\r\ncompany.allocate_new_job(job4)\r\ncompany.allocate_new_job(job5)\r\ncompany.allocate_new_job(job6)\r\ncompany.allocate_new_job(job7)\r\ncompany.allocate_new_job(job8)\r\nprint(\"Initial allocation:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"is allocated\",emp.get_allocated_job().get_name())\r\nprint()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(30)\r\n'''print(\"Completed Jobs :\")\r\nfor job in completed_jobs:\r\n    print(job.name)'''\r\n\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\ncompleted_jobs=company.elapsed_time(10)\r\nprint(\"After completion:\")\r\nfor emp in company.get_employees():\r\n    print(emp.get_name(),\"needs\", emp.get_allocated_job().get_time_needed()-emp.get_allocated_job().get_time_elapsed(),\"more minutes for\",emp.get_allocated_job().get_name())\r\n    print()\r\nprint(\"Pending Jobs:\")\r\ncompany.get_pending_jobs().display()\r\n","asgnmtId":"15","SolutionFileName":"Assign15.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-15 21:44:08,838 INFO  Successfully processed and prepared the input for the verify service
2019-03-15 21:44:08,839 INFO  Successfully set the request parameters for VerifySolution
2019-03-15 21:44:08,839 INFO  Invoking the service to verify the user solution
2019-03-15 21:44:08,839 INFO  Time before invoking service:Fri Mar 15 21:44:08 IST 2019
2019-03-15 21:44:08,839 INFO  Initialising service address for VerifySolution
2019-03-15 21:44:08,841 INFO  Time before invoking service In SUPER:Fri Mar 15 21:44:08 IST 2019
2019-03-15 21:44:10,347 INFO  Time after invoking service In SUPER:Fri Mar 15 21:44:10 IST 2019
2019-03-15 21:44:10,347 INFO  Service responded successfully with required details
2019-03-15 21:44:10,347 INFO  Time after invoking service:Fri Mar 15 21:44:10 IST 2019
2019-03-15 21:44:10,348 INFO  User solution successfully verified
2019-03-15 21:44:10,348 INFO  Processing the response from verify service
2019-03-15 21:44:10,349 INFO  Starting to parse JSON response
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,350 ERROR Keys used to parse test result JSON might be incorrect
2019-03-15 21:44:10,352 INFO  Successfully parsed JSON response
2019-03-15 21:44:10,353 INFO  In the process of generating verify response in HTML
2019-03-15 21:44:10,422 INFO  Successfully generated verify response in HTML
2019-03-15 21:44:10,422 INFO  Successfully processed the response from service
