2019-03-14 09:18:19,476 INFO  Loading Baseframework Plugin
2019-03-14 09:18:19,476 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-14 09:18:19,507 INFO  Loading the Menu - HandsOn
2019-03-14 09:18:19,757 INFO  Successfully loaded the Menu - HandsOn
2019-03-14 14:16:24,197 INFO  Loading Programming Assignment Plugin
2019-03-14 14:16:24,775 INFO  Setting request parameters for VerifySolution
2019-03-14 14:16:24,775 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:16:24,775 INFO  Starting to parse the user solution
2019-03-14 14:16:24,775 INFO  Displaying user solution
2019-03-14 14:16:24,900 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom cx_Oracle import NUMBER\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum=0\r\n    # Write your logic here\r\n    list1 = []\r\n    list2 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum+=list1[i]    \r\n    return sum\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:16:24,900 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:16:24,900 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:16:24,900 INFO  Invoking the service to verify the user solution
2019-03-14 14:16:24,900 INFO  Time before invoking service:Thu Mar 14 14:16:24 IST 2019
2019-03-14 14:16:24,900 INFO  Initialising service address for VerifySolution
2019-03-14 14:16:24,900 INFO  Time before invoking service In SUPER:Thu Mar 14 14:16:24 IST 2019
2019-03-14 14:16:26,042 INFO  Time after invoking service In SUPER:Thu Mar 14 14:16:26 IST 2019
2019-03-14 14:16:26,042 INFO  Service responded successfully with required details
2019-03-14 14:16:26,042 INFO  Time after invoking service:Thu Mar 14 14:16:26 IST 2019
2019-03-14 14:16:26,042 INFO  User solution successfully verified
2019-03-14 14:16:26,042 INFO  Processing the response from verify service
2019-03-14 14:16:26,057 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 14:16:36,871 INFO  Setting request parameters for VerifySolution
2019-03-14 14:16:36,871 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:16:36,871 INFO  Starting to parse the user solution
2019-03-14 14:16:36,886 INFO  Displaying user solution
2019-03-14 14:16:36,917 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nfrom cx_Oracle import NUMBER\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum=0\r\n    # Write your logic here\r\n    list1 = []\r\n    list2 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum+=list1[i]    \r\n    return sum\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:16:36,917 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:16:36,917 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:16:36,917 INFO  Invoking the service to verify the user solution
2019-03-14 14:16:36,917 INFO  Time before invoking service:Thu Mar 14 14:16:36 IST 2019
2019-03-14 14:16:36,917 INFO  Initialising service address for VerifySolution
2019-03-14 14:16:36,917 INFO  Time before invoking service In SUPER:Thu Mar 14 14:16:36 IST 2019
2019-03-14 14:16:37,855 INFO  Time after invoking service In SUPER:Thu Mar 14 14:16:37 IST 2019
2019-03-14 14:16:37,855 INFO  Service responded successfully with required details
2019-03-14 14:16:37,855 INFO  Time after invoking service:Thu Mar 14 14:16:37 IST 2019
2019-03-14 14:16:37,855 INFO  User solution successfully verified
2019-03-14 14:16:37,855 INFO  Processing the response from verify service
2019-03-14 14:16:37,855 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 14:17:04,097 INFO  Setting request parameters for VerifySolution
2019-03-14 14:17:04,097 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:17:04,097 INFO  Starting to parse the user solution
2019-03-14 14:17:04,097 INFO  Displaying user solution
2019-03-14 14:17:04,128 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum=0\r\n    # Write your logic here\r\n    list1 = []\r\n    list2 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum+=list1[i]    \r\n    return sum\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:17:04,128 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:17:04,128 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:17:04,128 INFO  Invoking the service to verify the user solution
2019-03-14 14:17:04,128 INFO  Time before invoking service:Thu Mar 14 14:17:04 IST 2019
2019-03-14 14:17:04,128 INFO  Initialising service address for VerifySolution
2019-03-14 14:17:04,128 INFO  Time before invoking service In SUPER:Thu Mar 14 14:17:04 IST 2019
2019-03-14 14:17:05,175 INFO  Time after invoking service In SUPER:Thu Mar 14 14:17:05 IST 2019
2019-03-14 14:17:05,175 INFO  Service responded successfully with required details
2019-03-14 14:17:05,175 INFO  Time after invoking service:Thu Mar 14 14:17:05 IST 2019
2019-03-14 14:17:05,175 INFO  User solution successfully verified
2019-03-14 14:17:05,175 INFO  Processing the response from verify service
2019-03-14 14:17:05,175 INFO  Starting to parse JSON response
2019-03-14 14:17:05,175 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:17:05,175 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:17:05,175 INFO  Successfully parsed JSON response
2019-03-14 14:17:05,175 INFO  In the process of generating verify response in HTML
2019-03-14 14:17:05,550 INFO  Successfully generated verify response in HTML
2019-03-14 14:17:05,550 INFO  Successfully processed the response from service
2019-03-14 14:17:29,368 INFO  Setting request parameters for VerifySolution
2019-03-14 14:17:29,368 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:17:29,368 INFO  Starting to parse the user solution
2019-03-14 14:17:29,368 INFO  Displaying user solution
2019-03-14 14:17:29,400 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum=0\r\n    # Write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum+=list1[i]    \r\n    return sum\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:17:29,400 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:17:29,400 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:17:29,400 INFO  Invoking the service to verify the user solution
2019-03-14 14:17:29,400 INFO  Time before invoking service:Thu Mar 14 14:17:29 IST 2019
2019-03-14 14:17:29,400 INFO  Initialising service address for VerifySolution
2019-03-14 14:17:29,400 INFO  Time before invoking service In SUPER:Thu Mar 14 14:17:29 IST 2019
2019-03-14 14:17:33,509 INFO  Time after invoking service In SUPER:Thu Mar 14 14:17:33 IST 2019
2019-03-14 14:17:33,509 INFO  Service responded successfully with required details
2019-03-14 14:17:33,509 INFO  Time after invoking service:Thu Mar 14 14:17:33 IST 2019
2019-03-14 14:17:33,509 INFO  User solution successfully verified
2019-03-14 14:17:33,509 INFO  Processing the response from verify service
2019-03-14 14:17:33,509 INFO  Starting to parse JSON response
2019-03-14 14:17:33,509 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:17:33,509 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:17:33,509 INFO  Successfully parsed JSON response
2019-03-14 14:17:33,525 INFO  In the process of generating verify response in HTML
2019-03-14 14:17:33,650 INFO  Successfully generated verify response in HTML
2019-03-14 14:17:33,650 INFO  Successfully processed the response from service
2019-03-14 14:18:09,733 INFO  Setting request parameters for VerifySolution
2019-03-14 14:18:09,733 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:18:09,733 INFO  Starting to parse the user solution
2019-03-14 14:18:09,733 INFO  Displaying user solution
2019-03-14 14:18:09,765 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum=0\r\n    # Write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum+=list1[i]    \r\n    return sum\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:18:09,765 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:18:09,765 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:18:09,765 INFO  Invoking the service to verify the user solution
2019-03-14 14:18:09,765 INFO  Time before invoking service:Thu Mar 14 14:18:09 IST 2019
2019-03-14 14:18:09,765 INFO  Initialising service address for VerifySolution
2019-03-14 14:18:09,765 INFO  Time before invoking service In SUPER:Thu Mar 14 14:18:09 IST 2019
2019-03-14 14:18:10,733 INFO  Time after invoking service In SUPER:Thu Mar 14 14:18:10 IST 2019
2019-03-14 14:18:10,733 INFO  Service responded successfully with required details
2019-03-14 14:18:10,733 INFO  Time after invoking service:Thu Mar 14 14:18:10 IST 2019
2019-03-14 14:18:10,733 INFO  User solution successfully verified
2019-03-14 14:18:10,733 INFO  Processing the response from verify service
2019-03-14 14:18:10,733 INFO  Starting to parse JSON response
2019-03-14 14:18:10,733 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:10,733 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:10,749 INFO  Successfully parsed JSON response
2019-03-14 14:18:10,749 INFO  In the process of generating verify response in HTML
2019-03-14 14:18:10,827 INFO  Successfully generated verify response in HTML
2019-03-14 14:18:10,827 INFO  Successfully processed the response from service
2019-03-14 14:18:20,120 INFO  Setting request parameters for VerifySolution
2019-03-14 14:18:20,120 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:18:20,120 INFO  Starting to parse the user solution
2019-03-14 14:18:20,120 INFO  Displaying user solution
2019-03-14 14:18:20,151 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum1=0\r\n    # Write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum1+=list1[i]    \r\n    return sum1\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:18:20,151 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:18:20,151 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:18:20,151 INFO  Invoking the service to verify the user solution
2019-03-14 14:18:20,151 INFO  Time before invoking service:Thu Mar 14 14:18:20 IST 2019
2019-03-14 14:18:20,151 INFO  Initialising service address for VerifySolution
2019-03-14 14:18:20,151 INFO  Time before invoking service In SUPER:Thu Mar 14 14:18:20 IST 2019
2019-03-14 14:18:21,214 INFO  Time after invoking service In SUPER:Thu Mar 14 14:18:21 IST 2019
2019-03-14 14:18:21,229 INFO  Service responded successfully with required details
2019-03-14 14:18:21,229 INFO  Time after invoking service:Thu Mar 14 14:18:21 IST 2019
2019-03-14 14:18:21,229 INFO  User solution successfully verified
2019-03-14 14:18:21,229 INFO  Processing the response from verify service
2019-03-14 14:18:21,229 INFO  Starting to parse JSON response
2019-03-14 14:18:21,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:21,229 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:21,229 INFO  Successfully parsed JSON response
2019-03-14 14:18:21,229 INFO  In the process of generating verify response in HTML
2019-03-14 14:18:21,370 INFO  Successfully generated verify response in HTML
2019-03-14 14:18:21,370 INFO  Successfully processed the response from service
2019-03-14 14:18:42,594 INFO  Setting request parameters for VerifySolution
2019-03-14 14:18:42,594 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:18:42,594 INFO  Starting to parse the user solution
2019-03-14 14:18:42,594 INFO  Displaying user solution
2019-03-14 14:18:42,626 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum1=0\r\n    # Write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum1+=list1[i]    \r\n    return sum1\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))\r\n                                  \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:18:42,626 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:18:42,626 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:18:42,626 INFO  Invoking the service to verify the user solution
2019-03-14 14:18:42,626 INFO  Time before invoking service:Thu Mar 14 14:18:42 IST 2019
2019-03-14 14:18:42,626 INFO  Initialising service address for VerifySolution
2019-03-14 14:18:42,626 INFO  Time before invoking service In SUPER:Thu Mar 14 14:18:42 IST 2019
2019-03-14 14:18:43,657 INFO  Time after invoking service In SUPER:Thu Mar 14 14:18:43 IST 2019
2019-03-14 14:18:43,657 INFO  Service responded successfully with required details
2019-03-14 14:18:43,657 INFO  Time after invoking service:Thu Mar 14 14:18:43 IST 2019
2019-03-14 14:18:43,657 INFO  User solution successfully verified
2019-03-14 14:18:43,657 INFO  Processing the response from verify service
2019-03-14 14:18:43,657 INFO  Starting to parse JSON response
2019-03-14 14:18:43,657 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:43,657 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:18:43,657 INFO  Successfully parsed JSON response
2019-03-14 14:18:43,657 INFO  In the process of generating verify response in HTML
2019-03-14 14:18:43,782 INFO  Successfully generated verify response in HTML
2019-03-14 14:18:43,782 INFO  Successfully processed the response from service
2019-03-14 14:18:48,186 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 14:18:48,186 INFO  Displaying user solution
2019-03-14 14:18:48,202 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 14:18:48,202 INFO  Invoking the service to submit the user solution
2019-03-14 14:18:48,202 INFO  Initialising service address for Submit
2019-03-14 14:18:48,202 INFO  Time before invoking service In SUPER:Thu Mar 14 14:18:48 IST 2019
2019-03-14 14:18:48,607 INFO  Time after invoking service In SUPER:Thu Mar 14 14:18:48 IST 2019
2019-03-14 14:18:48,607 INFO  Service responded successfully with required details
2019-03-14 14:18:48,607 INFO  User solution successfully submitted
2019-03-14 14:18:48,607 INFO  Displaying submission status
2019-03-14 14:18:48,607 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 14:18:51,279 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 14:18:51,279 INFO  Displaying user solution
2019-03-14 14:18:51,294 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 14:18:51,294 INFO  Invoking the service to submit the user solution
2019-03-14 14:18:51,294 INFO  Initialising service address for Submit
2019-03-14 14:18:51,294 INFO  Time before invoking service In SUPER:Thu Mar 14 14:18:51 IST 2019
2019-03-14 14:18:51,544 INFO  Time after invoking service In SUPER:Thu Mar 14 14:18:51 IST 2019
2019-03-14 14:18:51,544 INFO  Service responded successfully with required details
2019-03-14 14:18:51,544 INFO  User solution successfully submitted
2019-03-14 14:18:51,544 INFO  Displaying submission status
2019-03-14 14:18:51,544 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 14:19:01,192 INFO  Setting request parameters for VerifySolution
2019-03-14 14:19:01,192 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:19:01,192 INFO  Starting to parse the user solution
2019-03-14 14:19:01,192 INFO  Displaying user solution
2019-03-14 14:19:01,239 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-3\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\ndef find_sum(number_list):\r\n    sum1=0\r\n    # Write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    for i in range(0,len(list1)):\r\n        if(i%2==0):\r\n            sum1+=list1[i]    \r\n    return sum1\r\n    \r\n\r\nnumber_list=LinkedList()\r\nnumber_list.add(10)\r\nnumber_list.add(20)\r\nnumber_list.add(30)\r\nnumber_list.add(40)\r\nnumber_list.add(50)\r\nnumber_list.add(60)\r\nnumber_list.add(70)\r\nnumber_list.add(80)\r\nnumber_list.add(90)\r\nnumber_list.add(100)\r\nnumber_list.add(110)\r\n\r\nprint(find_sum(number_list))                                \r\n","asgnmtId":"3","SolutionFileName":"Excer3.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:19:01,239 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:19:01,239 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:19:01,239 INFO  Invoking the service to verify the user solution
2019-03-14 14:19:01,239 INFO  Time before invoking service:Thu Mar 14 14:19:01 IST 2019
2019-03-14 14:19:01,239 INFO  Initialising service address for VerifySolution
2019-03-14 14:19:01,239 INFO  Time before invoking service In SUPER:Thu Mar 14 14:19:01 IST 2019
2019-03-14 14:19:02,145 INFO  Time after invoking service In SUPER:Thu Mar 14 14:19:02 IST 2019
2019-03-14 14:19:02,145 INFO  Service responded successfully with required details
2019-03-14 14:19:02,161 INFO  Time after invoking service:Thu Mar 14 14:19:02 IST 2019
2019-03-14 14:19:02,161 INFO  User solution successfully verified
2019-03-14 14:19:02,161 INFO  Processing the response from verify service
2019-03-14 14:19:02,161 INFO  Starting to parse JSON response
2019-03-14 14:19:02,161 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:19:02,161 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:19:02,161 INFO  Successfully parsed JSON response
2019-03-14 14:19:02,161 INFO  In the process of generating verify response in HTML
2019-03-14 14:19:02,239 INFO  Successfully generated verify response in HTML
2019-03-14 14:19:02,239 INFO  Successfully processed the response from service
2019-03-14 14:19:06,117 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 14:19:06,132 INFO  Displaying user solution
2019-03-14 14:19:06,132 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 14:19:06,132 INFO  Invoking the service to submit the user solution
2019-03-14 14:19:06,132 INFO  Initialising service address for Submit
2019-03-14 14:19:06,132 INFO  Time before invoking service In SUPER:Thu Mar 14 14:19:06 IST 2019
2019-03-14 14:19:06,351 INFO  Time after invoking service In SUPER:Thu Mar 14 14:19:06 IST 2019
2019-03-14 14:19:06,351 INFO  Service responded successfully with required details
2019-03-14 14:19:06,351 INFO  User solution successfully submitted
2019-03-14 14:19:06,351 INFO  Displaying submission status
2019-03-14 14:19:06,351 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 14:20:11,835 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-14 14:20:15,960 INFO  Setting request parameters for VerifySolution
2019-03-14 14:20:15,960 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:20:15,960 INFO  Starting to parse the user solution
2019-03-14 14:20:15,960 INFO  Displaying user solution
2019-03-14 14:20:16,007 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()\r\n                                  \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:20:16,007 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:20:16,007 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:20:16,007 INFO  Invoking the service to verify the user solution
2019-03-14 14:20:16,007 INFO  Time before invoking service:Thu Mar 14 14:20:16 IST 2019
2019-03-14 14:20:16,007 INFO  Initialising service address for VerifySolution
2019-03-14 14:20:16,007 INFO  Time before invoking service In SUPER:Thu Mar 14 14:20:16 IST 2019
2019-03-14 14:20:16,960 INFO  Time after invoking service In SUPER:Thu Mar 14 14:20:16 IST 2019
2019-03-14 14:20:16,960 INFO  Service responded successfully with required details
2019-03-14 14:20:16,960 INFO  Time after invoking service:Thu Mar 14 14:20:16 IST 2019
2019-03-14 14:20:16,960 INFO  User solution successfully verified
2019-03-14 14:20:16,960 INFO  Processing the response from verify service
2019-03-14 14:20:16,960 INFO  Starting to parse JSON response
2019-03-14 14:20:16,960 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:20:16,960 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:20:16,960 INFO  Successfully parsed JSON response
2019-03-14 14:20:16,960 INFO  In the process of generating verify response in HTML
2019-03-14 14:20:17,038 INFO  Successfully generated verify response in HTML
2019-03-14 14:20:17,038 INFO  Successfully processed the response from service
2019-03-14 14:30:47,928 INFO  Setting request parameters for VerifySolution
2019-03-14 14:30:47,928 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:30:47,928 INFO  Starting to parse the user solution
2019-03-14 14:30:47,928 INFO  Displaying user solution
2019-03-14 14:30:47,991 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                                  \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:30:47,991 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:30:47,991 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:30:47,991 INFO  Invoking the service to verify the user solution
2019-03-14 14:30:47,991 INFO  Time before invoking service:Thu Mar 14 14:30:47 IST 2019
2019-03-14 14:30:47,991 INFO  Initialising service address for VerifySolution
2019-03-14 14:30:47,991 INFO  Time before invoking service In SUPER:Thu Mar 14 14:30:47 IST 2019
2019-03-14 14:30:49,147 INFO  Time after invoking service In SUPER:Thu Mar 14 14:30:49 IST 2019
2019-03-14 14:30:49,147 INFO  Service responded successfully with required details
2019-03-14 14:30:49,147 INFO  Time after invoking service:Thu Mar 14 14:30:49 IST 2019
2019-03-14 14:30:49,147 INFO  User solution successfully verified
2019-03-14 14:30:49,147 INFO  Processing the response from verify service
2019-03-14 14:30:49,147 INFO  Starting to parse JSON response
2019-03-14 14:30:49,163 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:30:49,163 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:30:49,163 INFO  Successfully parsed JSON response
2019-03-14 14:30:49,163 INFO  In the process of generating verify response in HTML
2019-03-14 14:30:49,257 INFO  Successfully generated verify response in HTML
2019-03-14 14:30:49,257 INFO  Successfully processed the response from service
2019-03-14 14:30:54,308 INFO  Setting request parameters for VerifySolution
2019-03-14 14:30:54,308 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:30:54,308 INFO  Starting to parse the user solution
2019-03-14 14:30:54,308 INFO  Displaying user solution
2019-03-14 14:30:54,371 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    \r\n\r\n    return list1\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                                  \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:30:54,371 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:30:54,371 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:30:54,371 INFO  Invoking the service to verify the user solution
2019-03-14 14:30:54,371 INFO  Time before invoking service:Thu Mar 14 14:30:54 IST 2019
2019-03-14 14:30:54,371 INFO  Initialising service address for VerifySolution
2019-03-14 14:30:54,371 INFO  Time before invoking service In SUPER:Thu Mar 14 14:30:54 IST 2019
2019-03-14 14:30:55,699 INFO  Time after invoking service In SUPER:Thu Mar 14 14:30:55 IST 2019
2019-03-14 14:30:55,699 INFO  Service responded successfully with required details
2019-03-14 14:30:55,715 INFO  Time after invoking service:Thu Mar 14 14:30:55 IST 2019
2019-03-14 14:30:55,715 INFO  User solution successfully verified
2019-03-14 14:30:55,715 INFO  Processing the response from verify service
2019-03-14 14:30:55,715 INFO  Starting to parse JSON response
2019-03-14 14:30:55,715 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:30:55,715 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:30:55,715 INFO  Successfully parsed JSON response
2019-03-14 14:30:55,715 INFO  In the process of generating verify response in HTML
2019-03-14 14:30:55,824 INFO  Successfully generated verify response in HTML
2019-03-14 14:30:55,824 INFO  Successfully processed the response from service
2019-03-14 14:32:54,293 INFO  Setting request parameters for VerifySolution
2019-03-14 14:32:54,293 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:32:54,293 INFO  Starting to parse the user solution
2019-03-14 14:32:54,293 INFO  Displaying user solution
2019-03-14 14:32:54,340 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                                  \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:32:54,340 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:32:54,340 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:32:54,340 INFO  Invoking the service to verify the user solution
2019-03-14 14:32:54,340 INFO  Time before invoking service:Thu Mar 14 14:32:54 IST 2019
2019-03-14 14:32:54,340 INFO  Initialising service address for VerifySolution
2019-03-14 14:32:54,340 INFO  Time before invoking service In SUPER:Thu Mar 14 14:32:54 IST 2019
2019-03-14 14:32:55,387 INFO  Time after invoking service In SUPER:Thu Mar 14 14:32:55 IST 2019
2019-03-14 14:32:55,387 INFO  Service responded successfully with required details
2019-03-14 14:32:55,387 INFO  Time after invoking service:Thu Mar 14 14:32:55 IST 2019
2019-03-14 14:32:55,402 INFO  User solution successfully verified
2019-03-14 14:32:55,402 INFO  Processing the response from verify service
2019-03-14 14:32:55,402 INFO  Starting to parse JSON response
2019-03-14 14:32:55,402 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:32:55,402 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:32:55,402 INFO  Successfully parsed JSON response
2019-03-14 14:32:55,402 INFO  In the process of generating verify response in HTML
2019-03-14 14:32:55,480 INFO  Successfully generated verify response in HTML
2019-03-14 14:32:55,480 INFO  Successfully processed the response from service
2019-03-14 14:36:26,325 INFO  Setting request parameters for VerifySolution
2019-03-14 14:36:26,325 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:36:26,325 INFO  Starting to parse the user solution
2019-03-14 14:36:26,325 INFO  Displaying user solution
2019-03-14 14:36:26,372 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\n                                 \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:36:26,372 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:36:26,372 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:36:26,372 INFO  Invoking the service to verify the user solution
2019-03-14 14:36:26,372 INFO  Time before invoking service:Thu Mar 14 14:36:26 IST 2019
2019-03-14 14:36:26,372 INFO  Initialising service address for VerifySolution
2019-03-14 14:36:26,372 INFO  Time before invoking service In SUPER:Thu Mar 14 14:36:26 IST 2019
2019-03-14 14:36:27,418 INFO  Time after invoking service In SUPER:Thu Mar 14 14:36:27 IST 2019
2019-03-14 14:36:27,418 INFO  Service responded successfully with required details
2019-03-14 14:36:27,418 INFO  Time after invoking service:Thu Mar 14 14:36:27 IST 2019
2019-03-14 14:36:27,418 INFO  User solution successfully verified
2019-03-14 14:36:27,418 INFO  Processing the response from verify service
2019-03-14 14:36:27,418 INFO  Starting to parse JSON response
2019-03-14 14:36:27,418 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:36:27,418 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:36:27,418 INFO  Successfully parsed JSON response
2019-03-14 14:36:27,418 INFO  In the process of generating verify response in HTML
2019-03-14 14:36:27,512 INFO  Successfully generated verify response in HTML
2019-03-14 14:36:27,512 INFO  Successfully processed the response from service
2019-03-14 14:36:37,716 INFO  Setting request parameters for VerifySolution
2019-03-14 14:36:37,716 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:36:37,716 INFO  Starting to parse the user solution
2019-03-14 14:36:37,716 INFO  Displaying user solution
2019-03-14 14:36:37,747 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\n                                 \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:36:37,747 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:36:37,747 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:36:37,747 INFO  Invoking the service to verify the user solution
2019-03-14 14:36:37,747 INFO  Time before invoking service:Thu Mar 14 14:36:37 IST 2019
2019-03-14 14:36:37,747 INFO  Initialising service address for VerifySolution
2019-03-14 14:36:37,747 INFO  Time before invoking service In SUPER:Thu Mar 14 14:36:37 IST 2019
2019-03-14 14:36:38,787 INFO  Time after invoking service In SUPER:Thu Mar 14 14:36:38 IST 2019
2019-03-14 14:36:38,787 INFO  Service responded successfully with required details
2019-03-14 14:36:38,787 INFO  Time after invoking service:Thu Mar 14 14:36:38 IST 2019
2019-03-14 14:36:38,787 INFO  User solution successfully verified
2019-03-14 14:36:38,787 INFO  Processing the response from verify service
2019-03-14 14:36:38,787 INFO  Starting to parse JSON response
2019-03-14 14:36:38,787 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:36:38,787 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:36:38,787 INFO  Successfully parsed JSON response
2019-03-14 14:36:38,787 INFO  In the process of generating verify response in HTML
2019-03-14 14:36:38,865 INFO  Successfully generated verify response in HTML
2019-03-14 14:36:38,865 INFO  Successfully processed the response from service
2019-03-14 14:59:08,006 INFO  Setting request parameters for VerifySolution
2019-03-14 14:59:08,006 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 14:59:08,006 INFO  Starting to parse the user solution
2019-03-14 14:59:08,006 INFO  Displaying user solution
2019-03-14 14:59:08,069 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    A =max(list1)\r\n    indx = list1.index(A)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 14:59:08,069 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 14:59:08,069 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 14:59:08,069 INFO  Invoking the service to verify the user solution
2019-03-14 14:59:08,069 INFO  Time before invoking service:Thu Mar 14 14:59:08 IST 2019
2019-03-14 14:59:08,069 INFO  Initialising service address for VerifySolution
2019-03-14 14:59:08,069 INFO  Time before invoking service In SUPER:Thu Mar 14 14:59:08 IST 2019
2019-03-14 14:59:09,287 INFO  Time after invoking service In SUPER:Thu Mar 14 14:59:09 IST 2019
2019-03-14 14:59:09,287 INFO  Service responded successfully with required details
2019-03-14 14:59:09,287 INFO  Time after invoking service:Thu Mar 14 14:59:09 IST 2019
2019-03-14 14:59:09,287 INFO  User solution successfully verified
2019-03-14 14:59:09,287 INFO  Processing the response from verify service
2019-03-14 14:59:09,287 INFO  Starting to parse JSON response
2019-03-14 14:59:09,287 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:59:09,287 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 14:59:09,287 INFO  Successfully parsed JSON response
2019-03-14 14:59:09,287 INFO  In the process of generating verify response in HTML
2019-03-14 14:59:09,444 INFO  Successfully generated verify response in HTML
2019-03-14 14:59:09,444 INFO  Successfully processed the response from service
2019-03-14 15:00:00,113 INFO  Setting request parameters for VerifySolution
2019-03-14 15:00:00,113 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:00:00,113 INFO  Starting to parse the user solution
2019-03-14 15:00:00,113 INFO  Displaying user solution
2019-03-14 15:00:00,191 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:00:00,191 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:00:00,191 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:00:00,191 INFO  Invoking the service to verify the user solution
2019-03-14 15:00:00,191 INFO  Time before invoking service:Thu Mar 14 15:00:00 IST 2019
2019-03-14 15:00:00,191 INFO  Initialising service address for VerifySolution
2019-03-14 15:00:00,191 INFO  Time before invoking service In SUPER:Thu Mar 14 15:00:00 IST 2019
2019-03-14 15:00:01,769 INFO  Time after invoking service In SUPER:Thu Mar 14 15:00:01 IST 2019
2019-03-14 15:00:01,769 INFO  Service responded successfully with required details
2019-03-14 15:00:01,769 INFO  Time after invoking service:Thu Mar 14 15:00:01 IST 2019
2019-03-14 15:00:01,769 INFO  User solution successfully verified
2019-03-14 15:00:01,769 INFO  Processing the response from verify service
2019-03-14 15:00:01,769 INFO  Starting to parse JSON response
2019-03-14 15:00:01,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:00:01,785 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:00:01,785 INFO  Successfully parsed JSON response
2019-03-14 15:00:01,785 INFO  In the process of generating verify response in HTML
2019-03-14 15:00:01,957 INFO  Successfully generated verify response in HTML
2019-03-14 15:00:01,957 INFO  Successfully processed the response from service
2019-03-14 15:00:21,518 INFO  Setting request parameters for VerifySolution
2019-03-14 15:00:21,518 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:00:21,518 INFO  Starting to parse the user solution
2019-03-14 15:00:21,518 INFO  Displaying user solution
2019-03-14 15:00:21,565 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:00:21,565 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:00:21,565 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:00:21,565 INFO  Invoking the service to verify the user solution
2019-03-14 15:00:21,565 INFO  Time before invoking service:Thu Mar 14 15:00:21 IST 2019
2019-03-14 15:00:21,565 INFO  Initialising service address for VerifySolution
2019-03-14 15:00:21,565 INFO  Time before invoking service In SUPER:Thu Mar 14 15:00:21 IST 2019
2019-03-14 15:00:22,605 INFO  Time after invoking service In SUPER:Thu Mar 14 15:00:22 IST 2019
2019-03-14 15:00:22,605 INFO  Service responded successfully with required details
2019-03-14 15:00:22,605 INFO  Time after invoking service:Thu Mar 14 15:00:22 IST 2019
2019-03-14 15:00:22,605 INFO  User solution successfully verified
2019-03-14 15:00:22,605 INFO  Processing the response from verify service
2019-03-14 15:00:22,605 INFO  Starting to parse JSON response
2019-03-14 15:00:22,605 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:00:22,605 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:00:22,605 INFO  Successfully parsed JSON response
2019-03-14 15:00:22,605 INFO  In the process of generating verify response in HTML
2019-03-14 15:00:22,699 INFO  Successfully generated verify response in HTML
2019-03-14 15:00:22,699 INFO  Successfully processed the response from service
2019-03-14 15:01:40,518 INFO  Setting request parameters for VerifySolution
2019-03-14 15:01:40,518 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:01:40,518 INFO  Starting to parse the user solution
2019-03-14 15:01:40,518 INFO  Displaying user solution
2019-03-14 15:01:40,549 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    list1.__str__()\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:01:40,549 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:01:40,549 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:01:40,549 INFO  Invoking the service to verify the user solution
2019-03-14 15:01:40,565 INFO  Time before invoking service:Thu Mar 14 15:01:40 IST 2019
2019-03-14 15:01:40,565 INFO  Initialising service address for VerifySolution
2019-03-14 15:01:40,565 INFO  Time before invoking service In SUPER:Thu Mar 14 15:01:40 IST 2019
2019-03-14 15:01:41,768 INFO  Time after invoking service In SUPER:Thu Mar 14 15:01:41 IST 2019
2019-03-14 15:01:41,768 INFO  Service responded successfully with required details
2019-03-14 15:01:41,768 INFO  Time after invoking service:Thu Mar 14 15:01:41 IST 2019
2019-03-14 15:01:41,768 INFO  User solution successfully verified
2019-03-14 15:01:41,768 INFO  Processing the response from verify service
2019-03-14 15:01:41,768 INFO  Starting to parse JSON response
2019-03-14 15:01:41,768 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:01:41,768 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:01:41,768 INFO  Successfully parsed JSON response
2019-03-14 15:01:41,768 INFO  In the process of generating verify response in HTML
2019-03-14 15:01:41,846 INFO  Successfully generated verify response in HTML
2019-03-14 15:01:41,846 INFO  Successfully processed the response from service
2019-03-14 15:01:48,487 INFO  Setting request parameters for VerifySolution
2019-03-14 15:01:48,487 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:01:48,487 INFO  Starting to parse the user solution
2019-03-14 15:01:48,487 INFO  Displaying user solution
2019-03-14 15:01:48,549 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    list1.__str__()\r\n    number_list = list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:01:48,549 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:01:48,549 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:01:48,549 INFO  Invoking the service to verify the user solution
2019-03-14 15:01:48,549 INFO  Time before invoking service:Thu Mar 14 15:01:48 IST 2019
2019-03-14 15:01:48,549 INFO  Initialising service address for VerifySolution
2019-03-14 15:01:48,549 INFO  Time before invoking service In SUPER:Thu Mar 14 15:01:48 IST 2019
2019-03-14 15:01:49,581 INFO  Time after invoking service In SUPER:Thu Mar 14 15:01:49 IST 2019
2019-03-14 15:01:49,581 INFO  Service responded successfully with required details
2019-03-14 15:01:49,581 INFO  Time after invoking service:Thu Mar 14 15:01:49 IST 2019
2019-03-14 15:01:49,581 INFO  User solution successfully verified
2019-03-14 15:01:49,581 INFO  Processing the response from verify service
2019-03-14 15:01:49,581 INFO  Starting to parse JSON response
2019-03-14 15:01:49,581 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:01:49,581 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:01:49,581 INFO  Successfully parsed JSON response
2019-03-14 15:01:49,581 INFO  In the process of generating verify response in HTML
2019-03-14 15:01:49,690 INFO  Successfully generated verify response in HTML
2019-03-14 15:01:49,690 INFO  Successfully processed the response from service
2019-03-14 15:03:57,072 INFO  Setting request parameters for VerifySolution
2019-03-14 15:03:57,072 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:03:57,072 INFO  Starting to parse the user solution
2019-03-14 15:03:57,072 INFO  Displaying user solution
2019-03-14 15:03:57,150 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list=list1\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nprint(number_list)                                \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:03:57,150 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:03:57,150 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:03:57,150 INFO  Invoking the service to verify the user solution
2019-03-14 15:03:57,150 INFO  Time before invoking service:Thu Mar 14 15:03:57 IST 2019
2019-03-14 15:03:57,150 INFO  Initialising service address for VerifySolution
2019-03-14 15:03:57,150 INFO  Time before invoking service In SUPER:Thu Mar 14 15:03:57 IST 2019
2019-03-14 15:03:58,228 INFO  Time after invoking service In SUPER:Thu Mar 14 15:03:58 IST 2019
2019-03-14 15:03:58,228 INFO  Service responded successfully with required details
2019-03-14 15:03:58,228 INFO  Time after invoking service:Thu Mar 14 15:03:58 IST 2019
2019-03-14 15:03:58,228 INFO  User solution successfully verified
2019-03-14 15:03:58,228 INFO  Processing the response from verify service
2019-03-14 15:03:58,228 INFO  Starting to parse JSON response
2019-03-14 15:03:58,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:03:58,228 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:03:58,228 INFO  Successfully parsed JSON response
2019-03-14 15:03:58,228 INFO  In the process of generating verify response in HTML
2019-03-14 15:03:58,338 INFO  Successfully generated verify response in HTML
2019-03-14 15:03:58,338 INFO  Successfully processed the response from service
2019-03-14 15:06:06,086 INFO  Setting request parameters for VerifySolution
2019-03-14 15:06:06,086 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:06:06,086 INFO  Starting to parse the user solution
2019-03-14 15:06:06,086 INFO  Displaying user solution
2019-03-14 15:06:06,133 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list = list1\r\n    number_list=number_list.__str__()\r\n\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                               \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:06:06,133 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:06:06,133 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:06:06,133 INFO  Invoking the service to verify the user solution
2019-03-14 15:06:06,133 INFO  Time before invoking service:Thu Mar 14 15:06:06 IST 2019
2019-03-14 15:06:06,133 INFO  Initialising service address for VerifySolution
2019-03-14 15:06:06,133 INFO  Time before invoking service In SUPER:Thu Mar 14 15:06:06 IST 2019
2019-03-14 15:06:07,211 INFO  Time after invoking service In SUPER:Thu Mar 14 15:06:07 IST 2019
2019-03-14 15:06:07,211 INFO  Service responded successfully with required details
2019-03-14 15:06:07,211 INFO  Time after invoking service:Thu Mar 14 15:06:07 IST 2019
2019-03-14 15:06:07,211 INFO  User solution successfully verified
2019-03-14 15:06:07,211 INFO  Processing the response from verify service
2019-03-14 15:06:07,211 INFO  Starting to parse JSON response
2019-03-14 15:06:07,211 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:06:07,211 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:06:07,211 INFO  Successfully parsed JSON response
2019-03-14 15:06:07,211 INFO  In the process of generating verify response in HTML
2019-03-14 15:06:07,321 INFO  Successfully generated verify response in HTML
2019-03-14 15:06:07,321 INFO  Successfully processed the response from service
2019-03-14 15:13:30,152 INFO  Setting request parameters for VerifySolution
2019-03-14 15:13:30,152 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:13:30,152 INFO  Starting to parse the user solution
2019-03-14 15:13:30,152 INFO  Displaying user solution
2019-03-14 15:13:30,214 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list.__str__()\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                               \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:13:30,214 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:13:30,214 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:13:30,214 INFO  Invoking the service to verify the user solution
2019-03-14 15:13:30,214 INFO  Time before invoking service:Thu Mar 14 15:13:30 IST 2019
2019-03-14 15:13:30,214 INFO  Initialising service address for VerifySolution
2019-03-14 15:13:30,214 INFO  Time before invoking service In SUPER:Thu Mar 14 15:13:30 IST 2019
2019-03-14 15:13:31,417 INFO  Time after invoking service In SUPER:Thu Mar 14 15:13:31 IST 2019
2019-03-14 15:13:31,417 INFO  Service responded successfully with required details
2019-03-14 15:13:31,417 INFO  Time after invoking service:Thu Mar 14 15:13:31 IST 2019
2019-03-14 15:13:31,417 INFO  User solution successfully verified
2019-03-14 15:13:31,417 INFO  Processing the response from verify service
2019-03-14 15:13:31,417 INFO  Starting to parse JSON response
2019-03-14 15:13:31,417 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:13:31,417 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:13:31,417 INFO  Successfully parsed JSON response
2019-03-14 15:13:31,417 INFO  In the process of generating verify response in HTML
2019-03-14 15:13:31,511 INFO  Successfully generated verify response in HTML
2019-03-14 15:13:31,527 INFO  Successfully processed the response from service
2019-03-14 15:13:35,129 INFO  Setting request parameters for VerifySolution
2019-03-14 15:13:35,129 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:13:35,129 INFO  Starting to parse the user solution
2019-03-14 15:13:35,129 INFO  Displaying user solution
2019-03-14 15:13:35,192 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list.__str__()\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.display()                               \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:13:35,192 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:13:35,192 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:13:35,192 INFO  Invoking the service to verify the user solution
2019-03-14 15:13:35,192 INFO  Time before invoking service:Thu Mar 14 15:13:35 IST 2019
2019-03-14 15:13:35,192 INFO  Initialising service address for VerifySolution
2019-03-14 15:13:35,192 INFO  Time before invoking service In SUPER:Thu Mar 14 15:13:35 IST 2019
2019-03-14 15:13:36,114 INFO  Time after invoking service In SUPER:Thu Mar 14 15:13:36 IST 2019
2019-03-14 15:13:36,114 INFO  Service responded successfully with required details
2019-03-14 15:13:36,129 INFO  Time after invoking service:Thu Mar 14 15:13:36 IST 2019
2019-03-14 15:13:36,129 INFO  User solution successfully verified
2019-03-14 15:13:36,129 INFO  Processing the response from verify service
2019-03-14 15:13:36,129 INFO  Starting to parse JSON response
2019-03-14 15:13:36,129 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:13:36,129 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:13:36,129 INFO  Successfully parsed JSON response
2019-03-14 15:13:36,129 INFO  In the process of generating verify response in HTML
2019-03-14 15:13:36,239 INFO  Successfully generated verify response in HTML
2019-03-14 15:13:36,239 INFO  Successfully processed the response from service
2019-03-14 15:15:40,364 INFO  Setting request parameters for VerifySolution
2019-03-14 15:15:40,364 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:15:40,364 INFO  Starting to parse the user solution
2019-03-14 15:15:40,364 INFO  Displaying user solution
2019-03-14 15:15:40,427 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:15:40,427 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:15:40,427 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:15:40,427 INFO  Invoking the service to verify the user solution
2019-03-14 15:15:40,427 INFO  Time before invoking service:Thu Mar 14 15:15:40 IST 2019
2019-03-14 15:15:40,427 INFO  Initialising service address for VerifySolution
2019-03-14 15:15:40,427 INFO  Time before invoking service In SUPER:Thu Mar 14 15:15:40 IST 2019
2019-03-14 15:15:41,443 INFO  Time after invoking service In SUPER:Thu Mar 14 15:15:41 IST 2019
2019-03-14 15:15:41,443 INFO  Service responded successfully with required details
2019-03-14 15:15:41,443 INFO  Time after invoking service:Thu Mar 14 15:15:41 IST 2019
2019-03-14 15:15:41,443 INFO  User solution successfully verified
2019-03-14 15:15:41,443 INFO  Processing the response from verify service
2019-03-14 15:15:41,443 INFO  Starting to parse JSON response
2019-03-14 15:15:41,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:15:41,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:15:41,458 INFO  Successfully parsed JSON response
2019-03-14 15:15:41,458 INFO  In the process of generating verify response in HTML
2019-03-14 15:15:41,536 INFO  Successfully generated verify response in HTML
2019-03-14 15:15:41,536 INFO  Successfully processed the response from service
2019-03-14 15:16:43,933 INFO  Setting request parameters for VerifySolution
2019-03-14 15:16:43,933 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:16:43,933 INFO  Starting to parse the user solution
2019-03-14 15:16:43,933 INFO  Displaying user solution
2019-03-14 15:16:43,980 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    number_list=list1\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:16:43,980 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:16:43,980 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:16:43,980 INFO  Invoking the service to verify the user solution
2019-03-14 15:16:43,980 INFO  Time before invoking service:Thu Mar 14 15:16:43 IST 2019
2019-03-14 15:16:43,980 INFO  Initialising service address for VerifySolution
2019-03-14 15:16:43,980 INFO  Time before invoking service In SUPER:Thu Mar 14 15:16:43 IST 2019
2019-03-14 15:16:45,292 INFO  Time after invoking service In SUPER:Thu Mar 14 15:16:45 IST 2019
2019-03-14 15:16:45,292 INFO  Service responded successfully with required details
2019-03-14 15:16:45,292 INFO  Time after invoking service:Thu Mar 14 15:16:45 IST 2019
2019-03-14 15:16:45,292 INFO  User solution successfully verified
2019-03-14 15:16:45,292 INFO  Processing the response from verify service
2019-03-14 15:16:45,292 INFO  Starting to parse JSON response
2019-03-14 15:16:45,292 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:16:45,292 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:16:45,292 INFO  Successfully parsed JSON response
2019-03-14 15:16:45,292 INFO  In the process of generating verify response in HTML
2019-03-14 15:16:45,395 INFO  Successfully generated verify response in HTML
2019-03-14 15:16:45,396 INFO  Successfully processed the response from service
2019-03-14 15:17:07,316 INFO  Setting request parameters for VerifySolution
2019-03-14 15:17:07,316 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:17:07,316 INFO  Starting to parse the user solution
2019-03-14 15:17:07,316 INFO  Displaying user solution
2019-03-14 15:17:07,378 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:17:07,378 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:17:07,378 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:17:07,378 INFO  Invoking the service to verify the user solution
2019-03-14 15:17:07,378 INFO  Time before invoking service:Thu Mar 14 15:17:07 IST 2019
2019-03-14 15:17:07,378 INFO  Initialising service address for VerifySolution
2019-03-14 15:17:07,378 INFO  Time before invoking service In SUPER:Thu Mar 14 15:17:07 IST 2019
2019-03-14 15:17:08,456 INFO  Time after invoking service In SUPER:Thu Mar 14 15:17:08 IST 2019
2019-03-14 15:17:08,456 INFO  Service responded successfully with required details
2019-03-14 15:17:08,456 INFO  Time after invoking service:Thu Mar 14 15:17:08 IST 2019
2019-03-14 15:17:08,456 INFO  User solution successfully verified
2019-03-14 15:17:08,456 INFO  Processing the response from verify service
2019-03-14 15:17:08,456 INFO  Starting to parse JSON response
2019-03-14 15:17:08,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:17:08,456 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:17:08,456 INFO  Successfully parsed JSON response
2019-03-14 15:17:08,456 INFO  In the process of generating verify response in HTML
2019-03-14 15:17:08,550 INFO  Successfully generated verify response in HTML
2019-03-14 15:17:08,550 INFO  Successfully processed the response from service
2019-03-14 15:17:14,113 INFO  Setting request parameters for VerifySolution
2019-03-14 15:17:14,113 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:17:14,113 INFO  Starting to parse the user solution
2019-03-14 15:17:14,113 INFO  Displaying user solution
2019-03-14 15:17:14,160 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:17:14,160 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:17:14,160 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:17:14,160 INFO  Invoking the service to verify the user solution
2019-03-14 15:17:14,176 INFO  Time before invoking service:Thu Mar 14 15:17:14 IST 2019
2019-03-14 15:17:14,176 INFO  Initialising service address for VerifySolution
2019-03-14 15:17:14,176 INFO  Time before invoking service In SUPER:Thu Mar 14 15:17:14 IST 2019
2019-03-14 15:17:15,145 INFO  Time after invoking service In SUPER:Thu Mar 14 15:17:15 IST 2019
2019-03-14 15:17:15,145 INFO  Service responded successfully with required details
2019-03-14 15:17:15,145 INFO  Time after invoking service:Thu Mar 14 15:17:15 IST 2019
2019-03-14 15:17:15,160 INFO  User solution successfully verified
2019-03-14 15:17:15,160 INFO  Processing the response from verify service
2019-03-14 15:17:15,160 INFO  Starting to parse JSON response
2019-03-14 15:17:15,160 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:17:15,160 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:17:15,160 INFO  Successfully parsed JSON response
2019-03-14 15:17:15,160 INFO  In the process of generating verify response in HTML
2019-03-14 15:17:15,254 INFO  Successfully generated verify response in HTML
2019-03-14 15:17:15,254 INFO  Successfully processed the response from service
2019-03-14 15:17:20,202 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 15:17:20,202 INFO  Displaying user solution
2019-03-14 15:17:20,218 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 15:17:20,218 INFO  Invoking the service to submit the user solution
2019-03-14 15:17:20,218 INFO  Initialising service address for Submit
2019-03-14 15:17:20,218 INFO  Time before invoking service In SUPER:Thu Mar 14 15:17:20 IST 2019
2019-03-14 15:17:20,874 INFO  Time after invoking service In SUPER:Thu Mar 14 15:17:20 IST 2019
2019-03-14 15:17:20,874 INFO  Service responded successfully with required details
2019-03-14 15:17:20,874 INFO  User solution successfully submitted
2019-03-14 15:17:20,874 INFO  Displaying submission status
2019-03-14 15:17:20,874 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 15:18:18,553 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 15:18:18,553 INFO  Displaying user solution
2019-03-14 15:18:18,569 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 15:18:18,569 INFO  Invoking the service to submit the user solution
2019-03-14 15:18:18,569 INFO  Initialising service address for Submit
2019-03-14 15:18:18,569 INFO  Time before invoking service In SUPER:Thu Mar 14 15:18:18 IST 2019
2019-03-14 15:18:18,944 INFO  Time after invoking service In SUPER:Thu Mar 14 15:18:18 IST 2019
2019-03-14 15:18:18,944 INFO  Service responded successfully with required details
2019-03-14 15:18:18,944 INFO  User solution successfully submitted
2019-03-14 15:18:18,944 INFO  Displaying submission status
2019-03-14 15:18:18,944 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 15:18:22,257 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 15:18:22,257 INFO  Displaying user solution
2019-03-14 15:18:22,273 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 15:18:22,273 INFO  Invoking the service to submit the user solution
2019-03-14 15:18:22,273 INFO  Initialising service address for Submit
2019-03-14 15:18:22,273 INFO  Time before invoking service In SUPER:Thu Mar 14 15:18:22 IST 2019
2019-03-14 15:18:22,554 INFO  Time after invoking service In SUPER:Thu Mar 14 15:18:22 IST 2019
2019-03-14 15:18:22,554 INFO  Service responded successfully with required details
2019-03-14 15:18:22,554 INFO  User solution successfully submitted
2019-03-14 15:18:22,554 INFO  Displaying submission status
2019-03-14 15:18:22,554 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 15:19:52,496 INFO  Setting request parameters for VerifySolution
2019-03-14 15:19:52,496 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:19:52,496 INFO  Starting to parse the user solution
2019-03-14 15:19:52,496 INFO  Displaying user solution
2019-03-14 15:19:52,590 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:19:52,605 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:19:52,605 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:19:52,605 INFO  Invoking the service to verify the user solution
2019-03-14 15:19:52,605 INFO  Time before invoking service:Thu Mar 14 15:19:52 IST 2019
2019-03-14 15:19:52,605 INFO  Initialising service address for VerifySolution
2019-03-14 15:19:52,605 INFO  Time before invoking service In SUPER:Thu Mar 14 15:19:52 IST 2019
2019-03-14 15:19:53,764 INFO  Time after invoking service In SUPER:Thu Mar 14 15:19:53 IST 2019
2019-03-14 15:19:53,764 INFO  Service responded successfully with required details
2019-03-14 15:19:53,764 INFO  Time after invoking service:Thu Mar 14 15:19:53 IST 2019
2019-03-14 15:19:53,764 INFO  User solution successfully verified
2019-03-14 15:19:53,764 INFO  Processing the response from verify service
2019-03-14 15:19:53,764 INFO  Starting to parse JSON response
2019-03-14 15:19:53,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:19:53,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:19:53,764 INFO  Successfully parsed JSON response
2019-03-14 15:19:53,764 INFO  In the process of generating verify response in HTML
2019-03-14 15:19:53,842 INFO  Successfully generated verify response in HTML
2019-03-14 15:19:53,842 INFO  Successfully processed the response from service
2019-03-14 15:20:04,477 INFO  Setting request parameters for VerifySolution
2019-03-14 15:20:04,477 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:20:04,477 INFO  Starting to parse the user solution
2019-03-14 15:20:04,477 INFO  Displaying user solution
2019-03-14 15:20:04,524 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-4\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n                                      \r\n   \r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n\r\n    \r\ndef replace_maximum(number_list,new_value):\r\n    #write your logic here\r\n    list1 = []\r\n    new_list = LinkedList()\r\n    temp = number_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    n1=max(list1)\r\n    indx = list1.index(n1)\r\n    list1.pop(indx)\r\n    list1.insert(indx, new_value)\r\n    for i in range(0,len(list1)):\r\n        new_list.add(list1[i])\r\n    number_list = new_list\r\n    return number_list\r\n\r\n#Add different values to the linked list and test your program\r\nnumber_list=LinkedList()\r\nnumber_list.add(12)\r\nnumber_list.add(95)\r\nnumber_list.add(140)\r\nnumber_list.add(110)\r\nnumber_list.add(40)\r\n\r\nnew_value=100\r\nnumber_list=replace_maximum(number_list,new_value)\r\nnumber_list.__str__()                              \r\n","asgnmtId":"4","SolutionFileName":"Excer4.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:20:04,524 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:20:04,524 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:20:04,524 INFO  Invoking the service to verify the user solution
2019-03-14 15:20:04,524 INFO  Time before invoking service:Thu Mar 14 15:20:04 IST 2019
2019-03-14 15:20:04,524 INFO  Initialising service address for VerifySolution
2019-03-14 15:20:04,524 INFO  Time before invoking service In SUPER:Thu Mar 14 15:20:04 IST 2019
2019-03-14 15:20:05,571 INFO  Time after invoking service In SUPER:Thu Mar 14 15:20:05 IST 2019
2019-03-14 15:20:05,571 INFO  Service responded successfully with required details
2019-03-14 15:20:05,571 INFO  Time after invoking service:Thu Mar 14 15:20:05 IST 2019
2019-03-14 15:20:05,571 INFO  User solution successfully verified
2019-03-14 15:20:05,571 INFO  Processing the response from verify service
2019-03-14 15:20:05,571 INFO  Starting to parse JSON response
2019-03-14 15:20:05,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:20:05,587 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:20:05,587 INFO  Successfully parsed JSON response
2019-03-14 15:20:05,587 INFO  In the process of generating verify response in HTML
2019-03-14 15:20:05,681 INFO  Successfully generated verify response in HTML
2019-03-14 15:20:05,681 INFO  Successfully processed the response from service
2019-03-14 15:20:10,698 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 15:20:10,698 INFO  Displaying user solution
2019-03-14 15:20:10,698 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 15:20:10,698 INFO  Invoking the service to submit the user solution
2019-03-14 15:20:10,698 INFO  Initialising service address for Submit
2019-03-14 15:20:10,698 INFO  Time before invoking service In SUPER:Thu Mar 14 15:20:10 IST 2019
2019-03-14 15:20:10,979 INFO  Time after invoking service In SUPER:Thu Mar 14 15:20:10 IST 2019
2019-03-14 15:20:10,979 INFO  Service responded successfully with required details
2019-03-14 15:20:10,979 INFO  User solution successfully submitted
2019-03-14 15:20:10,979 INFO  Displaying submission status
2019-03-14 15:20:10,979 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 15:23:12,727 INFO  Setting request parameters for VerifySolution
2019-03-14 15:23:12,727 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:23:12,727 INFO  Starting to parse the user solution
2019-03-14 15:23:12,727 INFO  Displaying user solution
2019-03-14 15:23:12,789 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n    \r\n        # Write your logic here\r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:23:12,789 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:23:12,789 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:23:12,789 INFO  Invoking the service to verify the user solution
2019-03-14 15:23:12,789 INFO  Time before invoking service:Thu Mar 14 15:23:12 IST 2019
2019-03-14 15:23:12,789 INFO  Initialising service address for VerifySolution
2019-03-14 15:23:12,789 INFO  Time before invoking service In SUPER:Thu Mar 14 15:23:12 IST 2019
2019-03-14 15:23:13,821 INFO  Time after invoking service In SUPER:Thu Mar 14 15:23:13 IST 2019
2019-03-14 15:23:13,821 INFO  Service responded successfully with required details
2019-03-14 15:23:13,821 INFO  Time after invoking service:Thu Mar 14 15:23:13 IST 2019
2019-03-14 15:23:13,821 INFO  User solution successfully verified
2019-03-14 15:23:13,821 INFO  Processing the response from verify service
2019-03-14 15:23:13,821 INFO  Starting to parse JSON response
2019-03-14 15:23:13,821 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:23:13,821 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:23:13,821 INFO  Successfully parsed JSON response
2019-03-14 15:23:13,821 INFO  In the process of generating verify response in HTML
2019-03-14 15:23:13,899 INFO  Successfully generated verify response in HTML
2019-03-14 15:23:13,899 INFO  Successfully processed the response from service
2019-03-14 15:27:26,120 INFO  Setting request parameters for VerifySolution
2019-03-14 15:27:26,120 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:27:26,120 INFO  Starting to parse the user solution
2019-03-14 15:27:26,120 INFO  Displaying user solution
2019-03-14 15:27:26,182 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:27:26,182 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:27:26,182 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:27:26,182 INFO  Invoking the service to verify the user solution
2019-03-14 15:27:26,182 INFO  Time before invoking service:Thu Mar 14 15:27:26 IST 2019
2019-03-14 15:27:26,182 INFO  Initialising service address for VerifySolution
2019-03-14 15:27:26,182 INFO  Time before invoking service In SUPER:Thu Mar 14 15:27:26 IST 2019
2019-03-14 15:27:27,276 INFO  Time after invoking service In SUPER:Thu Mar 14 15:27:27 IST 2019
2019-03-14 15:27:27,276 INFO  Service responded successfully with required details
2019-03-14 15:27:27,276 INFO  Time after invoking service:Thu Mar 14 15:27:27 IST 2019
2019-03-14 15:27:27,276 INFO  User solution successfully verified
2019-03-14 15:27:27,276 INFO  Processing the response from verify service
2019-03-14 15:27:27,276 INFO  Starting to parse JSON response
2019-03-14 15:27:27,276 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:27:27,276 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:27:27,276 INFO  Successfully parsed JSON response
2019-03-14 15:27:27,276 INFO  In the process of generating verify response in HTML
2019-03-14 15:27:27,370 INFO  Successfully generated verify response in HTML
2019-03-14 15:27:27,370 INFO  Successfully processed the response from service
2019-03-14 15:28:28,776 INFO  Setting request parameters for VerifySolution
2019-03-14 15:28:28,776 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:28:28,776 INFO  Starting to parse the user solution
2019-03-14 15:28:28,792 INFO  Displaying user solution
2019-03-14 15:28:28,823 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:28:28,823 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:28:28,823 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:28:28,823 INFO  Invoking the service to verify the user solution
2019-03-14 15:28:28,823 INFO  Time before invoking service:Thu Mar 14 15:28:28 IST 2019
2019-03-14 15:28:28,823 INFO  Initialising service address for VerifySolution
2019-03-14 15:28:28,823 INFO  Time before invoking service In SUPER:Thu Mar 14 15:28:28 IST 2019
2019-03-14 15:28:29,854 INFO  Time after invoking service In SUPER:Thu Mar 14 15:28:29 IST 2019
2019-03-14 15:28:29,854 INFO  Service responded successfully with required details
2019-03-14 15:28:29,854 INFO  Time after invoking service:Thu Mar 14 15:28:29 IST 2019
2019-03-14 15:28:29,854 INFO  User solution successfully verified
2019-03-14 15:28:29,854 INFO  Processing the response from verify service
2019-03-14 15:28:29,854 INFO  Starting to parse JSON response
2019-03-14 15:28:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:28:29,854 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:28:29,854 INFO  Successfully parsed JSON response
2019-03-14 15:28:29,854 INFO  In the process of generating verify response in HTML
2019-03-14 15:28:29,948 INFO  Successfully generated verify response in HTML
2019-03-14 15:28:29,948 INFO  Successfully processed the response from service
2019-03-14 15:28:40,263 INFO  Setting request parameters for VerifySolution
2019-03-14 15:28:40,263 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:28:40,263 INFO  Starting to parse the user solution
2019-03-14 15:28:40,263 INFO  Displaying user solution
2019-03-14 15:28:40,341 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        circle_list = LinkedList()\r\n        circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:28:40,341 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:28:40,341 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:28:40,341 INFO  Invoking the service to verify the user solution
2019-03-14 15:28:40,341 INFO  Time before invoking service:Thu Mar 14 15:28:40 IST 2019
2019-03-14 15:28:40,341 INFO  Initialising service address for VerifySolution
2019-03-14 15:28:40,341 INFO  Time before invoking service In SUPER:Thu Mar 14 15:28:40 IST 2019
2019-03-14 15:28:41,419 INFO  Time after invoking service In SUPER:Thu Mar 14 15:28:41 IST 2019
2019-03-14 15:28:41,419 INFO  Service responded successfully with required details
2019-03-14 15:28:41,419 INFO  Time after invoking service:Thu Mar 14 15:28:41 IST 2019
2019-03-14 15:28:41,419 INFO  User solution successfully verified
2019-03-14 15:28:41,419 INFO  Processing the response from verify service
2019-03-14 15:28:41,434 INFO  Starting to parse JSON response
2019-03-14 15:28:41,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:28:41,434 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:28:41,434 INFO  Successfully parsed JSON response
2019-03-14 15:28:41,434 INFO  In the process of generating verify response in HTML
2019-03-14 15:28:41,513 INFO  Successfully generated verify response in HTML
2019-03-14 15:28:41,513 INFO  Successfully processed the response from service
2019-03-14 15:30:28,844 INFO  Setting request parameters for VerifySolution
2019-03-14 15:30:28,844 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:30:28,844 INFO  Starting to parse the user solution
2019-03-14 15:30:28,844 INFO  Displaying user solution
2019-03-14 15:30:28,906 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:30:28,906 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:30:28,906 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:30:28,906 INFO  Invoking the service to verify the user solution
2019-03-14 15:30:28,906 INFO  Time before invoking service:Thu Mar 14 15:30:28 IST 2019
2019-03-14 15:30:28,906 INFO  Initialising service address for VerifySolution
2019-03-14 15:30:28,906 INFO  Time before invoking service In SUPER:Thu Mar 14 15:30:28 IST 2019
2019-03-14 15:30:30,031 INFO  Time after invoking service In SUPER:Thu Mar 14 15:30:30 IST 2019
2019-03-14 15:30:30,031 INFO  Service responded successfully with required details
2019-03-14 15:30:30,031 INFO  Time after invoking service:Thu Mar 14 15:30:30 IST 2019
2019-03-14 15:30:30,031 INFO  User solution successfully verified
2019-03-14 15:30:30,031 INFO  Processing the response from verify service
2019-03-14 15:30:30,031 INFO  Starting to parse JSON response
2019-03-14 15:30:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:30:30,031 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:30:30,031 INFO  Successfully parsed JSON response
2019-03-14 15:30:30,031 INFO  In the process of generating verify response in HTML
2019-03-14 15:30:30,125 INFO  Successfully generated verify response in HTML
2019-03-14 15:30:30,125 INFO  Successfully processed the response from service
2019-03-14 15:31:33,488 INFO  Setting request parameters for VerifySolution
2019-03-14 15:31:33,488 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:31:33,488 INFO  Starting to parse the user solution
2019-03-14 15:31:33,488 INFO  Displaying user solution
2019-03-14 15:31:33,535 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.get_circle_list().add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:31:33,535 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:31:33,535 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:31:33,535 INFO  Invoking the service to verify the user solution
2019-03-14 15:31:33,535 INFO  Time before invoking service:Thu Mar 14 15:31:33 IST 2019
2019-03-14 15:31:33,535 INFO  Initialising service address for VerifySolution
2019-03-14 15:31:33,535 INFO  Time before invoking service In SUPER:Thu Mar 14 15:31:33 IST 2019
2019-03-14 15:31:34,519 INFO  Time after invoking service In SUPER:Thu Mar 14 15:31:34 IST 2019
2019-03-14 15:31:34,519 INFO  Service responded successfully with required details
2019-03-14 15:31:34,519 INFO  Time after invoking service:Thu Mar 14 15:31:34 IST 2019
2019-03-14 15:31:34,519 INFO  User solution successfully verified
2019-03-14 15:31:34,519 INFO  Processing the response from verify service
2019-03-14 15:31:34,519 INFO  Starting to parse JSON response
2019-03-14 15:31:34,519 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:31:34,519 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:31:34,519 INFO  Successfully parsed JSON response
2019-03-14 15:31:34,519 INFO  In the process of generating verify response in HTML
2019-03-14 15:31:34,597 INFO  Successfully generated verify response in HTML
2019-03-14 15:31:34,597 INFO  Successfully processed the response from service
2019-03-14 15:31:39,656 INFO  Setting request parameters for VerifySolution
2019-03-14 15:31:39,656 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:31:39,656 INFO  Starting to parse the user solution
2019-03-14 15:31:39,656 INFO  Displaying user solution
2019-03-14 15:31:39,718 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.get_circle_list().add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:31:39,718 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:31:39,718 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:31:39,718 INFO  Invoking the service to verify the user solution
2019-03-14 15:31:39,718 INFO  Time before invoking service:Thu Mar 14 15:31:39 IST 2019
2019-03-14 15:31:39,718 INFO  Initialising service address for VerifySolution
2019-03-14 15:31:39,718 INFO  Time before invoking service In SUPER:Thu Mar 14 15:31:39 IST 2019
2019-03-14 15:31:40,687 INFO  Time after invoking service In SUPER:Thu Mar 14 15:31:40 IST 2019
2019-03-14 15:31:40,687 INFO  Service responded successfully with required details
2019-03-14 15:31:40,687 INFO  Time after invoking service:Thu Mar 14 15:31:40 IST 2019
2019-03-14 15:31:40,687 INFO  User solution successfully verified
2019-03-14 15:31:40,687 INFO  Processing the response from verify service
2019-03-14 15:31:40,687 INFO  Starting to parse JSON response
2019-03-14 15:31:40,687 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:31:40,687 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:31:40,687 INFO  Successfully parsed JSON response
2019-03-14 15:31:40,687 INFO  In the process of generating verify response in HTML
2019-03-14 15:31:40,781 INFO  Successfully generated verify response in HTML
2019-03-14 15:31:40,781 INFO  Successfully processed the response from service
2019-03-14 15:33:44,979 INFO  Setting request parameters for VerifySolution
2019-03-14 15:33:44,979 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:33:44,979 INFO  Starting to parse the user solution
2019-03-14 15:33:44,979 INFO  Displaying user solution
2019-03-14 15:33:45,057 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.get_circle_list().add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:33:45,057 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:33:45,073 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:33:45,073 INFO  Invoking the service to verify the user solution
2019-03-14 15:33:45,073 INFO  Time before invoking service:Thu Mar 14 15:33:45 IST 2019
2019-03-14 15:33:45,073 INFO  Initialising service address for VerifySolution
2019-03-14 15:33:45,073 INFO  Time before invoking service In SUPER:Thu Mar 14 15:33:45 IST 2019
2019-03-14 15:33:46,245 INFO  Time after invoking service In SUPER:Thu Mar 14 15:33:46 IST 2019
2019-03-14 15:33:46,245 INFO  Service responded successfully with required details
2019-03-14 15:33:46,245 INFO  Time after invoking service:Thu Mar 14 15:33:46 IST 2019
2019-03-14 15:33:46,245 INFO  User solution successfully verified
2019-03-14 15:33:46,245 INFO  Processing the response from verify service
2019-03-14 15:33:46,261 INFO  Starting to parse JSON response
2019-03-14 15:33:46,261 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:33:46,261 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:33:46,261 INFO  Successfully parsed JSON response
2019-03-14 15:33:46,261 INFO  In the process of generating verify response in HTML
2019-03-14 15:33:46,417 INFO  Successfully generated verify response in HTML
2019-03-14 15:33:46,417 INFO  Successfully processed the response from service
2019-03-14 15:33:56,410 INFO  Setting request parameters for VerifySolution
2019-03-14 15:33:56,410 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:33:56,410 INFO  Starting to parse the user solution
2019-03-14 15:33:56,410 INFO  Displaying user solution
2019-03-14 15:33:56,441 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.get_circle_list().add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:33:56,441 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:33:56,441 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:33:56,441 INFO  Invoking the service to verify the user solution
2019-03-14 15:33:56,441 INFO  Time before invoking service:Thu Mar 14 15:33:56 IST 2019
2019-03-14 15:33:56,441 INFO  Initialising service address for VerifySolution
2019-03-14 15:33:56,441 INFO  Time before invoking service In SUPER:Thu Mar 14 15:33:56 IST 2019
2019-03-14 15:33:57,379 INFO  Time after invoking service In SUPER:Thu Mar 14 15:33:57 IST 2019
2019-03-14 15:33:57,379 INFO  Service responded successfully with required details
2019-03-14 15:33:57,379 INFO  Time after invoking service:Thu Mar 14 15:33:57 IST 2019
2019-03-14 15:33:57,379 INFO  User solution successfully verified
2019-03-14 15:33:57,379 INFO  Processing the response from verify service
2019-03-14 15:33:57,379 INFO  Starting to parse JSON response
2019-03-14 15:33:57,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:33:57,379 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:33:57,379 INFO  Successfully parsed JSON response
2019-03-14 15:33:57,379 INFO  In the process of generating verify response in HTML
2019-03-14 15:33:57,472 INFO  Successfully generated verify response in HTML
2019-03-14 15:33:57,472 INFO  Successfully processed the response from service
2019-03-14 15:34:28,106 INFO  Setting request parameters for VerifySolution
2019-03-14 15:34:28,106 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:34:28,106 INFO  Starting to parse the user solution
2019-03-14 15:34:28,106 INFO  Displaying user solution
2019-03-14 15:34:28,153 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:34:28,153 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:34:28,153 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:34:28,153 INFO  Invoking the service to verify the user solution
2019-03-14 15:34:28,153 INFO  Time before invoking service:Thu Mar 14 15:34:28 IST 2019
2019-03-14 15:34:28,153 INFO  Initialising service address for VerifySolution
2019-03-14 15:34:28,153 INFO  Time before invoking service In SUPER:Thu Mar 14 15:34:28 IST 2019
2019-03-14 15:34:29,231 INFO  Time after invoking service In SUPER:Thu Mar 14 15:34:29 IST 2019
2019-03-14 15:34:29,231 INFO  Service responded successfully with required details
2019-03-14 15:34:29,231 INFO  Time after invoking service:Thu Mar 14 15:34:29 IST 2019
2019-03-14 15:34:29,231 INFO  User solution successfully verified
2019-03-14 15:34:29,231 INFO  Processing the response from verify service
2019-03-14 15:34:29,231 INFO  Starting to parse JSON response
2019-03-14 15:34:29,231 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:34:29,231 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:34:29,231 INFO  Successfully parsed JSON response
2019-03-14 15:34:29,231 INFO  In the process of generating verify response in HTML
2019-03-14 15:34:29,340 INFO  Successfully generated verify response in HTML
2019-03-14 15:34:29,340 INFO  Successfully processed the response from service
2019-03-14 15:37:49,220 INFO  Setting request parameters for VerifySolution
2019-03-14 15:37:49,220 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:37:49,220 INFO  Starting to parse the user solution
2019-03-14 15:37:49,220 INFO  Displaying user solution
2019-03-14 15:37:49,282 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:37:49,298 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:37:49,298 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:37:49,298 INFO  Invoking the service to verify the user solution
2019-03-14 15:37:49,298 INFO  Time before invoking service:Thu Mar 14 15:37:49 IST 2019
2019-03-14 15:37:49,298 INFO  Initialising service address for VerifySolution
2019-03-14 15:37:49,298 INFO  Time before invoking service In SUPER:Thu Mar 14 15:37:49 IST 2019
2019-03-14 15:37:50,329 INFO  Time after invoking service In SUPER:Thu Mar 14 15:37:50 IST 2019
2019-03-14 15:37:50,329 INFO  Service responded successfully with required details
2019-03-14 15:37:50,329 INFO  Time after invoking service:Thu Mar 14 15:37:50 IST 2019
2019-03-14 15:37:50,329 INFO  User solution successfully verified
2019-03-14 15:37:50,329 INFO  Processing the response from verify service
2019-03-14 15:37:50,329 INFO  Starting to parse JSON response
2019-03-14 15:37:50,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:37:50,329 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:37:50,329 INFO  Successfully parsed JSON response
2019-03-14 15:37:50,329 INFO  In the process of generating verify response in HTML
2019-03-14 15:37:50,423 INFO  Successfully generated verify response in HTML
2019-03-14 15:37:50,423 INFO  Successfully processed the response from service
2019-03-14 15:38:48,948 INFO  Setting request parameters for VerifySolution
2019-03-14 15:38:48,948 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:38:48,948 INFO  Starting to parse the user solution
2019-03-14 15:38:48,948 INFO  Displaying user solution
2019-03-14 15:38:48,995 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:38:48,995 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:38:48,995 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:38:48,995 INFO  Invoking the service to verify the user solution
2019-03-14 15:38:48,995 INFO  Time before invoking service:Thu Mar 14 15:38:48 IST 2019
2019-03-14 15:38:48,995 INFO  Initialising service address for VerifySolution
2019-03-14 15:38:48,995 INFO  Time before invoking service In SUPER:Thu Mar 14 15:38:48 IST 2019
2019-03-14 15:38:50,011 INFO  Time after invoking service In SUPER:Thu Mar 14 15:38:50 IST 2019
2019-03-14 15:38:50,011 INFO  Service responded successfully with required details
2019-03-14 15:38:50,011 INFO  Time after invoking service:Thu Mar 14 15:38:50 IST 2019
2019-03-14 15:38:50,011 INFO  User solution successfully verified
2019-03-14 15:38:50,011 INFO  Processing the response from verify service
2019-03-14 15:38:50,011 INFO  Starting to parse JSON response
2019-03-14 15:38:50,011 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:38:50,011 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:38:50,011 INFO  Successfully parsed JSON response
2019-03-14 15:38:50,011 INFO  In the process of generating verify response in HTML
2019-03-14 15:38:50,089 INFO  Successfully generated verify response in HTML
2019-03-14 15:38:50,089 INFO  Successfully processed the response from service
2019-03-14 15:41:25,149 INFO  Setting request parameters for VerifySolution
2019-03-14 15:41:25,149 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:41:25,149 INFO  Starting to parse the user solution
2019-03-14 15:41:25,149 INFO  Displaying user solution
2019-03-14 15:41:25,212 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.__circle_list\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:41:25,212 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:41:25,212 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:41:25,212 INFO  Invoking the service to verify the user solution
2019-03-14 15:41:25,212 INFO  Time before invoking service:Thu Mar 14 15:41:25 IST 2019
2019-03-14 15:41:25,212 INFO  Initialising service address for VerifySolution
2019-03-14 15:41:25,212 INFO  Time before invoking service In SUPER:Thu Mar 14 15:41:25 IST 2019
2019-03-14 15:41:26,415 INFO  Time after invoking service In SUPER:Thu Mar 14 15:41:26 IST 2019
2019-03-14 15:41:26,415 INFO  Service responded successfully with required details
2019-03-14 15:41:26,415 INFO  Time after invoking service:Thu Mar 14 15:41:26 IST 2019
2019-03-14 15:41:26,415 INFO  User solution successfully verified
2019-03-14 15:41:26,415 INFO  Processing the response from verify service
2019-03-14 15:41:26,430 INFO  Starting to parse JSON response
2019-03-14 15:41:26,430 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:41:26,430 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:41:26,430 INFO  Successfully parsed JSON response
2019-03-14 15:41:26,430 INFO  In the process of generating verify response in HTML
2019-03-14 15:41:26,524 INFO  Successfully generated verify response in HTML
2019-03-14 15:41:26,524 INFO  Successfully processed the response from service
2019-03-14 15:41:35,298 INFO  Setting request parameters for VerifySolution
2019-03-14 15:41:35,298 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:41:35,298 INFO  Starting to parse the user solution
2019-03-14 15:41:35,298 INFO  Displaying user solution
2019-03-14 15:41:35,344 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.__circle_list\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:41:35,344 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:41:35,344 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:41:35,344 INFO  Invoking the service to verify the user solution
2019-03-14 15:41:35,344 INFO  Time before invoking service:Thu Mar 14 15:41:35 IST 2019
2019-03-14 15:41:35,344 INFO  Initialising service address for VerifySolution
2019-03-14 15:41:35,344 INFO  Time before invoking service In SUPER:Thu Mar 14 15:41:35 IST 2019
2019-03-14 15:41:36,298 INFO  Time after invoking service In SUPER:Thu Mar 14 15:41:36 IST 2019
2019-03-14 15:41:36,298 INFO  Service responded successfully with required details
2019-03-14 15:41:36,298 INFO  Time after invoking service:Thu Mar 14 15:41:36 IST 2019
2019-03-14 15:41:36,298 INFO  User solution successfully verified
2019-03-14 15:41:36,298 INFO  Processing the response from verify service
2019-03-14 15:41:36,298 INFO  Starting to parse JSON response
2019-03-14 15:41:36,298 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:41:36,298 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:41:36,298 INFO  Successfully parsed JSON response
2019-03-14 15:41:36,298 INFO  In the process of generating verify response in HTML
2019-03-14 15:41:36,391 INFO  Successfully generated verify response in HTML
2019-03-14 15:41:36,391 INFO  Successfully processed the response from service
2019-03-14 15:43:10,411 INFO  Setting request parameters for VerifySolution
2019-03-14 15:43:10,411 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:43:10,411 INFO  Starting to parse the user solution
2019-03-14 15:43:10,411 INFO  Displaying user solution
2019-03-14 15:43:10,458 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.get_circle_list()\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:43:10,458 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:43:10,458 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:43:10,458 INFO  Invoking the service to verify the user solution
2019-03-14 15:43:10,458 INFO  Time before invoking service:Thu Mar 14 15:43:10 IST 2019
2019-03-14 15:43:10,458 INFO  Initialising service address for VerifySolution
2019-03-14 15:43:10,458 INFO  Time before invoking service In SUPER:Thu Mar 14 15:43:10 IST 2019
2019-03-14 15:43:11,505 INFO  Time after invoking service In SUPER:Thu Mar 14 15:43:11 IST 2019
2019-03-14 15:43:11,505 INFO  Service responded successfully with required details
2019-03-14 15:43:11,505 INFO  Time after invoking service:Thu Mar 14 15:43:11 IST 2019
2019-03-14 15:43:11,505 INFO  User solution successfully verified
2019-03-14 15:43:11,505 INFO  Processing the response from verify service
2019-03-14 15:43:11,505 INFO  Starting to parse JSON response
2019-03-14 15:43:11,505 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:43:11,505 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:43:11,505 INFO  Successfully parsed JSON response
2019-03-14 15:43:11,505 INFO  In the process of generating verify response in HTML
2019-03-14 15:43:11,599 INFO  Successfully generated verify response in HTML
2019-03-14 15:43:11,599 INFO  Successfully processed the response from service
2019-03-14 15:44:44,386 INFO  Setting request parameters for VerifySolution
2019-03-14 15:44:44,386 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:44:44,386 INFO  Starting to parse the user solution
2019-03-14 15:44:44,386 INFO  Displaying user solution
2019-03-14 15:44:44,464 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.get_circle_list()\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:44:44,464 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:44:44,464 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:44:44,464 INFO  Invoking the service to verify the user solution
2019-03-14 15:44:44,464 INFO  Time before invoking service:Thu Mar 14 15:44:44 IST 2019
2019-03-14 15:44:44,464 INFO  Initialising service address for VerifySolution
2019-03-14 15:44:44,464 INFO  Time before invoking service In SUPER:Thu Mar 14 15:44:44 IST 2019
2019-03-14 15:44:49,199 INFO  Time after invoking service In SUPER:Thu Mar 14 15:44:49 IST 2019
2019-03-14 15:44:49,199 INFO  Service responded successfully with required details
2019-03-14 15:44:49,199 INFO  Time after invoking service:Thu Mar 14 15:44:49 IST 2019
2019-03-14 15:44:49,199 INFO  User solution successfully verified
2019-03-14 15:44:49,199 INFO  Processing the response from verify service
2019-03-14 15:44:49,199 INFO  Starting to parse JSON response
2019-03-14 15:44:49,199 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:44:49,199 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:44:49,199 INFO  Successfully parsed JSON response
2019-03-14 15:44:49,199 INFO  In the process of generating verify response in HTML
2019-03-14 15:44:49,292 INFO  Successfully generated verify response in HTML
2019-03-14 15:44:49,292 INFO  Successfully processed the response from service
2019-03-14 15:45:39,240 INFO  Setting request parameters for VerifySolution
2019-03-14 15:45:39,240 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:45:39,240 INFO  Starting to parse the user solution
2019-03-14 15:45:39,240 INFO  Displaying user solution
2019-03-14 15:45:39,287 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.get_circle_list()\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:45:39,287 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:45:39,287 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:45:39,287 INFO  Invoking the service to verify the user solution
2019-03-14 15:45:39,287 INFO  Time before invoking service:Thu Mar 14 15:45:39 IST 2019
2019-03-14 15:45:39,287 INFO  Initialising service address for VerifySolution
2019-03-14 15:45:39,287 INFO  Time before invoking service In SUPER:Thu Mar 14 15:45:39 IST 2019
2019-03-14 15:45:40,318 INFO  Time after invoking service In SUPER:Thu Mar 14 15:45:40 IST 2019
2019-03-14 15:45:40,318 INFO  Service responded successfully with required details
2019-03-14 15:45:40,318 INFO  Time after invoking service:Thu Mar 14 15:45:40 IST 2019
2019-03-14 15:45:40,318 INFO  User solution successfully verified
2019-03-14 15:45:40,318 INFO  Processing the response from verify service
2019-03-14 15:45:40,318 INFO  Starting to parse JSON response
2019-03-14 15:45:40,318 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:45:40,318 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:45:40,318 INFO  Successfully parsed JSON response
2019-03-14 15:45:40,318 INFO  In the process of generating verify response in HTML
2019-03-14 15:45:40,428 INFO  Successfully generated verify response in HTML
2019-03-14 15:45:40,428 INFO  Successfully processed the response from service
2019-03-14 15:45:48,375 INFO  Setting request parameters for VerifySolution
2019-03-14 15:45:48,375 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:45:48,375 INFO  Starting to parse the user solution
2019-03-14 15:45:48,375 INFO  Displaying user solution
2019-03-14 15:45:48,453 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.get_circle_list()\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:45:48,453 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:45:48,453 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:45:48,453 INFO  Invoking the service to verify the user solution
2019-03-14 15:45:48,453 INFO  Time before invoking service:Thu Mar 14 15:45:48 IST 2019
2019-03-14 15:45:48,453 INFO  Initialising service address for VerifySolution
2019-03-14 15:45:48,453 INFO  Time before invoking service In SUPER:Thu Mar 14 15:45:48 IST 2019
2019-03-14 15:45:49,578 INFO  Time after invoking service In SUPER:Thu Mar 14 15:45:49 IST 2019
2019-03-14 15:45:49,578 INFO  Service responded successfully with required details
2019-03-14 15:45:49,578 INFO  Time after invoking service:Thu Mar 14 15:45:49 IST 2019
2019-03-14 15:45:49,578 INFO  User solution successfully verified
2019-03-14 15:45:49,578 INFO  Processing the response from verify service
2019-03-14 15:45:49,594 INFO  Starting to parse JSON response
2019-03-14 15:45:49,594 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:45:49,594 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:45:49,594 INFO  Successfully parsed JSON response
2019-03-14 15:45:49,594 INFO  In the process of generating verify response in HTML
2019-03-14 15:45:49,672 INFO  Successfully generated verify response in HTML
2019-03-14 15:45:49,672 INFO  Successfully processed the response from service
2019-03-14 15:46:10,942 INFO  Setting request parameters for VerifySolution
2019-03-14 15:46:10,942 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:46:10,942 INFO  Starting to parse the user solution
2019-03-14 15:46:10,942 INFO  Displaying user solution
2019-03-14 15:46:11,005 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        return self.get_circle_list()\r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:46:11,005 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:46:11,005 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:46:11,005 INFO  Invoking the service to verify the user solution
2019-03-14 15:46:11,005 INFO  Time before invoking service:Thu Mar 14 15:46:11 IST 2019
2019-03-14 15:46:11,005 INFO  Initialising service address for VerifySolution
2019-03-14 15:46:11,005 INFO  Time before invoking service In SUPER:Thu Mar 14 15:46:11 IST 2019
2019-03-14 15:46:11,864 INFO  Time after invoking service In SUPER:Thu Mar 14 15:46:11 IST 2019
2019-03-14 15:46:11,864 INFO  Service responded successfully with required details
2019-03-14 15:46:11,864 INFO  Time after invoking service:Thu Mar 14 15:46:11 IST 2019
2019-03-14 15:46:11,864 INFO  User solution successfully verified
2019-03-14 15:46:11,864 INFO  Processing the response from verify service
2019-03-14 15:46:11,880 INFO  Starting to parse JSON response
2019-03-14 15:46:11,880 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:46:11,880 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:46:11,880 INFO  Successfully parsed JSON response
2019-03-14 15:46:11,880 INFO  In the process of generating verify response in HTML
2019-03-14 15:46:11,973 INFO  Successfully generated verify response in HTML
2019-03-14 15:46:11,973 INFO  Successfully processed the response from service
2019-03-14 15:46:31,147 INFO  Setting request parameters for VerifySolution
2019-03-14 15:46:31,147 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:46:31,147 INFO  Starting to parse the user solution
2019-03-14 15:46:31,147 INFO  Displaying user solution
2019-03-14 15:46:31,194 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:46:31,194 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:46:31,194 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:46:31,194 INFO  Invoking the service to verify the user solution
2019-03-14 15:46:31,194 INFO  Time before invoking service:Thu Mar 14 15:46:31 IST 2019
2019-03-14 15:46:31,194 INFO  Initialising service address for VerifySolution
2019-03-14 15:46:31,194 INFO  Time before invoking service In SUPER:Thu Mar 14 15:46:31 IST 2019
2019-03-14 15:46:32,241 INFO  Time after invoking service In SUPER:Thu Mar 14 15:46:32 IST 2019
2019-03-14 15:46:32,241 INFO  Service responded successfully with required details
2019-03-14 15:46:32,241 INFO  Time after invoking service:Thu Mar 14 15:46:32 IST 2019
2019-03-14 15:46:32,241 INFO  User solution successfully verified
2019-03-14 15:46:32,241 INFO  Processing the response from verify service
2019-03-14 15:46:32,241 INFO  Starting to parse JSON response
2019-03-14 15:46:32,257 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:46:32,257 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:46:32,257 INFO  Successfully parsed JSON response
2019-03-14 15:46:32,257 INFO  In the process of generating verify response in HTML
2019-03-14 15:46:32,319 INFO  Successfully generated verify response in HTML
2019-03-14 15:46:32,319 INFO  Successfully processed the response from service
2019-03-14 15:48:46,846 INFO  Setting request parameters for VerifySolution
2019-03-14 15:48:46,846 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:48:46,846 INFO  Starting to parse the user solution
2019-03-14 15:48:46,846 INFO  Displaying user solution
2019-03-14 15:48:46,909 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle).__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:48:46,909 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:48:46,909 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:48:46,909 INFO  Invoking the service to verify the user solution
2019-03-14 15:48:46,909 INFO  Time before invoking service:Thu Mar 14 15:48:46 IST 2019
2019-03-14 15:48:46,909 INFO  Initialising service address for VerifySolution
2019-03-14 15:48:46,909 INFO  Time before invoking service In SUPER:Thu Mar 14 15:48:46 IST 2019
2019-03-14 15:48:47,987 INFO  Time after invoking service In SUPER:Thu Mar 14 15:48:47 IST 2019
2019-03-14 15:48:47,987 INFO  Service responded successfully with required details
2019-03-14 15:48:47,987 INFO  Time after invoking service:Thu Mar 14 15:48:47 IST 2019
2019-03-14 15:48:47,987 INFO  User solution successfully verified
2019-03-14 15:48:47,987 INFO  Processing the response from verify service
2019-03-14 15:48:47,987 INFO  Starting to parse JSON response
2019-03-14 15:48:47,987 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:48:47,987 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:48:47,987 INFO  Successfully parsed JSON response
2019-03-14 15:48:47,987 INFO  In the process of generating verify response in HTML
2019-03-14 15:48:48,081 INFO  Successfully generated verify response in HTML
2019-03-14 15:48:48,081 INFO  Successfully processed the response from service
2019-03-14 15:54:24,745 INFO  Setting request parameters for VerifySolution
2019-03-14 15:54:24,745 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:54:24,745 INFO  Starting to parse the user solution
2019-03-14 15:54:24,745 INFO  Displaying user solution
2019-03-14 15:54:24,792 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__tail=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle).__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:54:24,792 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:54:24,792 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:54:24,792 INFO  Invoking the service to verify the user solution
2019-03-14 15:54:24,792 INFO  Time before invoking service:Thu Mar 14 15:54:24 IST 2019
2019-03-14 15:54:24,792 INFO  Initialising service address for VerifySolution
2019-03-14 15:54:24,808 INFO  Time before invoking service In SUPER:Thu Mar 14 15:54:24 IST 2019
2019-03-14 15:54:26,995 INFO  Time after invoking service In SUPER:Thu Mar 14 15:54:26 IST 2019
2019-03-14 15:54:26,995 INFO  Service responded successfully with required details
2019-03-14 15:54:26,995 INFO  Time after invoking service:Thu Mar 14 15:54:26 IST 2019
2019-03-14 15:54:26,995 INFO  User solution successfully verified
2019-03-14 15:54:26,995 INFO  Processing the response from verify service
2019-03-14 15:54:26,995 INFO  Starting to parse JSON response
2019-03-14 15:54:27,011 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:54:27,011 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 15:54:27,011 INFO  Successfully parsed JSON response
2019-03-14 15:54:27,011 INFO  In the process of generating verify response in HTML
2019-03-14 15:54:27,105 INFO  Successfully generated verify response in HTML
2019-03-14 15:54:27,105 INFO  Successfully processed the response from service
2019-03-14 15:56:56,633 INFO  Setting request parameters for VerifySolution
2019-03-14 15:56:56,633 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:56:56,633 INFO  Starting to parse the user solution
2019-03-14 15:56:56,633 INFO  Displaying user solution
2019-03-14 15:56:56,680 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__circle_list.get_head() is None):\r\n            self.__circle_list.get_head()=self.__circle_list.get_tail()=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.get_head())\r\n            self.__circle_list.get_head()=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle).__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:56:56,680 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:56:56,680 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:56:56,680 INFO  Invoking the service to verify the user solution
2019-03-14 15:56:56,680 INFO  Time before invoking service:Thu Mar 14 15:56:56 IST 2019
2019-03-14 15:56:56,680 INFO  Initialising service address for VerifySolution
2019-03-14 15:56:56,680 INFO  Time before invoking service In SUPER:Thu Mar 14 15:56:56 IST 2019
2019-03-14 15:56:57,805 INFO  Time after invoking service In SUPER:Thu Mar 14 15:56:57 IST 2019
2019-03-14 15:56:57,805 INFO  Service responded successfully with required details
2019-03-14 15:56:57,805 INFO  Time after invoking service:Thu Mar 14 15:56:57 IST 2019
2019-03-14 15:56:57,805 INFO  User solution successfully verified
2019-03-14 15:56:57,805 INFO  Processing the response from verify service
2019-03-14 15:56:57,805 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 15:57:01,908 INFO  Setting request parameters for VerifySolution
2019-03-14 15:57:01,908 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:57:01,908 INFO  Starting to parse the user solution
2019-03-14 15:57:01,908 INFO  Displaying user solution
2019-03-14 15:57:01,971 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__circle_list.get_head() is None):\r\n            self.__circle_list.get_head()=self.__circle_list.get_tail()=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.get_head())\r\n            self.__circle_list.get_head()=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle).__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:57:01,971 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:57:01,971 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:57:01,971 INFO  Invoking the service to verify the user solution
2019-03-14 15:57:01,971 INFO  Time before invoking service:Thu Mar 14 15:57:01 IST 2019
2019-03-14 15:57:01,971 INFO  Initialising service address for VerifySolution
2019-03-14 15:57:01,971 INFO  Time before invoking service In SUPER:Thu Mar 14 15:57:01 IST 2019
2019-03-14 15:57:02,783 INFO  Time after invoking service In SUPER:Thu Mar 14 15:57:02 IST 2019
2019-03-14 15:57:02,783 INFO  Service responded successfully with required details
2019-03-14 15:57:02,783 INFO  Time after invoking service:Thu Mar 14 15:57:02 IST 2019
2019-03-14 15:57:02,783 INFO  User solution successfully verified
2019-03-14 15:57:02,783 INFO  Processing the response from verify service
2019-03-14 15:57:02,783 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 15:57:13,627 INFO  Setting request parameters for VerifySolution
2019-03-14 15:57:13,627 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:57:13,627 INFO  Starting to parse the user solution
2019-03-14 15:57:13,627 INFO  Displaying user solution
2019-03-14 15:57:13,674 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__circle_list.get_head() is None):\r\n            self.__circle_list.get_head()=self.__circle_list.get_tail()=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.get_head())\r\n            self.__circle_list.get_head()=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle).__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:57:13,674 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:57:13,674 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:57:13,674 INFO  Invoking the service to verify the user solution
2019-03-14 15:57:13,674 INFO  Time before invoking service:Thu Mar 14 15:57:13 IST 2019
2019-03-14 15:57:13,674 INFO  Initialising service address for VerifySolution
2019-03-14 15:57:13,674 INFO  Time before invoking service In SUPER:Thu Mar 14 15:57:13 IST 2019
2019-03-14 15:57:15,455 INFO  Time after invoking service In SUPER:Thu Mar 14 15:57:15 IST 2019
2019-03-14 15:57:15,455 INFO  Service responded successfully with required details
2019-03-14 15:57:15,455 INFO  Time after invoking service:Thu Mar 14 15:57:15 IST 2019
2019-03-14 15:57:15,455 INFO  User solution successfully verified
2019-03-14 15:57:15,455 INFO  Processing the response from verify service
2019-03-14 15:57:15,455 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 15:58:02,414 INFO  Setting request parameters for VerifySolution
2019-03-14 15:58:02,414 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 15:58:02,414 INFO  Starting to parse the user solution
2019-03-14 15:58:02,414 INFO  Displaying user solution
2019-03-14 15:58:02,477 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__circle_list.get_head() is None):\r\n            self.__circle_list.get_head()=self.__circle_list.get_tail()=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.get_head())\r\n            self.__circle_list.get_head()=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 15:58:02,477 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 15:58:02,477 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 15:58:02,477 INFO  Invoking the service to verify the user solution
2019-03-14 15:58:02,477 INFO  Time before invoking service:Thu Mar 14 15:58:02 IST 2019
2019-03-14 15:58:02,477 INFO  Initialising service address for VerifySolution
2019-03-14 15:58:02,493 INFO  Time before invoking service In SUPER:Thu Mar 14 15:58:02 IST 2019
2019-03-14 15:58:03,524 INFO  Time after invoking service In SUPER:Thu Mar 14 15:58:03 IST 2019
2019-03-14 15:58:03,524 INFO  Service responded successfully with required details
2019-03-14 15:58:03,524 INFO  Time after invoking service:Thu Mar 14 15:58:03 IST 2019
2019-03-14 15:58:03,524 INFO  User solution successfully verified
2019-03-14 15:58:03,524 INFO  Processing the response from verify service
2019-03-14 15:58:03,524 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 16:01:34,059 INFO  Setting request parameters for VerifySolution
2019-03-14 16:01:34,059 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:01:34,059 INFO  Starting to parse the user solution
2019-03-14 16:01:34,059 INFO  Displaying user solution
2019-03-14 16:01:34,105 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        if(self.__circle_list.__head is None):\r\n            self.__circle_list.__head=self.__circle_list.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.__head)\r\n            self.__circle_list.__head=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:01:34,105 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:01:34,105 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:01:34,105 INFO  Invoking the service to verify the user solution
2019-03-14 16:01:34,121 INFO  Time before invoking service:Thu Mar 14 16:01:34 IST 2019
2019-03-14 16:01:34,121 INFO  Initialising service address for VerifySolution
2019-03-14 16:01:34,121 INFO  Time before invoking service In SUPER:Thu Mar 14 16:01:34 IST 2019
2019-03-14 16:01:35,184 INFO  Time after invoking service In SUPER:Thu Mar 14 16:01:35 IST 2019
2019-03-14 16:01:35,184 INFO  Service responded successfully with required details
2019-03-14 16:01:35,184 INFO  Time after invoking service:Thu Mar 14 16:01:35 IST 2019
2019-03-14 16:01:35,184 INFO  User solution successfully verified
2019-03-14 16:01:35,184 INFO  Processing the response from verify service
2019-03-14 16:01:35,184 INFO  Starting to parse JSON response
2019-03-14 16:01:35,184 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:01:35,184 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:01:35,184 INFO  Successfully parsed JSON response
2019-03-14 16:01:35,184 INFO  In the process of generating verify response in HTML
2019-03-14 16:01:35,277 INFO  Successfully generated verify response in HTML
2019-03-14 16:01:35,277 INFO  Successfully processed the response from service
2019-03-14 16:11:21,608 INFO  Setting request parameters for VerifySolution
2019-03-14 16:11:21,608 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:11:21,608 INFO  Starting to parse the user solution
2019-03-14 16:11:21,608 INFO  Displaying user solution
2019-03-14 16:11:21,686 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        new_node=Node(new_circle)\r\n        self.__circle_list = LinkedList()\r\n        temp = self.__circle_list.get_head()\r\n        if(temp is None):\r\n            self.__circle_list.__head=self.__circle_list.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__circle_list.__head)\r\n            self.__circle_list.__head=new_node\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:11:21,686 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:11:21,686 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:11:21,686 INFO  Invoking the service to verify the user solution
2019-03-14 16:11:21,686 INFO  Time before invoking service:Thu Mar 14 16:11:21 IST 2019
2019-03-14 16:11:21,686 INFO  Initialising service address for VerifySolution
2019-03-14 16:11:21,686 INFO  Time before invoking service In SUPER:Thu Mar 14 16:11:21 IST 2019
2019-03-14 16:11:22,748 INFO  Time after invoking service In SUPER:Thu Mar 14 16:11:22 IST 2019
2019-03-14 16:11:22,748 INFO  Service responded successfully with required details
2019-03-14 16:11:22,748 INFO  Time after invoking service:Thu Mar 14 16:11:22 IST 2019
2019-03-14 16:11:22,748 INFO  User solution successfully verified
2019-03-14 16:11:22,748 INFO  Processing the response from verify service
2019-03-14 16:11:22,748 INFO  Starting to parse JSON response
2019-03-14 16:11:22,748 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:11:22,748 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:11:22,764 INFO  Successfully parsed JSON response
2019-03-14 16:11:22,764 INFO  In the process of generating verify response in HTML
2019-03-14 16:11:22,842 INFO  Successfully generated verify response in HTML
2019-03-14 16:11:22,842 INFO  Successfully processed the response from service
2019-03-14 16:25:25,411 INFO  Setting request parameters for VerifySolution
2019-03-14 16:25:25,411 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:25:25,411 INFO  Starting to parse the user solution
2019-03-14 16:25:25,411 INFO  Displaying user solution
2019-03-14 16:25:25,505 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n       \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:25:25,505 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:25:25,505 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:25:25,505 INFO  Invoking the service to verify the user solution
2019-03-14 16:25:25,505 INFO  Time before invoking service:Thu Mar 14 16:25:25 IST 2019
2019-03-14 16:25:25,505 INFO  Initialising service address for VerifySolution
2019-03-14 16:25:25,505 INFO  Time before invoking service In SUPER:Thu Mar 14 16:25:25 IST 2019
2019-03-14 16:25:26,630 INFO  Time after invoking service In SUPER:Thu Mar 14 16:25:26 IST 2019
2019-03-14 16:25:26,630 INFO  Service responded successfully with required details
2019-03-14 16:25:26,630 INFO  Time after invoking service:Thu Mar 14 16:25:26 IST 2019
2019-03-14 16:25:26,630 INFO  User solution successfully verified
2019-03-14 16:25:26,630 INFO  Processing the response from verify service
2019-03-14 16:25:26,630 INFO  Verification Failed : Unknown error
->Please Contact the educator
(error code:-57)
2019-03-14 16:33:07,619 INFO  Setting request parameters for VerifySolution
2019-03-14 16:33:07,619 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:33:07,619 INFO  Starting to parse the user solution
2019-03-14 16:33:07,619 INFO  Displaying user solution
2019-03-14 16:33:07,697 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n    def add1(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add1(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:33:07,697 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:33:07,697 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:33:07,697 INFO  Invoking the service to verify the user solution
2019-03-14 16:33:07,697 INFO  Time before invoking service:Thu Mar 14 16:33:07 IST 2019
2019-03-14 16:33:07,697 INFO  Initialising service address for VerifySolution
2019-03-14 16:33:07,697 INFO  Time before invoking service In SUPER:Thu Mar 14 16:33:07 IST 2019
2019-03-14 16:33:08,791 INFO  Time after invoking service In SUPER:Thu Mar 14 16:33:08 IST 2019
2019-03-14 16:33:08,791 INFO  Service responded successfully with required details
2019-03-14 16:33:08,791 INFO  Time after invoking service:Thu Mar 14 16:33:08 IST 2019
2019-03-14 16:33:08,791 INFO  User solution successfully verified
2019-03-14 16:33:08,791 INFO  Processing the response from verify service
2019-03-14 16:33:08,806 INFO  Starting to parse JSON response
2019-03-14 16:33:08,806 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:33:08,806 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:33:08,806 INFO  Successfully parsed JSON response
2019-03-14 16:33:08,806 INFO  In the process of generating verify response in HTML
2019-03-14 16:33:08,931 INFO  Successfully generated verify response in HTML
2019-03-14 16:33:08,931 INFO  Successfully processed the response from service
2019-03-14 16:33:39,012 INFO  Setting request parameters for VerifySolution
2019-03-14 16:33:39,012 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:33:39,012 INFO  Starting to parse the user solution
2019-03-14 16:33:39,012 INFO  Displaying user solution
2019-03-14 16:33:39,090 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n    def add1(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.add1(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:33:39,090 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:33:39,090 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:33:39,090 INFO  Invoking the service to verify the user solution
2019-03-14 16:33:39,090 INFO  Time before invoking service:Thu Mar 14 16:33:39 IST 2019
2019-03-14 16:33:39,090 INFO  Initialising service address for VerifySolution
2019-03-14 16:33:39,090 INFO  Time before invoking service In SUPER:Thu Mar 14 16:33:39 IST 2019
2019-03-14 16:33:40,122 INFO  Time after invoking service In SUPER:Thu Mar 14 16:33:40 IST 2019
2019-03-14 16:33:40,122 INFO  Service responded successfully with required details
2019-03-14 16:33:40,137 INFO  Time after invoking service:Thu Mar 14 16:33:40 IST 2019
2019-03-14 16:33:40,137 INFO  User solution successfully verified
2019-03-14 16:33:40,137 INFO  Processing the response from verify service
2019-03-14 16:33:40,137 INFO  Starting to parse JSON response
2019-03-14 16:33:40,137 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:33:40,137 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:33:40,137 INFO  Successfully parsed JSON response
2019-03-14 16:33:40,137 INFO  In the process of generating verify response in HTML
2019-03-14 16:33:40,247 INFO  Successfully generated verify response in HTML
2019-03-14 16:33:40,247 INFO  Successfully processed the response from service
2019-03-14 16:34:43,297 INFO  Setting request parameters for VerifySolution
2019-03-14 16:34:43,297 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:34:43,297 INFO  Starting to parse the user solution
2019-03-14 16:34:43,297 INFO  Displaying user solution
2019-03-14 16:34:43,360 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:34:43,360 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:34:43,360 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:34:43,360 INFO  Invoking the service to verify the user solution
2019-03-14 16:34:43,360 INFO  Time before invoking service:Thu Mar 14 16:34:43 IST 2019
2019-03-14 16:34:43,360 INFO  Initialising service address for VerifySolution
2019-03-14 16:34:43,360 INFO  Time before invoking service In SUPER:Thu Mar 14 16:34:43 IST 2019
2019-03-14 16:34:44,375 INFO  Time after invoking service In SUPER:Thu Mar 14 16:34:44 IST 2019
2019-03-14 16:34:44,375 INFO  Service responded successfully with required details
2019-03-14 16:34:44,375 INFO  Time after invoking service:Thu Mar 14 16:34:44 IST 2019
2019-03-14 16:34:44,375 INFO  User solution successfully verified
2019-03-14 16:34:44,375 INFO  Processing the response from verify service
2019-03-14 16:34:44,375 INFO  Starting to parse JSON response
2019-03-14 16:34:44,391 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:34:44,391 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:34:44,391 INFO  Successfully parsed JSON response
2019-03-14 16:34:44,391 INFO  In the process of generating verify response in HTML
2019-03-14 16:34:44,500 INFO  Successfully generated verify response in HTML
2019-03-14 16:34:44,500 INFO  Successfully processed the response from service
2019-03-14 16:35:12,375 INFO  Setting request parameters for VerifySolution
2019-03-14 16:35:12,375 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:35:12,375 INFO  Starting to parse the user solution
2019-03-14 16:35:12,375 INFO  Displaying user solution
2019-03-14 16:35:12,438 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().__str__()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:35:12,438 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:35:12,438 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:35:12,438 INFO  Invoking the service to verify the user solution
2019-03-14 16:35:12,438 INFO  Time before invoking service:Thu Mar 14 16:35:12 IST 2019
2019-03-14 16:35:12,438 INFO  Initialising service address for VerifySolution
2019-03-14 16:35:12,438 INFO  Time before invoking service In SUPER:Thu Mar 14 16:35:12 IST 2019
2019-03-14 16:35:13,484 INFO  Time after invoking service In SUPER:Thu Mar 14 16:35:13 IST 2019
2019-03-14 16:35:13,484 INFO  Service responded successfully with required details
2019-03-14 16:35:13,484 INFO  Time after invoking service:Thu Mar 14 16:35:13 IST 2019
2019-03-14 16:35:13,484 INFO  User solution successfully verified
2019-03-14 16:35:13,484 INFO  Processing the response from verify service
2019-03-14 16:35:13,484 INFO  Starting to parse JSON response
2019-03-14 16:35:13,484 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:35:13,484 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:35:13,484 INFO  Successfully parsed JSON response
2019-03-14 16:35:13,484 INFO  In the process of generating verify response in HTML
2019-03-14 16:35:13,609 INFO  Successfully generated verify response in HTML
2019-03-14 16:35:13,609 INFO  Successfully processed the response from service
2019-03-14 16:37:58,465 INFO  Setting request parameters for VerifySolution
2019-03-14 16:37:58,465 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:37:58,465 INFO  Starting to parse the user solution
2019-03-14 16:37:58,465 INFO  Displaying user solution
2019-03-14 16:37:58,512 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:37:58,527 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:37:58,527 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:37:58,527 INFO  Invoking the service to verify the user solution
2019-03-14 16:37:58,527 INFO  Time before invoking service:Thu Mar 14 16:37:58 IST 2019
2019-03-14 16:37:58,527 INFO  Initialising service address for VerifySolution
2019-03-14 16:37:58,527 INFO  Time before invoking service In SUPER:Thu Mar 14 16:37:58 IST 2019
2019-03-14 16:37:59,558 INFO  Time after invoking service In SUPER:Thu Mar 14 16:37:59 IST 2019
2019-03-14 16:37:59,558 INFO  Service responded successfully with required details
2019-03-14 16:37:59,558 INFO  Time after invoking service:Thu Mar 14 16:37:59 IST 2019
2019-03-14 16:37:59,558 INFO  User solution successfully verified
2019-03-14 16:37:59,558 INFO  Processing the response from verify service
2019-03-14 16:37:59,558 INFO  Starting to parse JSON response
2019-03-14 16:37:59,574 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:37:59,574 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:37:59,574 INFO  Successfully parsed JSON response
2019-03-14 16:37:59,574 INFO  In the process of generating verify response in HTML
2019-03-14 16:37:59,652 INFO  Successfully generated verify response in HTML
2019-03-14 16:37:59,652 INFO  Successfully processed the response from service
2019-03-14 16:39:03,280 INFO  Setting request parameters for VerifySolution
2019-03-14 16:39:03,280 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:39:03,280 INFO  Starting to parse the user solution
2019-03-14 16:39:03,280 INFO  Displaying user solution
2019-03-14 16:39:03,358 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n            \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:39:03,358 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:39:03,358 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:39:03,358 INFO  Invoking the service to verify the user solution
2019-03-14 16:39:03,358 INFO  Time before invoking service:Thu Mar 14 16:39:03 IST 2019
2019-03-14 16:39:03,358 INFO  Initialising service address for VerifySolution
2019-03-14 16:39:03,358 INFO  Time before invoking service In SUPER:Thu Mar 14 16:39:03 IST 2019
2019-03-14 16:39:04,561 INFO  Time after invoking service In SUPER:Thu Mar 14 16:39:04 IST 2019
2019-03-14 16:39:04,561 INFO  Service responded successfully with required details
2019-03-14 16:39:04,561 INFO  Time after invoking service:Thu Mar 14 16:39:04 IST 2019
2019-03-14 16:39:04,561 INFO  User solution successfully verified
2019-03-14 16:39:04,561 INFO  Processing the response from verify service
2019-03-14 16:39:04,577 INFO  Starting to parse JSON response
2019-03-14 16:39:04,577 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:39:04,577 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:39:04,577 INFO  Successfully parsed JSON response
2019-03-14 16:39:04,577 INFO  In the process of generating verify response in HTML
2019-03-14 16:39:04,670 INFO  Successfully generated verify response in HTML
2019-03-14 16:39:04,670 INFO  Successfully processed the response from service
2019-03-14 16:43:58,807 INFO  Setting request parameters for VerifySolution
2019-03-14 16:43:58,807 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:43:58,807 INFO  Starting to parse the user solution
2019-03-14 16:43:58,807 INFO  Displaying user solution
2019-03-14 16:43:58,869 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n            \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:43:58,869 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:43:58,869 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:43:58,869 INFO  Invoking the service to verify the user solution
2019-03-14 16:43:58,869 INFO  Time before invoking service:Thu Mar 14 16:43:58 IST 2019
2019-03-14 16:43:58,869 INFO  Initialising service address for VerifySolution
2019-03-14 16:43:58,869 INFO  Time before invoking service In SUPER:Thu Mar 14 16:43:58 IST 2019
2019-03-14 16:43:59,979 INFO  Time after invoking service In SUPER:Thu Mar 14 16:43:59 IST 2019
2019-03-14 16:43:59,979 INFO  Service responded successfully with required details
2019-03-14 16:43:59,979 INFO  Time after invoking service:Thu Mar 14 16:43:59 IST 2019
2019-03-14 16:43:59,979 INFO  User solution successfully verified
2019-03-14 16:43:59,979 INFO  Processing the response from verify service
2019-03-14 16:43:59,979 INFO  Starting to parse JSON response
2019-03-14 16:43:59,979 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:43:59,979 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:43:59,979 INFO  Successfully parsed JSON response
2019-03-14 16:43:59,979 INFO  In the process of generating verify response in HTML
2019-03-14 16:44:00,119 INFO  Successfully generated verify response in HTML
2019-03-14 16:44:00,119 INFO  Successfully processed the response from service
2019-03-14 16:44:54,104 INFO  Setting request parameters for VerifySolution
2019-03-14 16:44:54,104 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:44:54,104 INFO  Starting to parse the user solution
2019-03-14 16:44:54,104 INFO  Displaying user solution
2019-03-14 16:44:54,167 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:44:54,167 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:44:54,167 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:44:54,167 INFO  Invoking the service to verify the user solution
2019-03-14 16:44:54,167 INFO  Time before invoking service:Thu Mar 14 16:44:54 IST 2019
2019-03-14 16:44:54,167 INFO  Initialising service address for VerifySolution
2019-03-14 16:44:54,167 INFO  Time before invoking service In SUPER:Thu Mar 14 16:44:54 IST 2019
2019-03-14 16:44:55,261 INFO  Time after invoking service In SUPER:Thu Mar 14 16:44:55 IST 2019
2019-03-14 16:44:55,261 INFO  Service responded successfully with required details
2019-03-14 16:44:55,261 INFO  Time after invoking service:Thu Mar 14 16:44:55 IST 2019
2019-03-14 16:44:55,261 INFO  User solution successfully verified
2019-03-14 16:44:55,276 INFO  Processing the response from verify service
2019-03-14 16:44:55,276 INFO  Starting to parse JSON response
2019-03-14 16:44:55,276 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:44:55,276 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:44:55,276 INFO  Successfully parsed JSON response
2019-03-14 16:44:55,276 INFO  In the process of generating verify response in HTML
2019-03-14 16:44:55,386 INFO  Successfully generated verify response in HTML
2019-03-14 16:44:55,386 INFO  Successfully processed the response from service
2019-03-14 16:45:44,239 INFO  Setting request parameters for VerifySolution
2019-03-14 16:45:44,239 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:45:44,239 INFO  Starting to parse the user solution
2019-03-14 16:45:44,239 INFO  Displaying user solution
2019-03-14 16:45:44,317 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:45:44,317 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:45:44,317 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:45:44,317 INFO  Invoking the service to verify the user solution
2019-03-14 16:45:44,317 INFO  Time before invoking service:Thu Mar 14 16:45:44 IST 2019
2019-03-14 16:45:44,317 INFO  Initialising service address for VerifySolution
2019-03-14 16:45:44,317 INFO  Time before invoking service In SUPER:Thu Mar 14 16:45:44 IST 2019
2019-03-14 16:45:45,254 INFO  Time after invoking service In SUPER:Thu Mar 14 16:45:45 IST 2019
2019-03-14 16:45:45,254 INFO  Service responded successfully with required details
2019-03-14 16:45:45,270 INFO  Time after invoking service:Thu Mar 14 16:45:45 IST 2019
2019-03-14 16:45:45,270 INFO  User solution successfully verified
2019-03-14 16:45:45,270 INFO  Processing the response from verify service
2019-03-14 16:45:45,270 INFO  Starting to parse JSON response
2019-03-14 16:45:45,270 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:45:45,270 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:45:45,270 INFO  Successfully parsed JSON response
2019-03-14 16:45:45,286 INFO  In the process of generating verify response in HTML
2019-03-14 16:45:45,442 INFO  Successfully generated verify response in HTML
2019-03-14 16:45:45,442 INFO  Successfully processed the response from service
2019-03-14 16:47:24,245 INFO  Setting request parameters for VerifySolution
2019-03-14 16:47:24,245 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:47:24,245 INFO  Starting to parse the user solution
2019-03-14 16:47:24,245 INFO  Displaying user solution
2019-03-14 16:47:24,323 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:47:24,323 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:47:24,323 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:47:24,323 INFO  Invoking the service to verify the user solution
2019-03-14 16:47:24,323 INFO  Time before invoking service:Thu Mar 14 16:47:24 IST 2019
2019-03-14 16:47:24,323 INFO  Initialising service address for VerifySolution
2019-03-14 16:47:24,323 INFO  Time before invoking service In SUPER:Thu Mar 14 16:47:24 IST 2019
2019-03-14 16:47:25,323 INFO  Time after invoking service In SUPER:Thu Mar 14 16:47:25 IST 2019
2019-03-14 16:47:25,323 INFO  Service responded successfully with required details
2019-03-14 16:47:25,323 INFO  Time after invoking service:Thu Mar 14 16:47:25 IST 2019
2019-03-14 16:47:25,323 INFO  User solution successfully verified
2019-03-14 16:47:25,323 INFO  Processing the response from verify service
2019-03-14 16:47:25,323 INFO  Starting to parse JSON response
2019-03-14 16:47:25,323 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:47:25,323 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:47:25,339 INFO  Successfully parsed JSON response
2019-03-14 16:47:25,339 INFO  In the process of generating verify response in HTML
2019-03-14 16:47:25,417 INFO  Successfully generated verify response in HTML
2019-03-14 16:47:25,417 INFO  Successfully processed the response from service
2019-03-14 16:50:29,951 INFO  Setting request parameters for VerifySolution
2019-03-14 16:50:29,951 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 16:50:29,951 INFO  Starting to parse the user solution
2019-03-14 16:50:29,951 INFO  Displaying user solution
2019-03-14 16:50:30,029 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 16:50:30,045 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 16:50:30,045 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 16:50:30,045 INFO  Invoking the service to verify the user solution
2019-03-14 16:50:30,045 INFO  Time before invoking service:Thu Mar 14 16:50:30 IST 2019
2019-03-14 16:50:30,045 INFO  Initialising service address for VerifySolution
2019-03-14 16:50:30,045 INFO  Time before invoking service In SUPER:Thu Mar 14 16:50:30 IST 2019
2019-03-14 16:50:31,170 INFO  Time after invoking service In SUPER:Thu Mar 14 16:50:31 IST 2019
2019-03-14 16:50:31,170 INFO  Service responded successfully with required details
2019-03-14 16:50:31,170 INFO  Time after invoking service:Thu Mar 14 16:50:31 IST 2019
2019-03-14 16:50:31,170 INFO  User solution successfully verified
2019-03-14 16:50:31,170 INFO  Processing the response from verify service
2019-03-14 16:50:31,170 INFO  Starting to parse JSON response
2019-03-14 16:50:31,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:50:31,170 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 16:50:31,170 INFO  Successfully parsed JSON response
2019-03-14 16:50:31,170 INFO  In the process of generating verify response in HTML
2019-03-14 16:50:31,279 INFO  Successfully generated verify response in HTML
2019-03-14 16:50:31,279 INFO  Successfully processed the response from service
2019-03-14 17:01:33,956 INFO  Setting request parameters for VerifySolution
2019-03-14 17:01:33,956 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:01:33,956 INFO  Starting to parse the user solution
2019-03-14 17:01:33,956 INFO  Displaying user solution
2019-03-14 17:01:34,050 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:01:34,065 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:01:34,065 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:01:34,065 INFO  Invoking the service to verify the user solution
2019-03-14 17:01:34,065 INFO  Time before invoking service:Thu Mar 14 17:01:34 IST 2019
2019-03-14 17:01:34,065 INFO  Initialising service address for VerifySolution
2019-03-14 17:01:34,081 INFO  Time before invoking service In SUPER:Thu Mar 14 17:01:34 IST 2019
2019-03-14 17:01:35,566 INFO  Time after invoking service In SUPER:Thu Mar 14 17:01:35 IST 2019
2019-03-14 17:01:35,566 INFO  Service responded successfully with required details
2019-03-14 17:01:35,566 INFO  Time after invoking service:Thu Mar 14 17:01:35 IST 2019
2019-03-14 17:01:35,566 INFO  User solution successfully verified
2019-03-14 17:01:35,566 INFO  Processing the response from verify service
2019-03-14 17:01:35,566 INFO  Starting to parse JSON response
2019-03-14 17:01:35,582 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:01:35,582 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:01:35,582 INFO  Successfully parsed JSON response
2019-03-14 17:01:35,582 INFO  In the process of generating verify response in HTML
2019-03-14 17:01:35,676 INFO  Successfully generated verify response in HTML
2019-03-14 17:01:35,676 INFO  Successfully processed the response from service
2019-03-14 17:02:35,176 INFO  Setting request parameters for VerifySolution
2019-03-14 17:02:35,176 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:02:35,176 INFO  Starting to parse the user solution
2019-03-14 17:02:35,176 INFO  Displaying user solution
2019-03-14 17:02:35,286 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:02:35,286 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:02:35,286 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:02:35,286 INFO  Invoking the service to verify the user solution
2019-03-14 17:02:35,286 INFO  Time before invoking service:Thu Mar 14 17:02:35 IST 2019
2019-03-14 17:02:35,286 INFO  Initialising service address for VerifySolution
2019-03-14 17:02:35,286 INFO  Time before invoking service In SUPER:Thu Mar 14 17:02:35 IST 2019
2019-03-14 17:02:36,380 INFO  Time after invoking service In SUPER:Thu Mar 14 17:02:36 IST 2019
2019-03-14 17:02:36,380 INFO  Service responded successfully with required details
2019-03-14 17:02:36,380 INFO  Time after invoking service:Thu Mar 14 17:02:36 IST 2019
2019-03-14 17:02:36,380 INFO  User solution successfully verified
2019-03-14 17:02:36,380 INFO  Processing the response from verify service
2019-03-14 17:02:36,380 INFO  Starting to parse JSON response
2019-03-14 17:02:36,380 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:02:36,380 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:02:36,380 INFO  Successfully parsed JSON response
2019-03-14 17:02:36,395 INFO  In the process of generating verify response in HTML
2019-03-14 17:02:36,536 INFO  Successfully generated verify response in HTML
2019-03-14 17:02:36,536 INFO  Successfully processed the response from service
2019-03-14 17:03:33,534 INFO  Setting request parameters for VerifySolution
2019-03-14 17:03:33,534 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:03:33,534 INFO  Starting to parse the user solution
2019-03-14 17:03:33,534 INFO  Displaying user solution
2019-03-14 17:03:33,608 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        self.__circle_list.first_add(new_circle)\r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:03:33,609 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:03:33,609 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:03:33,609 INFO  Invoking the service to verify the user solution
2019-03-14 17:03:33,610 INFO  Time before invoking service:Thu Mar 14 17:03:33 IST 2019
2019-03-14 17:03:33,610 INFO  Initialising service address for VerifySolution
2019-03-14 17:03:33,611 INFO  Time before invoking service In SUPER:Thu Mar 14 17:03:33 IST 2019
2019-03-14 17:03:34,722 INFO  Time after invoking service In SUPER:Thu Mar 14 17:03:34 IST 2019
2019-03-14 17:03:34,722 INFO  Service responded successfully with required details
2019-03-14 17:03:34,722 INFO  Time after invoking service:Thu Mar 14 17:03:34 IST 2019
2019-03-14 17:03:34,722 INFO  User solution successfully verified
2019-03-14 17:03:34,722 INFO  Processing the response from verify service
2019-03-14 17:03:34,722 INFO  Starting to parse JSON response
2019-03-14 17:03:34,738 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:03:34,738 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:03:34,738 INFO  Successfully parsed JSON response
2019-03-14 17:03:34,738 INFO  In the process of generating verify response in HTML
2019-03-14 17:03:34,863 INFO  Successfully generated verify response in HTML
2019-03-14 17:03:34,863 INFO  Successfully processed the response from service
2019-03-14 17:06:13,199 INFO  Setting request parameters for VerifySolution
2019-03-14 17:06:13,199 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:06:13,199 INFO  Starting to parse the user solution
2019-03-14 17:06:13,199 INFO  Displaying user solution
2019-03-14 17:06:13,262 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n        if(new_circle is not None):\r\n            self.__circle_list.first_add(new_circle)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:06:13,262 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:06:13,262 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:06:13,262 INFO  Invoking the service to verify the user solution
2019-03-14 17:06:13,262 INFO  Time before invoking service:Thu Mar 14 17:06:13 IST 2019
2019-03-14 17:06:13,262 INFO  Initialising service address for VerifySolution
2019-03-14 17:06:13,262 INFO  Time before invoking service In SUPER:Thu Mar 14 17:06:13 IST 2019
2019-03-14 17:06:14,762 INFO  Time after invoking service In SUPER:Thu Mar 14 17:06:14 IST 2019
2019-03-14 17:06:14,762 INFO  Service responded successfully with required details
2019-03-14 17:06:14,762 INFO  Time after invoking service:Thu Mar 14 17:06:14 IST 2019
2019-03-14 17:06:14,762 INFO  User solution successfully verified
2019-03-14 17:06:14,762 INFO  Processing the response from verify service
2019-03-14 17:06:14,762 INFO  Starting to parse JSON response
2019-03-14 17:06:14,762 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:06:14,762 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:06:14,762 INFO  Successfully parsed JSON response
2019-03-14 17:06:14,762 INFO  In the process of generating verify response in HTML
2019-03-14 17:06:14,840 INFO  Successfully generated verify response in HTML
2019-03-14 17:06:14,840 INFO  Successfully processed the response from service
2019-03-14 17:08:16,905 INFO  Setting request parameters for VerifySolution
2019-03-14 17:08:16,905 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:08:16,905 INFO  Starting to parse the user solution
2019-03-14 17:08:16,905 INFO  Displaying user solution
2019-03-14 17:08:16,968 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n            self.__circle_list.first_add(new_circle)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:08:16,968 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:08:16,968 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:08:16,968 INFO  Invoking the service to verify the user solution
2019-03-14 17:08:16,968 INFO  Time before invoking service:Thu Mar 14 17:08:16 IST 2019
2019-03-14 17:08:16,968 INFO  Initialising service address for VerifySolution
2019-03-14 17:08:16,968 INFO  Time before invoking service In SUPER:Thu Mar 14 17:08:16 IST 2019
2019-03-14 17:08:17,905 INFO  Time after invoking service In SUPER:Thu Mar 14 17:08:17 IST 2019
2019-03-14 17:08:17,905 INFO  Service responded successfully with required details
2019-03-14 17:08:17,905 INFO  Time after invoking service:Thu Mar 14 17:08:17 IST 2019
2019-03-14 17:08:17,905 INFO  User solution successfully verified
2019-03-14 17:08:17,905 INFO  Processing the response from verify service
2019-03-14 17:08:17,905 INFO  Starting to parse JSON response
2019-03-14 17:08:17,905 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:08:17,905 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:08:17,905 INFO  Successfully parsed JSON response
2019-03-14 17:08:17,905 INFO  In the process of generating verify response in HTML
2019-03-14 17:08:17,999 INFO  Successfully generated verify response in HTML
2019-03-14 17:08:17,999 INFO  Successfully processed the response from service
2019-03-14 17:09:08,377 INFO  Setting request parameters for VerifySolution
2019-03-14 17:09:08,377 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:09:08,377 INFO  Starting to parse the user solution
2019-03-14 17:09:08,377 INFO  Displaying user solution
2019-03-14 17:09:08,409 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n            self.__circle_list.first_add(new_circle)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:09:08,409 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:09:08,409 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:09:08,409 INFO  Invoking the service to verify the user solution
2019-03-14 17:09:08,409 INFO  Time before invoking service:Thu Mar 14 17:09:08 IST 2019
2019-03-14 17:09:08,409 INFO  Initialising service address for VerifySolution
2019-03-14 17:09:08,409 INFO  Time before invoking service In SUPER:Thu Mar 14 17:09:08 IST 2019
2019-03-14 17:09:09,315 INFO  Time after invoking service In SUPER:Thu Mar 14 17:09:09 IST 2019
2019-03-14 17:09:09,315 INFO  Service responded successfully with required details
2019-03-14 17:09:09,315 INFO  Time after invoking service:Thu Mar 14 17:09:09 IST 2019
2019-03-14 17:09:09,315 INFO  User solution successfully verified
2019-03-14 17:09:09,315 INFO  Processing the response from verify service
2019-03-14 17:09:09,330 INFO  Starting to parse JSON response
2019-03-14 17:09:09,330 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:09:09,330 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:09:09,330 INFO  Successfully parsed JSON response
2019-03-14 17:09:09,330 INFO  In the process of generating verify response in HTML
2019-03-14 17:09:09,409 INFO  Successfully generated verify response in HTML
2019-03-14 17:09:09,409 INFO  Successfully processed the response from service
2019-03-14 17:09:16,390 INFO  Setting request parameters for VerifySolution
2019-03-14 17:09:16,390 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:09:16,390 INFO  Starting to parse the user solution
2019-03-14 17:09:16,390 INFO  Displaying user solution
2019-03-14 17:09:16,437 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    \r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n            self.__circle_list.first_add(new_circle)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:09:16,437 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:09:16,437 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:09:16,437 INFO  Invoking the service to verify the user solution
2019-03-14 17:09:16,437 INFO  Time before invoking service:Thu Mar 14 17:09:16 IST 2019
2019-03-14 17:09:16,437 INFO  Initialising service address for VerifySolution
2019-03-14 17:09:16,437 INFO  Time before invoking service In SUPER:Thu Mar 14 17:09:16 IST 2019
2019-03-14 17:09:17,315 INFO  Time after invoking service In SUPER:Thu Mar 14 17:09:17 IST 2019
2019-03-14 17:09:17,315 INFO  Service responded successfully with required details
2019-03-14 17:09:17,315 INFO  Time after invoking service:Thu Mar 14 17:09:17 IST 2019
2019-03-14 17:09:17,315 INFO  User solution successfully verified
2019-03-14 17:09:17,315 INFO  Processing the response from verify service
2019-03-14 17:09:17,315 INFO  Starting to parse JSON response
2019-03-14 17:09:17,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:09:17,315 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:09:17,315 INFO  Successfully parsed JSON response
2019-03-14 17:09:17,315 INFO  In the process of generating verify response in HTML
2019-03-14 17:09:17,393 INFO  Successfully generated verify response in HTML
2019-03-14 17:09:17,393 INFO  Successfully processed the response from service
2019-03-14 17:10:31,767 INFO  Setting request parameters for VerifySolution
2019-03-14 17:10:31,767 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:10:31,767 INFO  Starting to parse the user solution
2019-03-14 17:10:31,767 INFO  Displaying user solution
2019-03-14 17:10:31,861 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n    def first_add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            \r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle):\r\n            self.__circle_list.first_add(new_circle)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 17:10:31,861 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:10:31,861 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:10:31,861 INFO  Invoking the service to verify the user solution
2019-03-14 17:10:31,861 INFO  Time before invoking service:Thu Mar 14 17:10:31 IST 2019
2019-03-14 17:10:31,861 INFO  Initialising service address for VerifySolution
2019-03-14 17:10:31,861 INFO  Time before invoking service In SUPER:Thu Mar 14 17:10:31 IST 2019
2019-03-14 17:10:32,924 INFO  Time after invoking service In SUPER:Thu Mar 14 17:10:32 IST 2019
2019-03-14 17:10:32,924 INFO  Service responded successfully with required details
2019-03-14 17:10:32,924 INFO  Time after invoking service:Thu Mar 14 17:10:32 IST 2019
2019-03-14 17:10:32,924 INFO  User solution successfully verified
2019-03-14 17:10:32,924 INFO  Processing the response from verify service
2019-03-14 17:10:32,939 INFO  Starting to parse JSON response
2019-03-14 17:10:32,939 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:10:32,939 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:10:32,939 INFO  Successfully parsed JSON response
2019-03-14 17:10:32,939 INFO  In the process of generating verify response in HTML
2019-03-14 17:10:33,189 INFO  Successfully generated verify response in HTML
2019-03-14 17:10:33,189 INFO  Successfully processed the response from service
2019-03-14 17:29:05,729 INFO  Setting request parameters for VerifySolution
2019-03-14 17:29:05,729 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 17:29:05,729 INFO  Starting to parse the user solution
2019-03-14 17:29:05,729 INFO  Displaying user solution
2019-03-14 17:29:05,839 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 17:29:05,839 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 17:29:05,839 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 17:29:05,839 INFO  Invoking the service to verify the user solution
2019-03-14 17:29:05,839 INFO  Time before invoking service:Thu Mar 14 17:29:05 IST 2019
2019-03-14 17:29:05,839 INFO  Initialising service address for VerifySolution
2019-03-14 17:29:05,839 INFO  Time before invoking service In SUPER:Thu Mar 14 17:29:05 IST 2019
2019-03-14 17:29:06,792 INFO  Time after invoking service In SUPER:Thu Mar 14 17:29:06 IST 2019
2019-03-14 17:29:06,792 INFO  Service responded successfully with required details
2019-03-14 17:29:06,792 INFO  Time after invoking service:Thu Mar 14 17:29:06 IST 2019
2019-03-14 17:29:06,792 INFO  User solution successfully verified
2019-03-14 17:29:06,792 INFO  Processing the response from verify service
2019-03-14 17:29:06,792 INFO  Starting to parse JSON response
2019-03-14 17:29:06,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:29:06,792 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 17:29:06,792 INFO  Successfully parsed JSON response
2019-03-14 17:29:06,792 INFO  In the process of generating verify response in HTML
2019-03-14 17:29:06,886 INFO  Successfully generated verify response in HTML
2019-03-14 17:29:06,886 INFO  Successfully processed the response from service
2019-03-14 18:01:01,858 INFO  Loading Baseframework Plugin
2019-03-14 18:01:01,860 INFO  Initializing the platform to load the Menu - HandsOn
2019-03-14 18:01:01,861 INFO  Loading the Menu - HandsOn
2019-03-14 18:01:01,869 INFO  Successfully loaded the Menu - HandsOn
2019-03-14 19:06:36,196 INFO  Loading Programming Assignment Plugin
2019-03-14 19:06:36,523 INFO  Setting request parameters for VerifySolution
2019-03-14 19:06:36,524 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:06:36,529 INFO  Starting to parse the user solution
2019-03-14 19:06:36,529 INFO  Displaying user solution
2019-03-14 19:06:36,610 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle): \r\n        LinkedList.insert(new_circle, None)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 19:06:36,611 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:06:36,612 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:06:36,612 INFO  Invoking the service to verify the user solution
2019-03-14 19:06:36,612 INFO  Time before invoking service:Thu Mar 14 19:06:36 IST 2019
2019-03-14 19:06:36,613 INFO  Initialising service address for VerifySolution
2019-03-14 19:06:36,614 INFO  Time before invoking service In SUPER:Thu Mar 14 19:06:36 IST 2019
2019-03-14 19:06:37,664 INFO  Time after invoking service In SUPER:Thu Mar 14 19:06:37 IST 2019
2019-03-14 19:06:37,664 INFO  Service responded successfully with required details
2019-03-14 19:06:37,664 INFO  Time after invoking service:Thu Mar 14 19:06:37 IST 2019
2019-03-14 19:06:37,664 INFO  User solution successfully verified
2019-03-14 19:06:37,665 INFO  Processing the response from verify service
2019-03-14 19:06:37,668 INFO  Starting to parse JSON response
2019-03-14 19:06:37,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:06:37,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:06:37,674 INFO  Successfully parsed JSON response
2019-03-14 19:06:37,674 INFO  In the process of generating verify response in HTML
2019-03-14 19:06:38,160 INFO  Successfully generated verify response in HTML
2019-03-14 19:06:38,161 INFO  Successfully processed the response from service
2019-03-14 19:06:50,837 INFO  Setting request parameters for VerifySolution
2019-03-14 19:06:50,837 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:06:50,837 INFO  Starting to parse the user solution
2019-03-14 19:06:50,838 INFO  Displaying user solution
2019-03-14 19:06:50,915 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle): \r\n        LinkedList.insert(new_circle,None)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 19:06:50,916 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:06:50,917 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:06:50,917 INFO  Invoking the service to verify the user solution
2019-03-14 19:06:50,917 INFO  Time before invoking service:Thu Mar 14 19:06:50 IST 2019
2019-03-14 19:06:50,917 INFO  Initialising service address for VerifySolution
2019-03-14 19:06:50,918 INFO  Time before invoking service In SUPER:Thu Mar 14 19:06:50 IST 2019
2019-03-14 19:06:51,799 INFO  Time after invoking service In SUPER:Thu Mar 14 19:06:51 IST 2019
2019-03-14 19:06:51,799 INFO  Service responded successfully with required details
2019-03-14 19:06:51,800 INFO  Time after invoking service:Thu Mar 14 19:06:51 IST 2019
2019-03-14 19:06:51,800 INFO  User solution successfully verified
2019-03-14 19:06:51,800 INFO  Processing the response from verify service
2019-03-14 19:06:51,802 INFO  Starting to parse JSON response
2019-03-14 19:06:51,803 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:06:51,803 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:06:51,804 INFO  Successfully parsed JSON response
2019-03-14 19:06:51,804 INFO  In the process of generating verify response in HTML
2019-03-14 19:06:51,884 INFO  Successfully generated verify response in HTML
2019-03-14 19:06:51,884 INFO  Successfully processed the response from service
2019-03-14 19:07:03,749 INFO  Setting request parameters for VerifySolution
2019-03-14 19:07:03,749 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:07:03,749 INFO  Starting to parse the user solution
2019-03-14 19:07:03,750 INFO  Displaying user solution
2019-03-14 19:07:03,815 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle): \r\n        LinkedList.insert(self,new_circle,None)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 19:07:03,815 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:07:03,815 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:07:03,816 INFO  Invoking the service to verify the user solution
2019-03-14 19:07:03,816 INFO  Time before invoking service:Thu Mar 14 19:07:03 IST 2019
2019-03-14 19:07:03,816 INFO  Initialising service address for VerifySolution
2019-03-14 19:07:03,816 INFO  Time before invoking service In SUPER:Thu Mar 14 19:07:03 IST 2019
2019-03-14 19:07:04,701 INFO  Time after invoking service In SUPER:Thu Mar 14 19:07:04 IST 2019
2019-03-14 19:07:04,701 INFO  Service responded successfully with required details
2019-03-14 19:07:04,701 INFO  Time after invoking service:Thu Mar 14 19:07:04 IST 2019
2019-03-14 19:07:04,702 INFO  User solution successfully verified
2019-03-14 19:07:04,702 INFO  Processing the response from verify service
2019-03-14 19:07:04,704 INFO  Starting to parse JSON response
2019-03-14 19:07:04,705 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:07:04,705 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:07:04,706 INFO  Successfully parsed JSON response
2019-03-14 19:07:04,706 INFO  In the process of generating verify response in HTML
2019-03-14 19:07:04,771 INFO  Successfully generated verify response in HTML
2019-03-14 19:07:04,771 INFO  Successfully processed the response from service
2019-03-14 19:07:33,179 INFO  Setting request parameters for VerifySolution
2019-03-14 19:07:33,179 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:07:33,179 INFO  Starting to parse the user solution
2019-03-14 19:07:33,180 INFO  Displaying user solution
2019-03-14 19:07:33,236 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Exer-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        self.__data=data\r\n        self.__next=None\r\n\r\n    def get_data(self):\r\n        return self.__data\r\n\r\n    def set_data(self,data):\r\n        self.__data=data\r\n\r\n    def get_next(self):\r\n        return self.__next\r\n\r\n    def set_next(self,next_node):\r\n        self.__next=next_node\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.__head=None\r\n        self.__tail=None\r\n\r\n    def get_head(self):\r\n        return self.__head\r\n\r\n    def get_tail(self):\r\n        return self.__tail\r\n\r\n\r\n    def add(self,data):\r\n        new_node=Node(data)\r\n        if(self.__head is None):\r\n            self.__head=self.__tail=new_node\r\n        else:\r\n            self.__tail.set_next(new_node)\r\n            self.__tail=new_node\r\n\r\n    def insert(self,data,data_before):\r\n        new_node=Node(data)\r\n        if(data_before==None):\r\n            new_node.set_next(self.__head)\r\n            self.__head=new_node\r\n            if(new_node.get_next()==None):\r\n                self.__tail=new_node\r\n\r\n        else:\r\n            node_before=self.find_node(data_before)\r\n            if(node_before is not None):\r\n                new_node.set_next(node_before.get_next())\r\n                node_before.set_next(new_node)\r\n                if(new_node.get_next() is None):\r\n                    self.__tail=new_node\r\n            else:\r\n                print(data_before,\"is not present in the Linked list\")\r\n\r\n    def display(self):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            print(temp.get_data())\r\n            temp=temp.get_next()\r\n\r\n\r\n    def find_node(self,data):\r\n        temp=self.__head\r\n        while(temp is not None):\r\n            if(temp.get_data()==data):\r\n                return temp\r\n            temp=temp.get_next()\r\n        return None\r\n\r\n    def delete(self,data):\r\n        node=self.find_node(data)\r\n        if(node is not None):\r\n            if(node==self.__head):\r\n                if(self.__head==self.__tail):\r\n                    self.__tail=None\r\n                self.__head=node.get_next()\r\n            else:\r\n                temp=self.__head\r\n                while(temp is not None):\r\n                    if(temp.get_next()==node):\r\n                        temp.set_next(node.get_next())\r\n                        if(node==self.__tail):\r\n                            self.__tail=temp\r\n                        node.set_next(None)\r\n                        break\r\n                    temp=temp.get_next()\r\n        else:\r\n            print(data,\"is not present in Linked list\")\r\n\r\n    #You can use the below __str__() to print the elements of the DS object while debugging\r\n    def __str__(self):\r\n        temp=self.__head\r\n        msg=[]\r\n        while(temp is not None):\r\n            msg.append(str(temp.get_data()))\r\n            temp=temp.get_next()\r\n        msg=\" \".join(msg)\r\n        msg=\"Linkedlist data(Head to Tail): \"+ msg\r\n        return msg\r\n\r\nclass Circle:\r\n    def __init__(self, color,radius):\r\n        self.__color=color\r\n        self.__radius=radius\r\n    \r\n    def __str__(self):\r\n        return (self.__color+\" \"+str(self.__radius))\r\n    \r\n    def get_color(self):\r\n        return self.__color\r\n    \r\n    def get_radius(self):\r\n        return self.__radius\r\n    \r\n    \r\nclass Shape:\r\n    def __init__(self,circle_list):\r\n        self.__circle_list=circle_list\r\n\r\n    def get_circle_list(self):\r\n        return self.__circle_list\r\n\r\n    def insert_circle(self,new_circle): \r\n        self.__circle_list.insert(new_circle,None)\r\n        \r\n            \r\n        \r\n        \r\n    \r\n        # Write your logic here\r\n        \r\n\r\ncircle1=Circle(\"Red\",4)\r\ncircle2=Circle(\"Green\",5)\r\ncircle3=Circle(\"Purple\",3.5)\r\nnew_circle=Circle(\"Blue\",6)\r\n\r\ncircle_list=LinkedList()\r\ncircle_list.add(circle1)\r\ncircle_list.add(circle2)\r\ncircle_list.add(circle3)\r\n\r\nshape=Shape(circle_list)\r\nshape.insert_circle(new_circle)\r\nshape.get_circle_list().display()\r\n","asgnmtId":"5","SolutionFileName":"Excer5.py","AsgnmtTyp":"E","TestcaseFileName":""}
2019-03-14 19:07:33,237 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:07:33,237 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:07:33,237 INFO  Invoking the service to verify the user solution
2019-03-14 19:07:33,237 INFO  Time before invoking service:Thu Mar 14 19:07:33 IST 2019
2019-03-14 19:07:33,237 INFO  Initialising service address for VerifySolution
2019-03-14 19:07:33,238 INFO  Time before invoking service In SUPER:Thu Mar 14 19:07:33 IST 2019
2019-03-14 19:07:34,165 INFO  Time after invoking service In SUPER:Thu Mar 14 19:07:34 IST 2019
2019-03-14 19:07:34,166 INFO  Service responded successfully with required details
2019-03-14 19:07:34,166 INFO  Time after invoking service:Thu Mar 14 19:07:34 IST 2019
2019-03-14 19:07:34,166 INFO  User solution successfully verified
2019-03-14 19:07:34,166 INFO  Processing the response from verify service
2019-03-14 19:07:34,169 INFO  Starting to parse JSON response
2019-03-14 19:07:34,171 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:07:34,171 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:07:34,172 INFO  Successfully parsed JSON response
2019-03-14 19:07:34,172 INFO  In the process of generating verify response in HTML
2019-03-14 19:07:34,248 INFO  Successfully generated verify response in HTML
2019-03-14 19:07:34,249 INFO  Successfully processed the response from service
2019-03-14 19:07:38,345 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 19:07:38,349 INFO  Displaying user solution
2019-03-14 19:07:38,357 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 19:07:38,357 INFO  Invoking the service to submit the user solution
2019-03-14 19:07:38,357 INFO  Initialising service address for Submit
2019-03-14 19:07:38,358 INFO  Time before invoking service In SUPER:Thu Mar 14 19:07:38 IST 2019
2019-03-14 19:07:38,760 INFO  Time after invoking service In SUPER:Thu Mar 14 19:07:38 IST 2019
2019-03-14 19:07:38,761 INFO  Service responded successfully with required details
2019-03-14 19:07:38,761 INFO  User solution successfully submitted
2019-03-14 19:07:38,761 INFO  Displaying submission status
2019-03-14 19:07:38,761 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 19:07:41,391 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 19:07:41,392 INFO  Displaying user solution
2019-03-14 19:07:41,401 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 19:07:41,401 INFO  Invoking the service to submit the user solution
2019-03-14 19:07:41,401 INFO  Initialising service address for Submit
2019-03-14 19:07:41,402 INFO  Time before invoking service In SUPER:Thu Mar 14 19:07:41 IST 2019
2019-03-14 19:07:41,675 INFO  Time after invoking service In SUPER:Thu Mar 14 19:07:41 IST 2019
2019-03-14 19:07:41,675 INFO  Service responded successfully with required details
2019-03-14 19:07:41,675 INFO  User solution successfully submitted
2019-03-14 19:07:41,675 INFO  Displaying submission status
2019-03-14 19:07:41,675 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 19:34:44,396 INFO  Setting request parameters for VerifySolution
2019-03-14 19:34:44,396 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:34:44,396 INFO  Starting to parse the user solution
2019-03-14 19:34:44,397 INFO  Displaying user solution
2019-03-14 19:34:44,489 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:34:44,489 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:34:44,490 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:34:44,490 INFO  Invoking the service to verify the user solution
2019-03-14 19:34:44,490 INFO  Time before invoking service:Thu Mar 14 19:34:44 IST 2019
2019-03-14 19:34:44,490 INFO  Initialising service address for VerifySolution
2019-03-14 19:34:44,491 INFO  Time before invoking service In SUPER:Thu Mar 14 19:34:44 IST 2019
2019-03-14 19:34:45,341 INFO  Time after invoking service In SUPER:Thu Mar 14 19:34:45 IST 2019
2019-03-14 19:34:45,341 INFO  Service responded successfully with required details
2019-03-14 19:34:45,342 INFO  Time after invoking service:Thu Mar 14 19:34:45 IST 2019
2019-03-14 19:34:45,342 INFO  User solution successfully verified
2019-03-14 19:34:45,342 INFO  Processing the response from verify service
2019-03-14 19:34:45,347 INFO  Starting to parse JSON response
2019-03-14 19:34:45,348 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:34:45,348 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:34:45,349 INFO  Successfully parsed JSON response
2019-03-14 19:34:45,350 INFO  In the process of generating verify response in HTML
2019-03-14 19:34:45,422 INFO  Successfully generated verify response in HTML
2019-03-14 19:34:45,423 INFO  Successfully processed the response from service
2019-03-14 19:34:51,944 INFO  Setting request parameters for VerifySolution
2019-03-14 19:34:51,944 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:34:51,944 INFO  Starting to parse the user solution
2019-03-14 19:34:51,945 INFO  Displaying user solution
2019-03-14 19:34:51,998 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:34:51,999 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:34:51,999 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:34:51,999 INFO  Invoking the service to verify the user solution
2019-03-14 19:34:51,999 INFO  Time before invoking service:Thu Mar 14 19:34:51 IST 2019
2019-03-14 19:34:51,999 INFO  Initialising service address for VerifySolution
2019-03-14 19:34:52,000 INFO  Time before invoking service In SUPER:Thu Mar 14 19:34:52 IST 2019
2019-03-14 19:34:52,762 INFO  Time after invoking service In SUPER:Thu Mar 14 19:34:52 IST 2019
2019-03-14 19:34:52,762 INFO  Service responded successfully with required details
2019-03-14 19:34:52,762 INFO  Time after invoking service:Thu Mar 14 19:34:52 IST 2019
2019-03-14 19:34:52,762 INFO  User solution successfully verified
2019-03-14 19:34:52,763 INFO  Processing the response from verify service
2019-03-14 19:34:52,764 INFO  Starting to parse JSON response
2019-03-14 19:34:52,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:34:52,764 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:34:52,765 INFO  Successfully parsed JSON response
2019-03-14 19:34:52,765 INFO  In the process of generating verify response in HTML
2019-03-14 19:34:52,839 INFO  Successfully generated verify response in HTML
2019-03-14 19:34:52,839 INFO  Successfully processed the response from service
2019-03-14 19:35:25,695 INFO  Setting request parameters for VerifySolution
2019-03-14 19:35:25,695 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:35:25,695 INFO  Starting to parse the user solution
2019-03-14 19:35:25,695 INFO  Displaying user solution
2019-03-14 19:35:25,762 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:35:25,762 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:35:25,762 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:35:25,762 INFO  Invoking the service to verify the user solution
2019-03-14 19:35:25,762 INFO  Time before invoking service:Thu Mar 14 19:35:25 IST 2019
2019-03-14 19:35:25,762 INFO  Initialising service address for VerifySolution
2019-03-14 19:35:25,762 INFO  Time before invoking service In SUPER:Thu Mar 14 19:35:25 IST 2019
2019-03-14 19:35:27,304 INFO  Time after invoking service In SUPER:Thu Mar 14 19:35:27 IST 2019
2019-03-14 19:35:27,305 INFO  Service responded successfully with required details
2019-03-14 19:35:27,305 INFO  Time after invoking service:Thu Mar 14 19:35:27 IST 2019
2019-03-14 19:35:27,305 INFO  User solution successfully verified
2019-03-14 19:35:27,305 INFO  Processing the response from verify service
2019-03-14 19:35:27,306 INFO  Starting to parse JSON response
2019-03-14 19:35:27,307 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:35:27,307 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:35:27,308 INFO  Successfully parsed JSON response
2019-03-14 19:35:27,309 INFO  In the process of generating verify response in HTML
2019-03-14 19:35:27,374 INFO  Successfully generated verify response in HTML
2019-03-14 19:35:27,374 INFO  Successfully processed the response from service
2019-03-14 19:36:02,959 INFO  Setting request parameters for VerifySolution
2019-03-14 19:36:02,959 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:36:02,959 INFO  Starting to parse the user solution
2019-03-14 19:36:02,959 INFO  Displaying user solution
2019-03-14 19:36:03,029 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:36:03,030 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:36:03,030 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:36:03,030 INFO  Invoking the service to verify the user solution
2019-03-14 19:36:03,030 INFO  Time before invoking service:Thu Mar 14 19:36:03 IST 2019
2019-03-14 19:36:03,030 INFO  Initialising service address for VerifySolution
2019-03-14 19:36:03,031 INFO  Time before invoking service In SUPER:Thu Mar 14 19:36:03 IST 2019
2019-03-14 19:36:03,830 INFO  Time after invoking service In SUPER:Thu Mar 14 19:36:03 IST 2019
2019-03-14 19:36:03,830 INFO  Service responded successfully with required details
2019-03-14 19:36:03,831 INFO  Time after invoking service:Thu Mar 14 19:36:03 IST 2019
2019-03-14 19:36:03,831 INFO  User solution successfully verified
2019-03-14 19:36:03,831 INFO  Processing the response from verify service
2019-03-14 19:36:03,832 INFO  Starting to parse JSON response
2019-03-14 19:36:03,833 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:36:03,833 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:36:03,834 INFO  Successfully parsed JSON response
2019-03-14 19:36:03,834 INFO  In the process of generating verify response in HTML
2019-03-14 19:36:03,902 INFO  Successfully generated verify response in HTML
2019-03-14 19:36:03,903 INFO  Successfully processed the response from service
2019-03-14 19:36:41,086 INFO  Setting request parameters for VerifySolution
2019-03-14 19:36:41,086 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:36:41,086 INFO  Starting to parse the user solution
2019-03-14 19:36:41,087 INFO  Displaying user solution
2019-03-14 19:36:41,138 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:36:41,138 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:36:41,138 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:36:41,138 INFO  Invoking the service to verify the user solution
2019-03-14 19:36:41,139 INFO  Time before invoking service:Thu Mar 14 19:36:41 IST 2019
2019-03-14 19:36:41,139 INFO  Initialising service address for VerifySolution
2019-03-14 19:36:41,140 INFO  Time before invoking service In SUPER:Thu Mar 14 19:36:41 IST 2019
2019-03-14 19:36:42,057 INFO  Time after invoking service In SUPER:Thu Mar 14 19:36:42 IST 2019
2019-03-14 19:36:42,057 INFO  Service responded successfully with required details
2019-03-14 19:36:42,057 INFO  Time after invoking service:Thu Mar 14 19:36:42 IST 2019
2019-03-14 19:36:42,057 INFO  User solution successfully verified
2019-03-14 19:36:42,058 INFO  Processing the response from verify service
2019-03-14 19:36:42,059 INFO  Starting to parse JSON response
2019-03-14 19:36:42,059 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:36:42,059 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:36:42,060 INFO  Successfully parsed JSON response
2019-03-14 19:36:42,060 INFO  In the process of generating verify response in HTML
2019-03-14 19:36:42,125 INFO  Successfully generated verify response in HTML
2019-03-14 19:36:42,125 INFO  Successfully processed the response from service
2019-03-14 19:39:27,868 INFO  Setting request parameters for VerifySolution
2019-03-14 19:39:27,869 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:39:27,869 INFO  Starting to parse the user solution
2019-03-14 19:39:27,870 INFO  Displaying user solution
2019-03-14 19:39:27,939 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new=='*' or new=='/'):\r\n            new_sentence+=' '\r\n        elif(new_sentence[-2:]=='  '):\r\n            new_sentence+=new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n        new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:39:27,939 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:39:27,940 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:39:27,940 INFO  Invoking the service to verify the user solution
2019-03-14 19:39:27,940 INFO  Time before invoking service:Thu Mar 14 19:39:27 IST 2019
2019-03-14 19:39:27,940 INFO  Initialising service address for VerifySolution
2019-03-14 19:39:27,942 INFO  Time before invoking service In SUPER:Thu Mar 14 19:39:27 IST 2019
2019-03-14 19:39:28,824 INFO  Time after invoking service In SUPER:Thu Mar 14 19:39:28 IST 2019
2019-03-14 19:39:28,824 INFO  Service responded successfully with required details
2019-03-14 19:39:28,824 INFO  Time after invoking service:Thu Mar 14 19:39:28 IST 2019
2019-03-14 19:39:28,825 INFO  User solution successfully verified
2019-03-14 19:39:28,825 INFO  Processing the response from verify service
2019-03-14 19:39:28,828 INFO  Starting to parse JSON response
2019-03-14 19:39:28,829 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:39:28,829 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:39:28,830 INFO  Successfully parsed JSON response
2019-03-14 19:39:28,830 INFO  In the process of generating verify response in HTML
2019-03-14 19:39:28,898 INFO  Successfully generated verify response in HTML
2019-03-14 19:39:28,898 INFO  Successfully processed the response from service
2019-03-14 19:42:22,531 INFO  Setting request parameters for VerifySolution
2019-03-14 19:42:22,531 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 19:42:22,531 INFO  Starting to parse the user solution
2019-03-14 19:42:22,532 INFO  Displaying user solution
2019-03-14 19:42:22,599 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    # Write your logic here\r\n    new_sentence=\"\"\r\n    tmp = ''\r\n    current = word_list.get_head()\r\n    while (current):\r\n        tmp = current.get_data()\r\n        if tmp == \"*\" or tmp == \"/\":\r\n            new_sentence +=\" \"\r\n        elif new_sentence[-2:] == \"  \":\r\n            new_sentence += tmp.upper()\r\n        else:\r\n            new_sentence += tmp\r\n        current = current.get_next()\r\n\r\n    new_sentence = new_sentence.replace('  ', ' ') \r\n    return new_sentence\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 19:42:22,599 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 19:42:22,599 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 19:42:22,599 INFO  Invoking the service to verify the user solution
2019-03-14 19:42:22,600 INFO  Time before invoking service:Thu Mar 14 19:42:22 IST 2019
2019-03-14 19:42:22,600 INFO  Initialising service address for VerifySolution
2019-03-14 19:42:22,600 INFO  Time before invoking service In SUPER:Thu Mar 14 19:42:22 IST 2019
2019-03-14 19:42:23,427 INFO  Time after invoking service In SUPER:Thu Mar 14 19:42:23 IST 2019
2019-03-14 19:42:23,427 INFO  Service responded successfully with required details
2019-03-14 19:42:23,427 INFO  Time after invoking service:Thu Mar 14 19:42:23 IST 2019
2019-03-14 19:42:23,427 INFO  User solution successfully verified
2019-03-14 19:42:23,428 INFO  Processing the response from verify service
2019-03-14 19:42:23,429 INFO  Starting to parse JSON response
2019-03-14 19:42:23,430 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:42:23,430 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 19:42:23,431 INFO  Successfully parsed JSON response
2019-03-14 19:42:23,431 INFO  In the process of generating verify response in HTML
2019-03-14 19:42:23,499 INFO  Successfully generated verify response in HTML
2019-03-14 19:42:23,499 INFO  Successfully processed the response from service
2019-03-14 20:00:36,569 INFO  Setting request parameters for VerifySolution
2019-03-14 20:00:36,569 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:00:36,569 INFO  Starting to parse the user solution
2019-03-14 20:00:36,569 INFO  Displaying user solution
2019-03-14 20:00:36,639 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    new=''\r\n    while(temp):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:00:36,640 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:00:36,640 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:00:36,640 INFO  Invoking the service to verify the user solution
2019-03-14 20:00:36,642 INFO  Time before invoking service:Thu Mar 14 20:00:36 IST 2019
2019-03-14 20:00:36,642 INFO  Initialising service address for VerifySolution
2019-03-14 20:00:36,642 INFO  Time before invoking service In SUPER:Thu Mar 14 20:00:36 IST 2019
2019-03-14 20:00:37,484 INFO  Time after invoking service In SUPER:Thu Mar 14 20:00:37 IST 2019
2019-03-14 20:00:37,484 INFO  Service responded successfully with required details
2019-03-14 20:00:37,484 INFO  Time after invoking service:Thu Mar 14 20:00:37 IST 2019
2019-03-14 20:00:37,485 INFO  User solution successfully verified
2019-03-14 20:00:37,485 INFO  Processing the response from verify service
2019-03-14 20:00:37,487 INFO  Starting to parse JSON response
2019-03-14 20:00:37,487 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:00:37,487 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:00:37,488 INFO  Successfully parsed JSON response
2019-03-14 20:00:37,488 INFO  In the process of generating verify response in HTML
2019-03-14 20:00:37,556 INFO  Successfully generated verify response in HTML
2019-03-14 20:00:37,556 INFO  Successfully processed the response from service
2019-03-14 20:00:42,585 INFO  Setting request parameters for VerifySolution
2019-03-14 20:00:42,585 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:00:42,585 INFO  Starting to parse the user solution
2019-03-14 20:00:42,585 INFO  Displaying user solution
2019-03-14 20:00:42,644 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    new=''\r\n    while(temp):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:00:42,645 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:00:42,645 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:00:42,645 INFO  Invoking the service to verify the user solution
2019-03-14 20:00:42,646 INFO  Time before invoking service:Thu Mar 14 20:00:42 IST 2019
2019-03-14 20:00:42,646 INFO  Initialising service address for VerifySolution
2019-03-14 20:00:42,647 INFO  Time before invoking service In SUPER:Thu Mar 14 20:00:42 IST 2019
2019-03-14 20:00:43,468 INFO  Time after invoking service In SUPER:Thu Mar 14 20:00:43 IST 2019
2019-03-14 20:00:43,468 INFO  Service responded successfully with required details
2019-03-14 20:00:43,468 INFO  Time after invoking service:Thu Mar 14 20:00:43 IST 2019
2019-03-14 20:00:43,468 INFO  User solution successfully verified
2019-03-14 20:00:43,469 INFO  Processing the response from verify service
2019-03-14 20:00:43,470 INFO  Starting to parse JSON response
2019-03-14 20:00:43,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:00:43,472 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:00:43,473 INFO  Successfully parsed JSON response
2019-03-14 20:00:43,473 INFO  In the process of generating verify response in HTML
2019-03-14 20:00:43,536 INFO  Successfully generated verify response in HTML
2019-03-14 20:00:43,536 INFO  Successfully processed the response from service
2019-03-14 20:00:46,013 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 20:00:46,014 INFO  Displaying user solution
2019-03-14 20:00:46,021 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 20:00:46,021 INFO  Invoking the service to submit the user solution
2019-03-14 20:00:46,021 INFO  Initialising service address for Submit
2019-03-14 20:00:46,022 INFO  Time before invoking service In SUPER:Thu Mar 14 20:00:46 IST 2019
2019-03-14 20:00:46,397 INFO  Time after invoking service In SUPER:Thu Mar 14 20:00:46 IST 2019
2019-03-14 20:00:46,397 INFO  Service responded successfully with required details
2019-03-14 20:00:46,397 INFO  User solution successfully submitted
2019-03-14 20:00:46,398 INFO  Displaying submission status
2019-03-14 20:00:46,398 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 20:01:38,566 INFO  Setting request parameters for VerifySolution
2019-03-14 20:01:38,567 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:01:38,567 INFO  Starting to parse the user solution
2019-03-14 20:01:38,567 INFO  Displaying user solution
2019-03-14 20:01:38,623 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    new=''\r\n    while(temp):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:01:38,624 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:01:38,624 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:01:38,624 INFO  Invoking the service to verify the user solution
2019-03-14 20:01:38,625 INFO  Time before invoking service:Thu Mar 14 20:01:38 IST 2019
2019-03-14 20:01:38,625 INFO  Initialising service address for VerifySolution
2019-03-14 20:01:38,625 INFO  Time before invoking service In SUPER:Thu Mar 14 20:01:38 IST 2019
2019-03-14 20:01:39,446 INFO  Time after invoking service In SUPER:Thu Mar 14 20:01:39 IST 2019
2019-03-14 20:01:39,446 INFO  Service responded successfully with required details
2019-03-14 20:01:39,446 INFO  Time after invoking service:Thu Mar 14 20:01:39 IST 2019
2019-03-14 20:01:39,446 INFO  User solution successfully verified
2019-03-14 20:01:39,447 INFO  Processing the response from verify service
2019-03-14 20:01:39,448 INFO  Starting to parse JSON response
2019-03-14 20:01:39,448 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:01:39,449 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:01:39,449 INFO  Successfully parsed JSON response
2019-03-14 20:01:39,450 INFO  In the process of generating verify response in HTML
2019-03-14 20:01:39,512 INFO  Successfully generated verify response in HTML
2019-03-14 20:01:39,513 INFO  Successfully processed the response from service
2019-03-14 20:01:43,834 INFO  Setting request parameters for VerifySolution
2019-03-14 20:01:43,834 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:01:43,834 INFO  Starting to parse the user solution
2019-03-14 20:01:43,834 INFO  Displaying user solution
2019-03-14 20:01:43,891 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    \r\n    while(temp):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:01:43,891 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:01:43,891 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:01:43,892 INFO  Invoking the service to verify the user solution
2019-03-14 20:01:43,892 INFO  Time before invoking service:Thu Mar 14 20:01:43 IST 2019
2019-03-14 20:01:43,892 INFO  Initialising service address for VerifySolution
2019-03-14 20:01:43,892 INFO  Time before invoking service In SUPER:Thu Mar 14 20:01:43 IST 2019
2019-03-14 20:01:44,780 INFO  Time after invoking service In SUPER:Thu Mar 14 20:01:44 IST 2019
2019-03-14 20:01:44,780 INFO  Service responded successfully with required details
2019-03-14 20:01:44,780 INFO  Time after invoking service:Thu Mar 14 20:01:44 IST 2019
2019-03-14 20:01:44,780 INFO  User solution successfully verified
2019-03-14 20:01:44,781 INFO  Processing the response from verify service
2019-03-14 20:01:44,781 INFO  Starting to parse JSON response
2019-03-14 20:01:44,782 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:01:44,782 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:01:44,783 INFO  Successfully parsed JSON response
2019-03-14 20:01:44,783 INFO  In the process of generating verify response in HTML
2019-03-14 20:01:44,850 INFO  Successfully generated verify response in HTML
2019-03-14 20:01:44,850 INFO  Successfully processed the response from service
2019-03-14 20:02:03,684 INFO  Setting request parameters for VerifySolution
2019-03-14 20:02:03,684 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:02:03,685 INFO  Starting to parse the user solution
2019-03-14 20:02:03,685 INFO  Displaying user solution
2019-03-14 20:02:03,749 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:02:03,749 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:02:03,749 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:02:03,749 INFO  Invoking the service to verify the user solution
2019-03-14 20:02:03,751 INFO  Time before invoking service:Thu Mar 14 20:02:03 IST 2019
2019-03-14 20:02:03,751 INFO  Initialising service address for VerifySolution
2019-03-14 20:02:03,751 INFO  Time before invoking service In SUPER:Thu Mar 14 20:02:03 IST 2019
2019-03-14 20:02:04,669 INFO  Time after invoking service In SUPER:Thu Mar 14 20:02:04 IST 2019
2019-03-14 20:02:04,670 INFO  Service responded successfully with required details
2019-03-14 20:02:04,670 INFO  Time after invoking service:Thu Mar 14 20:02:04 IST 2019
2019-03-14 20:02:04,670 INFO  User solution successfully verified
2019-03-14 20:02:04,670 INFO  Processing the response from verify service
2019-03-14 20:02:04,671 INFO  Starting to parse JSON response
2019-03-14 20:02:04,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:04,671 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:04,672 INFO  Successfully parsed JSON response
2019-03-14 20:02:04,672 INFO  In the process of generating verify response in HTML
2019-03-14 20:02:04,735 INFO  Successfully generated verify response in HTML
2019-03-14 20:02:04,735 INFO  Successfully processed the response from service
2019-03-14 20:02:08,371 INFO  Setting request parameters for VerifySolution
2019-03-14 20:02:08,371 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:02:08,371 INFO  Starting to parse the user solution
2019-03-14 20:02:08,372 INFO  Displaying user solution
2019-03-14 20:02:08,415 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:02:08,416 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:02:08,416 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:02:08,416 INFO  Invoking the service to verify the user solution
2019-03-14 20:02:08,416 INFO  Time before invoking service:Thu Mar 14 20:02:08 IST 2019
2019-03-14 20:02:08,416 INFO  Initialising service address for VerifySolution
2019-03-14 20:02:08,417 INFO  Time before invoking service In SUPER:Thu Mar 14 20:02:08 IST 2019
2019-03-14 20:02:08,884 INFO  Time after invoking service In SUPER:Thu Mar 14 20:02:08 IST 2019
2019-03-14 20:02:08,885 INFO  Service responded successfully with required details
2019-03-14 20:02:08,885 INFO  Time after invoking service:Thu Mar 14 20:02:08 IST 2019
2019-03-14 20:02:08,885 INFO  User solution successfully verified
2019-03-14 20:02:08,885 INFO  Processing the response from verify service
2019-03-14 20:02:08,886 INFO  Starting to parse JSON response
2019-03-14 20:02:08,887 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:08,887 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:08,887 INFO  Successfully parsed JSON response
2019-03-14 20:02:08,887 INFO  In the process of generating verify response in HTML
2019-03-14 20:02:08,951 INFO  Successfully generated verify response in HTML
2019-03-14 20:02:08,951 INFO  Successfully processed the response from service
2019-03-14 20:02:13,227 INFO  Setting request parameters for VerifySolution
2019-03-14 20:02:13,227 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:02:13,227 INFO  Starting to parse the user solution
2019-03-14 20:02:13,227 INFO  Displaying user solution
2019-03-14 20:02:13,289 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\nfrom _hashlib import new\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:02:13,289 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:02:13,290 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:02:13,290 INFO  Invoking the service to verify the user solution
2019-03-14 20:02:13,290 INFO  Time before invoking service:Thu Mar 14 20:02:13 IST 2019
2019-03-14 20:02:13,290 INFO  Initialising service address for VerifySolution
2019-03-14 20:02:13,291 INFO  Time before invoking service In SUPER:Thu Mar 14 20:02:13 IST 2019
2019-03-14 20:02:14,022 INFO  Time after invoking service In SUPER:Thu Mar 14 20:02:14 IST 2019
2019-03-14 20:02:14,022 INFO  Service responded successfully with required details
2019-03-14 20:02:14,022 INFO  Time after invoking service:Thu Mar 14 20:02:14 IST 2019
2019-03-14 20:02:14,023 INFO  User solution successfully verified
2019-03-14 20:02:14,023 INFO  Processing the response from verify service
2019-03-14 20:02:14,024 INFO  Starting to parse JSON response
2019-03-14 20:02:14,025 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:14,025 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:02:14,026 INFO  Successfully parsed JSON response
2019-03-14 20:02:14,026 INFO  In the process of generating verify response in HTML
2019-03-14 20:02:14,093 INFO  Successfully generated verify response in HTML
2019-03-14 20:02:14,093 INFO  Successfully processed the response from service
2019-03-14 20:04:10,021 INFO  Setting request parameters for VerifySolution
2019-03-14 20:04:10,021 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:04:10,021 INFO  Starting to parse the user solution
2019-03-14 20:04:10,022 INFO  Displaying user solution
2019-03-14 20:04:10,067 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:04:10,068 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:04:10,068 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:04:10,068 INFO  Invoking the service to verify the user solution
2019-03-14 20:04:10,068 INFO  Time before invoking service:Thu Mar 14 20:04:10 IST 2019
2019-03-14 20:04:10,068 INFO  Initialising service address for VerifySolution
2019-03-14 20:04:10,069 INFO  Time before invoking service In SUPER:Thu Mar 14 20:04:10 IST 2019
2019-03-14 20:04:11,006 INFO  Time after invoking service In SUPER:Thu Mar 14 20:04:11 IST 2019
2019-03-14 20:04:11,006 INFO  Service responded successfully with required details
2019-03-14 20:04:11,007 INFO  Time after invoking service:Thu Mar 14 20:04:11 IST 2019
2019-03-14 20:04:11,007 INFO  User solution successfully verified
2019-03-14 20:04:11,007 INFO  Processing the response from verify service
2019-03-14 20:04:11,009 INFO  Starting to parse JSON response
2019-03-14 20:04:11,010 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:04:11,010 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:04:11,011 INFO  Successfully parsed JSON response
2019-03-14 20:04:11,011 INFO  In the process of generating verify response in HTML
2019-03-14 20:04:11,078 INFO  Successfully generated verify response in HTML
2019-03-14 20:04:11,078 INFO  Successfully processed the response from service
2019-03-14 20:11:18,891 INFO  Setting request parameters for VerifySolution
2019-03-14 20:11:18,892 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:11:18,892 INFO  Starting to parse the user solution
2019-03-14 20:11:18,892 INFO  Displaying user solution
2019-03-14 20:11:18,949 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-5\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef create_new_sentence(word_list):\r\n    new_sentence=\"\"\r\n    # Write your logic here\r\n    temp = word_list.get_head()\r\n    while(temp is not None):\r\n        new = temp.get_data()\r\n        if(new==\"*\" or new==\"/\"):\r\n            new_sentence+=\" \"\r\n        elif(new_sentence[-2:]==\"  \"):\r\n            new_sentence+= new.upper()\r\n        else:\r\n            new_sentence+= new\r\n        temp = temp.get_next()\r\n    new_sentence = new_sentence.replace('  ',' ')\r\n    return new_sentence\r\n\r\n\r\nword_list=LinkedList()\r\nword_list.add(\"T\")\r\nword_list.add(\"h\")\r\nword_list.add(\"e\")\r\nword_list.add(\"/\")\r\nword_list.add(\"*\")\r\nword_list.add(\"s\")\r\nword_list.add(\"k\")\r\nword_list.add(\"y\")\r\nword_list.add(\"*\")\r\nword_list.add(\"i\")\r\nword_list.add(\"s\")\r\nword_list.add(\"/\")\r\nword_list.add(\"/\")\r\nword_list.add(\"b\")\r\nword_list.add(\"l\")\r\nword_list.add(\"u\")\r\nword_list.add(\"e\")\r\nresult=create_new_sentence(word_list)\r\nprint(result)\r\n","asgnmtId":"5","SolutionFileName":"Assign5.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:11:18,949 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:11:18,949 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:11:18,949 INFO  Invoking the service to verify the user solution
2019-03-14 20:11:18,950 INFO  Time before invoking service:Thu Mar 14 20:11:18 IST 2019
2019-03-14 20:11:18,950 INFO  Initialising service address for VerifySolution
2019-03-14 20:11:18,950 INFO  Time before invoking service In SUPER:Thu Mar 14 20:11:18 IST 2019
2019-03-14 20:11:19,858 INFO  Time after invoking service In SUPER:Thu Mar 14 20:11:19 IST 2019
2019-03-14 20:11:19,859 INFO  Service responded successfully with required details
2019-03-14 20:11:19,859 INFO  Time after invoking service:Thu Mar 14 20:11:19 IST 2019
2019-03-14 20:11:19,859 INFO  User solution successfully verified
2019-03-14 20:11:19,859 INFO  Processing the response from verify service
2019-03-14 20:11:19,861 INFO  Starting to parse JSON response
2019-03-14 20:11:19,863 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:11:19,863 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:11:19,864 INFO  Successfully parsed JSON response
2019-03-14 20:11:19,864 INFO  In the process of generating verify response in HTML
2019-03-14 20:11:19,949 INFO  Successfully generated verify response in HTML
2019-03-14 20:11:19,949 INFO  Successfully processed the response from service
2019-03-14 20:11:22,966 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 20:11:22,967 INFO  Displaying user solution
2019-03-14 20:11:22,976 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 20:11:22,976 INFO  Invoking the service to submit the user solution
2019-03-14 20:11:22,976 INFO  Initialising service address for Submit
2019-03-14 20:11:22,977 INFO  Time before invoking service In SUPER:Thu Mar 14 20:11:22 IST 2019
2019-03-14 20:11:23,276 INFO  Time after invoking service In SUPER:Thu Mar 14 20:11:23 IST 2019
2019-03-14 20:11:23,276 INFO  Service responded successfully with required details
2019-03-14 20:11:23,276 INFO  User solution successfully submitted
2019-03-14 20:11:23,277 INFO  Displaying submission status
2019-03-14 20:11:23,277 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 20:31:11,795 INFO  Verification Failed : Incorrect #tag
->Please provide the correct #tag in thefirst line as per ILP starter code
2019-03-14 20:31:27,124 INFO  Setting request parameters for VerifySolution
2019-03-14 20:31:27,124 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:31:27,124 INFO  Starting to parse the user solution
2019-03-14 20:31:27,125 INFO  Displaying user solution
2019-03-14 20:31:27,213 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-6\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Child:\r\n    def __init__(self,name,item_to_perform):\r\n        self.__name=name\r\n        self.__item_to_perform=item_to_perform\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+self.__item_to_perform)\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_item_to_perform(self):\r\n        return self.__item_to_perform\r\n\r\n\r\n#Implement Performance class here\r\nclass Performance:\r\n    def __init__(self,children_list):\r\n        self.__children_list = children_list\r\n\r\n    def get_children_list(self):\r\n        return self.__children_list\r\n    def change_position(self,child):\r\n        pass\r\n    def add_new_child(self,child):\r\n        pass\r\n        \r\n    \r\nchild1=Child(\"Rahul\",\"solo song\")\r\nchild2=Child(\"Sheema\",\"Dance\")\r\nchild3=Child(\"Gitu\",\"Plays Flute\")\r\nchild4=Child(\"Tarun\",\"Gymnastics\")\r\nchild5=Child(\"Tom\",\"MIME\")\r\n\r\n#Add different values to the list and test the program\r\nchildren_list=LinkedList()\r\nchildren_list.add(child1)\r\nchildren_list.add(child2)\r\nchildren_list.add(child3)\r\nchildren_list.add(child4)\r\nchildren_list.add(child5)\r\nperformance=Performance(children_list)\r\nprint(\"The order in which the children would perform:\")\r\nperformance.get_children_list().display()\r\nprint()\r\nprint(\"After Rahul's performance, the schedule would change to:\")\r\nperformance.change_position(child1)\r\nperformance.get_children_list().display()\r\nprint()\r\nchild6=Child(\"Swetha\",\"Vote of Thanks\")\r\nprint(\"After Swetha has joined, the schedule is:\")\r\nperformance.add_new_child(child6)\r\nperformance.get_children_list().display()\r\n","asgnmtId":"6","SolutionFileName":"Assign6.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:31:27,213 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:31:27,213 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:31:27,213 INFO  Invoking the service to verify the user solution
2019-03-14 20:31:27,213 INFO  Time before invoking service:Thu Mar 14 20:31:27 IST 2019
2019-03-14 20:31:27,214 INFO  Initialising service address for VerifySolution
2019-03-14 20:31:27,214 INFO  Time before invoking service In SUPER:Thu Mar 14 20:31:27 IST 2019
2019-03-14 20:31:28,218 INFO  Time after invoking service In SUPER:Thu Mar 14 20:31:28 IST 2019
2019-03-14 20:31:28,219 INFO  Service responded successfully with required details
2019-03-14 20:31:28,219 INFO  Time after invoking service:Thu Mar 14 20:31:28 IST 2019
2019-03-14 20:31:28,219 INFO  User solution successfully verified
2019-03-14 20:31:28,219 INFO  Processing the response from verify service
2019-03-14 20:31:28,225 INFO  Starting to parse JSON response
2019-03-14 20:31:28,226 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:31:28,227 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:31:28,228 INFO  Successfully parsed JSON response
2019-03-14 20:31:28,228 INFO  In the process of generating verify response in HTML
2019-03-14 20:31:28,306 INFO  Successfully generated verify response in HTML
2019-03-14 20:31:28,306 INFO  Successfully processed the response from service
2019-03-14 20:42:01,044 INFO  Setting request parameters for VerifySolution
2019-03-14 20:42:01,044 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:42:01,046 INFO  Starting to parse the user solution
2019-03-14 20:42:01,046 INFO  Displaying user solution
2019-03-14 20:42:01,112 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-6\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Child:\r\n    def __init__(self,name,item_to_perform):\r\n        self.__name=name\r\n        self.__item_to_perform=item_to_perform\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+self.__item_to_perform)\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_item_to_perform(self):\r\n        return self.__item_to_perform\r\n\r\n\r\n#Implement Performance class here\r\nclass Performance:\r\n    def __init__(self,children_list):\r\n        self.__children_list = children_list\r\n\r\n    def get_children_list(self):\r\n        return self.__children_list\r\n    def change_position(self,child):\r\n        pass\r\n    def add_new_child(self,child):\r\n        self.__children_list.add(child)\r\n        \r\n    \r\nchild1=Child(\"Rahul\",\"solo song\")\r\nchild2=Child(\"Sheema\",\"Dance\")\r\nchild3=Child(\"Gitu\",\"Plays Flute\")\r\nchild4=Child(\"Tarun\",\"Gymnastics\")\r\nchild5=Child(\"Tom\",\"MIME\")\r\n\r\n#Add different values to the list and test the program\r\nchildren_list=LinkedList()\r\nchildren_list.add(child1)\r\nchildren_list.add(child2)\r\nchildren_list.add(child3)\r\nchildren_list.add(child4)\r\nchildren_list.add(child5)\r\nperformance=Performance(children_list)\r\nprint(\"The order in which the children would perform:\")\r\nperformance.get_children_list().display()\r\nprint()\r\nprint(\"After Rahul's performance, the schedule would change to:\")\r\nperformance.change_position(child1)\r\nperformance.get_children_list().display()\r\nprint()\r\nchild6=Child(\"Swetha\",\"Vote of Thanks\")\r\nprint(\"After Swetha has joined, the schedule is:\")\r\nperformance.add_new_child(child6)\r\nperformance.get_children_list().display()\r\n","asgnmtId":"6","SolutionFileName":"Assign6.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:42:01,113 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:42:01,113 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:42:01,113 INFO  Invoking the service to verify the user solution
2019-03-14 20:42:01,114 INFO  Time before invoking service:Thu Mar 14 20:42:01 IST 2019
2019-03-14 20:42:01,114 INFO  Initialising service address for VerifySolution
2019-03-14 20:42:01,114 INFO  Time before invoking service In SUPER:Thu Mar 14 20:42:01 IST 2019
2019-03-14 20:42:02,065 INFO  Time after invoking service In SUPER:Thu Mar 14 20:42:02 IST 2019
2019-03-14 20:42:02,065 INFO  Service responded successfully with required details
2019-03-14 20:42:02,065 INFO  Time after invoking service:Thu Mar 14 20:42:02 IST 2019
2019-03-14 20:42:02,066 INFO  User solution successfully verified
2019-03-14 20:42:02,066 INFO  Processing the response from verify service
2019-03-14 20:42:02,068 INFO  Starting to parse JSON response
2019-03-14 20:42:02,069 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:42:02,069 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:42:02,070 INFO  Successfully parsed JSON response
2019-03-14 20:42:02,070 INFO  In the process of generating verify response in HTML
2019-03-14 20:42:02,137 INFO  Successfully generated verify response in HTML
2019-03-14 20:42:02,137 INFO  Successfully processed the response from service
2019-03-14 20:54:46,442 INFO  Setting request parameters for VerifySolution
2019-03-14 20:54:46,442 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:54:46,442 INFO  Starting to parse the user solution
2019-03-14 20:54:46,443 INFO  Displaying user solution
2019-03-14 20:54:46,524 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-6\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Child:\r\n    def __init__(self,name,item_to_perform):\r\n        self.__name=name\r\n        self.__item_to_perform=item_to_perform\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+self.__item_to_perform)\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_item_to_perform(self):\r\n        return self.__item_to_perform\r\n\r\n\r\n#Implement Performance class here\r\nclass Performance:\r\n    def __init__(self,children_list):\r\n        self.__children_list = children_list\r\n\r\n    def get_children_list(self):\r\n        return self.__children_list\r\n    def change_position(self,child):\r\n        self.__children_list.delete(child)\r\n        temp =self.__children_list.get_head()\r\n        count = 0\r\n        while(temp is not None):\r\n            count+=1\r\n            temp = temp.get_next()\r\n        before_child = self.__children_list.get_head()\r\n        new_count = count\r\n        while(count!=(new_count//2)+1):\r\n            before_child = before_child.get_next()\r\n            count-=1\r\n        self.__children_list.insert(child,before_child.get_data())\r\n        \r\n    def add_new_child(self,child):\r\n        self.__children_list.add(child)\r\n        \r\n    \r\nchild1=Child(\"Rahul\",\"solo song\")\r\nchild2=Child(\"Sheema\",\"Dance\")\r\nchild3=Child(\"Gitu\",\"Plays Flute\")\r\nchild4=Child(\"Tarun\",\"Gymnastics\")\r\nchild5=Child(\"Tom\",\"MIME\")\r\n\r\n#Add different values to the list and test the program\r\nchildren_list=LinkedList()\r\nchildren_list.add(child1)\r\nchildren_list.add(child2)\r\nchildren_list.add(child3)\r\nchildren_list.add(child4)\r\nchildren_list.add(child5)\r\nperformance=Performance(children_list)\r\nprint(\"The order in which the children would perform:\")\r\nperformance.get_children_list().display()\r\nprint()\r\nprint(\"After Rahul's performance, the schedule would change to:\")\r\nperformance.change_position(child1)\r\nperformance.get_children_list().display()\r\nprint()\r\nchild6=Child(\"Swetha\",\"Vote of Thanks\")\r\nprint(\"After Swetha has joined, the schedule is:\")\r\nperformance.add_new_child(child6)\r\nperformance.get_children_list().display()\r\n","asgnmtId":"6","SolutionFileName":"Assign6.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:54:46,524 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:54:46,525 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:54:46,525 INFO  Invoking the service to verify the user solution
2019-03-14 20:54:46,525 INFO  Time before invoking service:Thu Mar 14 20:54:46 IST 2019
2019-03-14 20:54:46,525 INFO  Initialising service address for VerifySolution
2019-03-14 20:54:46,526 INFO  Time before invoking service In SUPER:Thu Mar 14 20:54:46 IST 2019
2019-03-14 20:54:47,523 INFO  Time after invoking service In SUPER:Thu Mar 14 20:54:47 IST 2019
2019-03-14 20:54:47,523 INFO  Service responded successfully with required details
2019-03-14 20:54:47,524 INFO  Time after invoking service:Thu Mar 14 20:54:47 IST 2019
2019-03-14 20:54:47,524 INFO  User solution successfully verified
2019-03-14 20:54:47,524 INFO  Processing the response from verify service
2019-03-14 20:54:47,528 INFO  Starting to parse JSON response
2019-03-14 20:54:47,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:54:47,529 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:54:47,530 INFO  Successfully parsed JSON response
2019-03-14 20:54:47,530 INFO  In the process of generating verify response in HTML
2019-03-14 20:54:47,605 INFO  Successfully generated verify response in HTML
2019-03-14 20:54:47,605 INFO  Successfully processed the response from service
2019-03-14 20:54:51,486 INFO  Setting request parameters for VerifySolution
2019-03-14 20:54:51,487 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 20:54:51,487 INFO  Starting to parse the user solution
2019-03-14 20:54:51,487 INFO  Displaying user solution
2019-03-14 20:54:51,538 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-6\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\nclass Child:\r\n    def __init__(self,name,item_to_perform):\r\n        self.__name=name\r\n        self.__item_to_perform=item_to_perform\r\n\r\n    def __str__(self):\r\n        return(self.__name+\" \"+self.__item_to_perform)\r\n\r\n    def get_name(self):\r\n        return self.__name\r\n\r\n    def get_item_to_perform(self):\r\n        return self.__item_to_perform\r\n\r\n\r\n#Implement Performance class here\r\nclass Performance:\r\n    def __init__(self,children_list):\r\n        self.__children_list = children_list\r\n\r\n    def get_children_list(self):\r\n        return self.__children_list\r\n    def change_position(self,child):\r\n        self.__children_list.delete(child)\r\n        temp =self.__children_list.get_head()\r\n        count = 0\r\n        while(temp is not None):\r\n            count+=1\r\n            temp = temp.get_next()\r\n        before_child = self.__children_list.get_head()\r\n        new_count = count\r\n        while(count!=(new_count//2)+1):\r\n            before_child = before_child.get_next()\r\n            count-=1\r\n        self.__children_list.insert(child,before_child.get_data())\r\n        \r\n    def add_new_child(self,child):\r\n        self.__children_list.add(child)\r\n        \r\n    \r\nchild1=Child(\"Rahul\",\"solo song\")\r\nchild2=Child(\"Sheema\",\"Dance\")\r\nchild3=Child(\"Gitu\",\"Plays Flute\")\r\nchild4=Child(\"Tarun\",\"Gymnastics\")\r\nchild5=Child(\"Tom\",\"MIME\")\r\n\r\n#Add different values to the list and test the program\r\nchildren_list=LinkedList()\r\nchildren_list.add(child1)\r\nchildren_list.add(child2)\r\nchildren_list.add(child3)\r\nchildren_list.add(child4)\r\nchildren_list.add(child5)\r\nperformance=Performance(children_list)\r\nprint(\"The order in which the children would perform:\")\r\nperformance.get_children_list().display()\r\nprint()\r\nprint(\"After Rahul's performance, the schedule would change to:\")\r\nperformance.change_position(child1)\r\nperformance.get_children_list().display()\r\nprint()\r\nchild6=Child(\"Swetha\",\"Vote of Thanks\")\r\nprint(\"After Swetha has joined, the schedule is:\")\r\nperformance.add_new_child(child6)\r\nperformance.get_children_list().display()\r\n","asgnmtId":"6","SolutionFileName":"Assign6.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 20:54:51,538 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 20:54:51,538 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 20:54:51,538 INFO  Invoking the service to verify the user solution
2019-03-14 20:54:51,539 INFO  Time before invoking service:Thu Mar 14 20:54:51 IST 2019
2019-03-14 20:54:51,539 INFO  Initialising service address for VerifySolution
2019-03-14 20:54:51,540 INFO  Time before invoking service In SUPER:Thu Mar 14 20:54:51 IST 2019
2019-03-14 20:54:52,356 INFO  Time after invoking service In SUPER:Thu Mar 14 20:54:52 IST 2019
2019-03-14 20:54:52,357 INFO  Service responded successfully with required details
2019-03-14 20:54:52,357 INFO  Time after invoking service:Thu Mar 14 20:54:52 IST 2019
2019-03-14 20:54:52,357 INFO  User solution successfully verified
2019-03-14 20:54:52,357 INFO  Processing the response from verify service
2019-03-14 20:54:52,359 INFO  Starting to parse JSON response
2019-03-14 20:54:52,360 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:54:52,360 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 20:54:52,361 INFO  Successfully parsed JSON response
2019-03-14 20:54:52,361 INFO  In the process of generating verify response in HTML
2019-03-14 20:54:52,429 INFO  Successfully generated verify response in HTML
2019-03-14 20:54:52,429 INFO  Successfully processed the response from service
2019-03-14 20:54:55,058 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 20:54:55,059 INFO  Displaying user solution
2019-03-14 20:54:55,067 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 20:54:55,067 INFO  Invoking the service to submit the user solution
2019-03-14 20:54:55,067 INFO  Initialising service address for Submit
2019-03-14 20:54:55,068 INFO  Time before invoking service In SUPER:Thu Mar 14 20:54:55 IST 2019
2019-03-14 20:54:55,421 INFO  Time after invoking service In SUPER:Thu Mar 14 20:54:55 IST 2019
2019-03-14 20:54:55,421 INFO  Service responded successfully with required details
2019-03-14 20:54:55,422 INFO  User solution successfully submitted
2019-03-14 20:54:55,422 INFO  Displaying submission status
2019-03-14 20:54:55,422 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 20:54:57,658 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 20:54:57,659 INFO  Displaying user solution
2019-03-14 20:54:57,666 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 20:54:57,667 INFO  Invoking the service to submit the user solution
2019-03-14 20:54:57,667 INFO  Initialising service address for Submit
2019-03-14 20:54:57,667 INFO  Time before invoking service In SUPER:Thu Mar 14 20:54:57 IST 2019
2019-03-14 20:54:57,923 INFO  Time after invoking service In SUPER:Thu Mar 14 20:54:57 IST 2019
2019-03-14 20:54:57,923 INFO  Service responded successfully with required details
2019-03-14 20:54:57,923 INFO  User solution successfully submitted
2019-03-14 20:54:57,923 INFO  Displaying submission status
2019-03-14 20:54:57,923 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 21:06:46,301 INFO  Setting request parameters for VerifySolution
2019-03-14 21:06:46,301 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:06:46,301 INFO  Starting to parse the user solution
2019-03-14 21:06:46,302 INFO  Displaying user solution
2019-03-14 21:06:46,383 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    duplicate_list = set(list1)   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nremove_duplicates(duplicate_list)\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:06:46,383 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:06:46,383 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:06:46,383 INFO  Invoking the service to verify the user solution
2019-03-14 21:06:46,385 INFO  Time before invoking service:Thu Mar 14 21:06:46 IST 2019
2019-03-14 21:06:46,385 INFO  Initialising service address for VerifySolution
2019-03-14 21:06:46,385 INFO  Time before invoking service In SUPER:Thu Mar 14 21:06:46 IST 2019
2019-03-14 21:06:47,306 INFO  Time after invoking service In SUPER:Thu Mar 14 21:06:47 IST 2019
2019-03-14 21:06:47,307 INFO  Service responded successfully with required details
2019-03-14 21:06:47,307 INFO  Time after invoking service:Thu Mar 14 21:06:47 IST 2019
2019-03-14 21:06:47,307 INFO  User solution successfully verified
2019-03-14 21:06:47,307 INFO  Processing the response from verify service
2019-03-14 21:06:47,311 INFO  Starting to parse JSON response
2019-03-14 21:06:47,312 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:06:47,312 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:06:47,313 INFO  Successfully parsed JSON response
2019-03-14 21:06:47,313 INFO  In the process of generating verify response in HTML
2019-03-14 21:06:47,425 INFO  Successfully generated verify response in HTML
2019-03-14 21:06:47,425 INFO  Successfully processed the response from service
2019-03-14 21:07:32,002 INFO  Setting request parameters for VerifySolution
2019-03-14 21:07:32,002 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:07:32,002 INFO  Starting to parse the user solution
2019-03-14 21:07:32,003 INFO  Displaying user solution
2019-03-14 21:07:32,073 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    duplicate_list = set(list1)   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nremove_duplicates(duplicate_list)\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:07:32,073 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:07:32,074 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:07:32,074 INFO  Invoking the service to verify the user solution
2019-03-14 21:07:32,074 INFO  Time before invoking service:Thu Mar 14 21:07:32 IST 2019
2019-03-14 21:07:32,074 INFO  Initialising service address for VerifySolution
2019-03-14 21:07:32,075 INFO  Time before invoking service In SUPER:Thu Mar 14 21:07:32 IST 2019
2019-03-14 21:07:33,002 INFO  Time after invoking service In SUPER:Thu Mar 14 21:07:33 IST 2019
2019-03-14 21:07:33,002 INFO  Service responded successfully with required details
2019-03-14 21:07:33,003 INFO  Time after invoking service:Thu Mar 14 21:07:33 IST 2019
2019-03-14 21:07:33,004 INFO  User solution successfully verified
2019-03-14 21:07:33,004 INFO  Processing the response from verify service
2019-03-14 21:07:33,007 INFO  Starting to parse JSON response
2019-03-14 21:07:33,008 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:07:33,008 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:07:33,009 INFO  Successfully parsed JSON response
2019-03-14 21:07:33,010 INFO  In the process of generating verify response in HTML
2019-03-14 21:07:33,081 INFO  Successfully generated verify response in HTML
2019-03-14 21:07:33,081 INFO  Successfully processed the response from service
2019-03-14 21:14:15,427 INFO  Setting request parameters for VerifySolution
2019-03-14 21:14:15,427 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:14:15,427 INFO  Starting to parse the user solution
2019-03-14 21:14:15,428 INFO  Displaying user solution
2019-03-14 21:14:15,501 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nremove_duplicates(duplicate_list.__str__())\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:14:15,501 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:14:15,501 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:14:15,501 INFO  Invoking the service to verify the user solution
2019-03-14 21:14:15,502 INFO  Time before invoking service:Thu Mar 14 21:14:15 IST 2019
2019-03-14 21:14:15,502 INFO  Initialising service address for VerifySolution
2019-03-14 21:14:15,503 INFO  Time before invoking service In SUPER:Thu Mar 14 21:14:15 IST 2019
2019-03-14 21:14:16,438 INFO  Time after invoking service In SUPER:Thu Mar 14 21:14:16 IST 2019
2019-03-14 21:14:16,438 INFO  Service responded successfully with required details
2019-03-14 21:14:16,438 INFO  Time after invoking service:Thu Mar 14 21:14:16 IST 2019
2019-03-14 21:14:16,438 INFO  User solution successfully verified
2019-03-14 21:14:16,439 INFO  Processing the response from verify service
2019-03-14 21:14:16,441 INFO  Starting to parse JSON response
2019-03-14 21:14:16,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:14:16,443 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:14:16,444 INFO  Successfully parsed JSON response
2019-03-14 21:14:16,444 INFO  In the process of generating verify response in HTML
2019-03-14 21:14:16,524 INFO  Successfully generated verify response in HTML
2019-03-14 21:14:16,524 INFO  Successfully processed the response from service
2019-03-14 21:15:09,392 INFO  Setting request parameters for VerifySolution
2019-03-14 21:15:09,392 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:15:09,393 INFO  Starting to parse the user solution
2019-03-14 21:15:09,393 INFO  Displaying user solution
2019-03-14 21:15:09,463 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:15:09,463 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:15:09,463 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:15:09,464 INFO  Invoking the service to verify the user solution
2019-03-14 21:15:09,464 INFO  Time before invoking service:Thu Mar 14 21:15:09 IST 2019
2019-03-14 21:15:09,464 INFO  Initialising service address for VerifySolution
2019-03-14 21:15:09,465 INFO  Time before invoking service In SUPER:Thu Mar 14 21:15:09 IST 2019
2019-03-14 21:15:10,449 INFO  Time after invoking service In SUPER:Thu Mar 14 21:15:10 IST 2019
2019-03-14 21:15:10,449 INFO  Service responded successfully with required details
2019-03-14 21:15:10,450 INFO  Time after invoking service:Thu Mar 14 21:15:10 IST 2019
2019-03-14 21:15:10,450 INFO  User solution successfully verified
2019-03-14 21:15:10,450 INFO  Processing the response from verify service
2019-03-14 21:15:10,452 INFO  Starting to parse JSON response
2019-03-14 21:15:10,452 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:15:10,452 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:15:10,454 INFO  Successfully parsed JSON response
2019-03-14 21:15:10,454 INFO  In the process of generating verify response in HTML
2019-03-14 21:15:10,523 INFO  Successfully generated verify response in HTML
2019-03-14 21:15:10,523 INFO  Successfully processed the response from service
2019-03-14 21:16:28,619 INFO  Setting request parameters for VerifySolution
2019-03-14 21:16:28,619 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:16:28,620 INFO  Starting to parse the user solution
2019-03-14 21:16:28,620 INFO  Displaying user solution
2019-03-14 21:16:28,698 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n#This assignment needs DataStructures.py file in your package, you can get it from resources page\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    duplicate_list = sorted(duplicate_list)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:16:28,699 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:16:28,699 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:16:28,699 INFO  Invoking the service to verify the user solution
2019-03-14 21:16:28,699 INFO  Time before invoking service:Thu Mar 14 21:16:28 IST 2019
2019-03-14 21:16:28,699 INFO  Initialising service address for VerifySolution
2019-03-14 21:16:28,700 INFO  Time before invoking service In SUPER:Thu Mar 14 21:16:28 IST 2019
2019-03-14 21:16:29,572 INFO  Time after invoking service In SUPER:Thu Mar 14 21:16:29 IST 2019
2019-03-14 21:16:29,573 INFO  Service responded successfully with required details
2019-03-14 21:16:29,573 INFO  Time after invoking service:Thu Mar 14 21:16:29 IST 2019
2019-03-14 21:16:29,573 INFO  User solution successfully verified
2019-03-14 21:16:29,574 INFO  Processing the response from verify service
2019-03-14 21:16:29,576 INFO  Starting to parse JSON response
2019-03-14 21:16:29,578 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:16:29,578 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:16:29,579 INFO  Successfully parsed JSON response
2019-03-14 21:16:29,579 INFO  In the process of generating verify response in HTML
2019-03-14 21:16:29,656 INFO  Successfully generated verify response in HTML
2019-03-14 21:16:29,657 INFO  Successfully processed the response from service
2019-03-14 21:16:50,097 INFO  Setting request parameters for VerifySolution
2019-03-14 21:16:50,097 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:16:50,097 INFO  Starting to parse the user solution
2019-03-14 21:16:50,098 INFO  Displaying user solution
2019-03-14 21:16:50,155 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\n\r\n\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    duplicate_list = sorted(duplicate_list)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:16:50,156 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:16:50,156 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:16:50,156 INFO  Invoking the service to verify the user solution
2019-03-14 21:16:50,156 INFO  Time before invoking service:Thu Mar 14 21:16:50 IST 2019
2019-03-14 21:16:50,156 INFO  Initialising service address for VerifySolution
2019-03-14 21:16:50,157 INFO  Time before invoking service In SUPER:Thu Mar 14 21:16:50 IST 2019
2019-03-14 21:16:51,058 INFO  Time after invoking service In SUPER:Thu Mar 14 21:16:51 IST 2019
2019-03-14 21:16:51,058 INFO  Service responded successfully with required details
2019-03-14 21:16:51,059 INFO  Time after invoking service:Thu Mar 14 21:16:51 IST 2019
2019-03-14 21:16:51,059 INFO  User solution successfully verified
2019-03-14 21:16:51,059 INFO  Processing the response from verify service
2019-03-14 21:16:51,061 INFO  Starting to parse JSON response
2019-03-14 21:16:51,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:16:51,061 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:16:51,062 INFO  Successfully parsed JSON response
2019-03-14 21:16:51,063 INFO  In the process of generating verify response in HTML
2019-03-14 21:16:51,129 INFO  Successfully generated verify response in HTML
2019-03-14 21:16:51,129 INFO  Successfully processed the response from service
2019-03-14 21:17:00,663 INFO  Setting request parameters for VerifySolution
2019-03-14 21:17:00,663 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:17:00,663 INFO  Starting to parse the user solution
2019-03-14 21:17:00,664 INFO  Displaying user solution
2019-03-14 21:17:00,732 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    duplicate_list = sorted(duplicate_list)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:17:00,732 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:17:00,733 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:17:00,733 INFO  Invoking the service to verify the user solution
2019-03-14 21:17:00,733 INFO  Time before invoking service:Thu Mar 14 21:17:00 IST 2019
2019-03-14 21:17:00,733 INFO  Initialising service address for VerifySolution
2019-03-14 21:17:00,734 INFO  Time before invoking service In SUPER:Thu Mar 14 21:17:00 IST 2019
2019-03-14 21:17:01,562 INFO  Time after invoking service In SUPER:Thu Mar 14 21:17:01 IST 2019
2019-03-14 21:17:01,562 INFO  Service responded successfully with required details
2019-03-14 21:17:01,562 INFO  Time after invoking service:Thu Mar 14 21:17:01 IST 2019
2019-03-14 21:17:01,563 INFO  User solution successfully verified
2019-03-14 21:17:01,563 INFO  Processing the response from verify service
2019-03-14 21:17:01,564 INFO  Starting to parse JSON response
2019-03-14 21:17:01,565 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:17:01,565 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:17:01,566 INFO  Successfully parsed JSON response
2019-03-14 21:17:01,566 INFO  In the process of generating verify response in HTML
2019-03-14 21:17:01,629 INFO  Successfully generated verify response in HTML
2019-03-14 21:17:01,629 INFO  Successfully processed the response from service
2019-03-14 21:17:04,426 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 21:17:04,427 INFO  Displaying user solution
2019-03-14 21:17:04,433 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 21:17:04,433 INFO  Invoking the service to submit the user solution
2019-03-14 21:17:04,433 INFO  Initialising service address for Submit
2019-03-14 21:17:04,434 INFO  Time before invoking service In SUPER:Thu Mar 14 21:17:04 IST 2019
2019-03-14 21:17:04,750 INFO  Time after invoking service In SUPER:Thu Mar 14 21:17:04 IST 2019
2019-03-14 21:17:04,751 INFO  Service responded successfully with required details
2019-03-14 21:17:04,751 INFO  User solution successfully submitted
2019-03-14 21:17:04,751 INFO  Displaying submission status
2019-03-14 21:17:04,751 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 21:17:07,826 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 21:17:07,827 INFO  Displaying user solution
2019-03-14 21:17:07,834 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 21:17:07,834 INFO  Invoking the service to submit the user solution
2019-03-14 21:17:07,834 INFO  Initialising service address for Submit
2019-03-14 21:17:07,834 INFO  Time before invoking service In SUPER:Thu Mar 14 21:17:07 IST 2019
2019-03-14 21:17:08,059 INFO  Time after invoking service In SUPER:Thu Mar 14 21:17:08 IST 2019
2019-03-14 21:17:08,059 INFO  Service responded successfully with required details
2019-03-14 21:17:08,059 INFO  User solution successfully submitted
2019-03-14 21:17:08,060 INFO  Displaying submission status
2019-03-14 21:17:08,060 INFO  Displayed submission status successfullySuccessfully Submitted!
2019-03-14 21:20:18,791 INFO  Setting request parameters for VerifySolution
2019-03-14 21:20:18,791 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:20:18,791 INFO  Starting to parse the user solution
2019-03-14 21:20:18,792 INFO  Displaying user solution
2019-03-14 21:20:18,845 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    duplicate_list = sorted(duplicate_list)\r\n       \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:20:18,846 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:20:18,846 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:20:18,846 INFO  Invoking the service to verify the user solution
2019-03-14 21:20:18,846 INFO  Time before invoking service:Thu Mar 14 21:20:18 IST 2019
2019-03-14 21:20:18,846 INFO  Initialising service address for VerifySolution
2019-03-14 21:20:18,847 INFO  Time before invoking service In SUPER:Thu Mar 14 21:20:18 IST 2019
2019-03-14 21:20:19,632 INFO  Time after invoking service In SUPER:Thu Mar 14 21:20:19 IST 2019
2019-03-14 21:20:19,632 INFO  Service responded successfully with required details
2019-03-14 21:20:19,632 INFO  Time after invoking service:Thu Mar 14 21:20:19 IST 2019
2019-03-14 21:20:19,632 INFO  User solution successfully verified
2019-03-14 21:20:19,633 INFO  Processing the response from verify service
2019-03-14 21:20:19,634 INFO  Starting to parse JSON response
2019-03-14 21:20:19,635 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:20:19,635 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:20:19,636 INFO  Successfully parsed JSON response
2019-03-14 21:20:19,636 INFO  In the process of generating verify response in HTML
2019-03-14 21:20:19,703 INFO  Successfully generated verify response in HTML
2019-03-14 21:20:19,703 INFO  Successfully processed the response from service
2019-03-14 21:20:26,375 INFO  Setting request parameters for VerifySolution
2019-03-14 21:20:26,375 INFO  Initiating to process and prepare Input for the verify service
2019-03-14 21:20:26,375 INFO  Starting to parse the user solution
2019-03-14 21:20:26,375 INFO  Displaying user solution
2019-03-14 21:20:26,426 INFO  Successfully parsed the user solution{"CourseShortName":"DSA","UserSolution":"#DSA-Assgn-7\r\n'''\r\nCreated on Mar 14, 2019\r\n\r\n@author: vijay.pal01\r\n'''\r\n\r\nfrom src.DataStructures import LinkedList\r\n\r\ndef remove_duplicates(duplicate_list):\r\n    #write your logic here\r\n    list1=[]\r\n    new_list = LinkedList()\r\n    temp = duplicate_list.get_head()\r\n    while(temp is not None):\r\n        list1.append(temp.get_data())\r\n        temp = temp.get_next()\r\n    set1 = set(list1)\r\n    duplicate_list = list(set1)\r\n    duplicate_list = sorted(duplicate_list)\r\n    for i in range(0,len(duplicate_list)):\r\n        new_list.add(duplicate_list[i])\r\n    duplicate_list = new_list   \r\n    return duplicate_list\r\n\r\n#Add different values to the linked list and test your program\r\nduplicate_list=LinkedList()\r\nduplicate_list.add(30)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nduplicate_list.add(40)\r\nprint(remove_duplicates(duplicate_list))\r\n","asgnmtId":"7","SolutionFileName":"Assign7.py","AsgnmtTyp":"A","TestcaseFileName":""}
2019-03-14 21:20:26,427 INFO  Successfully processed and prepared the input for the verify service
2019-03-14 21:20:26,427 INFO  Successfully set the request parameters for VerifySolution
2019-03-14 21:20:26,427 INFO  Invoking the service to verify the user solution
2019-03-14 21:20:26,427 INFO  Time before invoking service:Thu Mar 14 21:20:26 IST 2019
2019-03-14 21:20:26,427 INFO  Initialising service address for VerifySolution
2019-03-14 21:20:26,428 INFO  Time before invoking service In SUPER:Thu Mar 14 21:20:26 IST 2019
2019-03-14 21:20:27,303 INFO  Time after invoking service In SUPER:Thu Mar 14 21:20:27 IST 2019
2019-03-14 21:20:27,303 INFO  Service responded successfully with required details
2019-03-14 21:20:27,303 INFO  Time after invoking service:Thu Mar 14 21:20:27 IST 2019
2019-03-14 21:20:27,303 INFO  User solution successfully verified
2019-03-14 21:20:27,304 INFO  Processing the response from verify service
2019-03-14 21:20:27,304 INFO  Starting to parse JSON response
2019-03-14 21:20:27,305 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:20:27,305 ERROR Keys used to parse test result JSON might be incorrect
2019-03-14 21:20:27,306 INFO  Successfully parsed JSON response
2019-03-14 21:20:27,306 INFO  In the process of generating verify response in HTML
2019-03-14 21:20:27,365 INFO  Successfully generated verify response in HTML
2019-03-14 21:20:27,365 INFO  Successfully processed the response from service
2019-03-14 21:20:30,370 INFO  Initiating to process and prepare Input for the submit service
2019-03-14 21:20:30,370 INFO  Displaying user solution
2019-03-14 21:20:30,377 INFO  Successfully processed and prepared the input for the submit service
2019-03-14 21:20:30,378 INFO  Invoking the service to submit the user solution
2019-03-14 21:20:30,378 INFO  Initialising service address for Submit
2019-03-14 21:20:30,379 INFO  Time before invoking service In SUPER:Thu Mar 14 21:20:30 IST 2019
2019-03-14 21:20:30,536 INFO  Time after invoking service In SUPER:Thu Mar 14 21:20:30 IST 2019
2019-03-14 21:20:30,536 INFO  Service responded successfully with required details
2019-03-14 21:20:30,536 INFO  User solution successfully submitted
2019-03-14 21:20:30,537 INFO  Displaying submission status
2019-03-14 21:20:30,537 INFO  Displayed submission status successfullySuccessfully Submitted!
